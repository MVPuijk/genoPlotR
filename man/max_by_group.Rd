% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/edit_data.R
\name{max_by_group}
\alias{max_by_group}
\title{Filter dna_seg features by looking at a maximum within groups}
\usage{
max_by_group(
  dna_seg_input,
  group_by,
  longest = "length",
  ignore_boundaries = TRUE
)
}
\arguments{
\item{dna_seg_input}{Either a single \code{dna_seg} or a list of \code{dna_seg}
objects.}

\item{group_by}{A character string, representing a \code{dna_seg} attribute that
the features will be grouped by.}

\item{longest}{A character string, representing a \code{dna_seg} attribute. After
grouping, features will be taken with the maximum value in the column given
by this argument.}

\item{ignore_boundaries}{Logical. If \code{TRUE}, any features with
\code{"boundaries"} as their \code{gene_type} will be kept regardless.}
}
\value{
Either a single \code{dna_seg} object or a list of \code{dna_seg} objects,
matching the input given using \code{dna_seg_input}.
}
\description{
Takes a \code{dna_seg} or list of \code{dna_seg} objects. It groups them based on
\code{group_by}, and per group takes the feature with the maximum value in the
column given by \code{longest}.
}
\details{
This was intended to take the longest transcript per gene, although it can
be used for other purposes. If \code{group_by}
points to a column with gene IDs, it intentionally mimics the output
of the \code{primary_transcript.py} script from OrthoFinder, so that \code{dna_segs}
can be loaded in from FASTA files before \code{primary_transcript.py} is used.
This preserves the metadata from the FASTA files, since
\code{primary_transcript.py} will remove this metadata.
}
\examples{
## Prepare dna_seg
names1 <- c("1A", "1B", "2A", "2B", "2C")
genes1 <- c("1", "1", "2", "2", "2")
starts1 <- c(1, 1, 101, 101, 101)
ends1 <- c(30, 60, 160, 130, 160)
lengths1 <- abs(starts1 - ends1)+1

## Make dna_seg
dna_seg_raw <- dna_seg(data.frame(name=names1, start=starts1, end=ends1,
                                  strand=rep(1, 5), length=lengths1,
                                  gene=genes1))
dna_seg_raw

## Take longest feature per gene name
dna_seg_edit <- max_by_group(dna_seg_input = dna_seg_raw, group_by = "gene")
dna_seg_edit

}
\seealso{
\link{dna_seg}
}
\author{
Mike Puijk
}
