% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_comparison.R
\name{read_comparison}
\alias{read_comparison}
\alias{read_comparison_from_file}
\alias{read_comparison_from_files}
\alias{read_comparison_from_blast}
\alias{read_comparison_from_tab}
\title{Creating comparisons between genomic sequences from files}
\usage{
read_comparison_from_file(file, fileType, ...)

read_comparison_from_files(files, fileType, seg_labels = NULL, ...)

read_comparison_from_blast(
  file,
  sort_by = NULL,
  filt_high_evalue = NULL,
  filt_low_per_id = NULL,
  filt_length = NULL,
  color_scheme = NULL,
  reverse = 0
)

read_comparison_from_tab(file, header = TRUE, filt_length = NULL, reverse = 0)
}
\arguments{
\item{file}{A character string containing a file path, or a file connection.}

\item{fileType}{A character string containing the file format to parse.
Must be one of: \code{"blast"}, or \code{"tab"}.}

\item{...}{Further arguments to pass to \code{read_comparison_from_blast} or
\code{read_comparison_from_tab}, see arguments below.}

\item{files}{A list or character vector containing file paths. Supports
wildcard expansion (e.g. *.txt).}

\item{seg_labels}{A character vector containing \code{dna_seg} labels. When
provided, this function will search for file names that match these \code{dna_seg}
labels. For example, with \code{seg_labels = c("seg1", "seg2", "seg3")}, it will
look for \code{"seg1_seg2"} and \code{"seg2_seg3"} among the file names provided by the
\code{files} argument, parse those files, and ignore all other files provided.}

\item{sort_by}{A character string containing the name of a column to sort by.
Must be a numeric column.}

\item{filt_high_evalue}{A numerical, filters out all comparisons with an
e-value higher than this value (unfiltered when left as \code{NULL}).}

\item{filt_low_per_id}{A numerical, filters out all comparisons with a
percentage identity lower than this value (unfiltered when left as \code{NULL}).}

\item{filt_length}{A numerical, filters out all comparisons that have
alignments shorter than this value (unfiltered when left as \code{NULL}).}

\item{color_scheme}{A color scheme to apply. Possible values include \code{grey},
\code{red_blue}, and \code{NULL} (which applies no color scheme). See
\link{gradient_color_scheme} for more details.}

\item{reverse}{When provided, the \code{comparison} will be reversed.
If \code{reverse = 1}, the first side will be reversed.
If \code{reverse = 2}, the second side will be reversed.
If \code{reverse < 1}, no side is reversed.
If \code{reverse > 2}, both sides are reversed.}

\item{header}{Logical. If \code{TRUE}, the first line will be parsed as a header
containing column names.}
}
\value{
A list of \code{comparison} objects for \code{read_comparison_from_files},
and a single \code{comparison} object otherwise.
}
\description{
Functions to parse \code{comparison} objects from tabular data or BLAST output.
}
\details{
To make \code{comparisons} from tabular files, the columns in these files must
include \code{start1}, \code{end1}, \code{start2}, and \code{end2}. If no header is specified,
these columns will be expected in that order, and an optional fifth column
will be parsed as the color of the comparison under the \code{col} column.
Additional columns can be included regardless of whether a header was
specified.

BLAST output must be provided in the default tabular format (\verb{-outfmt 6}),
which contains the following columns in this order:
\code{qseqid}, \code{sseqid}, \code{pident}, \code{length}, \code{mismatch}, \code{gapopen},
\code{qstart}, \code{qend}, \code{sstart}, \code{send}, \code{evalue}, and \code{bitscore}.

The resulting \code{comparison} object will contain these columns under these
names: \code{name1}, \code{name2}, \code{per_id}, \code{aln_len}, \code{mism}, \code{gaps}, \code{start1},
\code{start2},\code{end1}, \code{end2}, \code{e_value}, and \code{bit_score}.
}
\examples{

## Read comparison from tabular data
tab_file <- system.file('extdata/comparison2.tab', package = 'genoPlotR')
tab_comp <- read_comparison_from_tab(tab_file)
data.frame(tab_comp)

## Load dna_segs
data(barto)
bh <- barto$dna_segs[[3]]
bq <- barto$dna_segs[[4]]

## Read comparison from BLAST output
blast <- system.file('extdata/BH_vs_BQ.blastn.tab', package = 'genoPlotR')
blast_comp <- read_comparison_from_blast(blast, color_scheme = "red_blue")

## Plot
plot_gene_map(dna_segs = list(BH = bh, BQ = bq),
              comparisons = list(blast_comp),
              xlims = list(c(1,50000), c(1, 50000)))

}
\seealso{
\link{comparison}, \link{run_sequence_alignment}
}
\author{
Lionel Guy, Jens Roat Kultima, Mike Puijk
}
