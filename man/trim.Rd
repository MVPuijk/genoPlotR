% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generic.R
\name{trim}
\alias{trim}
\alias{trim.default}
\alias{trim.dna_seg}
\alias{trim.comparison}
\alias{trim.annotation}
\alias{trim.seg_plot}
\title{Trimming data frames using a numeric interval}
\usage{
trim(x, ...)

\method{trim}{default}(x, xlim = NULL, ...)

\method{trim}{dna_seg}(x, xlim = NULL, ...)

\method{trim}{comparison}(x, xlim1 = c(-Inf, Inf), xlim2 = c(-Inf, Inf), ...)

\method{trim}{annotation}(x, xlim = NULL, ...)

\method{trim}{seg_plot}(x, xlim = NULL, ...)
}
\arguments{
\item{x}{An object to trim, generally a \code{data.frame}, \code{data.table}, or
\code{seg_plot} object}

\item{...}{Unused.}

\item{xlim}{A \code{numeric} of length 2. In a general case, the rows whose values
are included in this interval are returned}

\item{xlim1}{A \code{numeric} of length 2, used only for \code{comparison} objects,
the interval to filter the first side.}

\item{xlim2}{A \code{numeric} of length 2, used only for \code{comparison} objects,
the interval to filter the second side.}
}
\value{
An object with the same type as \code{x}, with the rows (or subset)
corresponding to the given interval
}
\description{
Trims data frames with 2 or more \code{numeric} columns using a \code{numeric} interval.
Returns rows with \code{numeric} values that fall within the interval.
}
\details{
By default it uses the first 2 \code{numeric} columns in \code{x}.
If \code{x} is a \code{dna_seg} object, it uses the \code{start} and \code{end} columns.
If \code{x} is a \code{comparison} object, it filters using the \code{start1} and \code{end1}
columns with the \code{xlim1} argument, and \code{start2} and \code{end2} with the \code{xlim2}
argument.
If \code{x} is \code{annotation} object, it uses the \code{x1} and \code{x2} columns.
If \code{x} is a \code{seg_plot} object, the function uses the \code{xargs} variable from
\code{x} to define which vectors determine the x position (they should be the
same length). Then, all the variables (including those inside the \code{gp}
variable) that are the same length as the x vectors are trimmed, so that only
the rows for which the x values are inside the \code{xlim} argument are kept.
}
\examples{
## Load
data(barto)
xlim_ref <- c(10000, 45000)
## Seg 2 (ref)
barto$dna_segs[[2]] <- trim(barto$dna_segs[[2]], xlim = xlim_ref)
## Seg 1
barto$comparisons[[1]] <- trim(barto$comparisons[[1]], xlim2 = xlim_ref)
xlim1 <- range(barto$comparisons[[1]], overall = FALSE)$xlim1
barto$dna_segs[[1]] <- trim(barto$dna_segs[[1]], xlim = xlim1)
## Seg 3
barto$comparisons[[2]] <- trim(barto$comparisons[[2]], xlim1 = xlim_ref)
xlim3 <- range(barto$comparisons[[2]], overall = FALSE)$xlim2
barto$dna_segs[[3]] <- trim(barto$dna_segs[[3]], xlim = xlim3)
## Seg 4
barto$comparisons[[3]] <- trim(barto$comparisons[[3]], xlim1 = xlim3)
xlim4 <- range(barto$comparisons[[3]], overall = FALSE)$xlim2
barto$dna_segs[[4]] <- trim(barto$dna_segs[[4]], xlim = xlim4)
## Plot
plot_gene_map(barto$dna_segs, barto$comparisons)

## With seg_plot
x <- 1:20
y <- rnorm(20)
sp <- seg_plot(func = pointsGrob,
               args = list(x = x, y = y, gp = gpar(col = 1:20, cex = 1:3)))
## Trim 
sp_trim <- trim(sp, c(3, 10))
str(sp_trim)
range(sp_trim$arg$x)

}
\seealso{
\link{dna_seg}, \link{comparison}, \link{annotation}, \link{seg_plot}
}
\author{
Lionel Guy
}
