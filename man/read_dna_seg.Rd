% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_dna_seg.R
\name{read_dna_seg}
\alias{read_dna_seg}
\alias{read_dna_seg_from_file}
\alias{read_dna_seg_from_files}
\alias{read_dna_seg_from_embl}
\alias{read_dna_seg_from_genbank}
\alias{read_dna_seg_from_fasta}
\alias{read_dna_seg_from_ptt}
\alias{read_dna_seg_from_tab}
\title{Creating dna_segs from files}
\usage{
read_dna_seg_from_file(
  file,
  tagsToParse = c("CDS"),
  fileType = "detect",
  meta_lines = 2,
  gene_type = "auto",
  header = TRUE,
  extra_fields = NULL,
  boundariesToParse = NULL,
  read_sequence = FALSE,
  verbose = FALSE,
  ...
)

read_dna_seg_from_files(
  files,
  tagsToParse = c("CDS"),
  fileType = "detect",
  meta_lines = 2,
  gene_type = "auto",
  header = TRUE,
  extra_fields = NULL,
  boundariesToParse = NULL,
  read_sequence = FALSE,
  verbose = FALSE,
  ...
)

read_dna_seg_from_embl(
  file,
  tagsToParse = c("CDS"),
  boundariesToParse = NULL,
  extra_fields = NULL,
  read_sequence = FALSE,
  gene_type = "auto",
  verbose = FALSE,
  ...
)

read_dna_seg_from_genbank(
  file,
  tagsToParse = c("CDS"),
  boundariesToParse = NULL,
  extra_fields = NULL,
  read_sequence = FALSE,
  gene_type = "auto",
  verbose = FALSE,
  ...
)

read_dna_seg_from_fasta(file, read_sequence = FALSE, ...)

read_dna_seg_from_ptt(file, meta_lines = 2, header = TRUE, ...)

read_dna_seg_from_tab(file, header = TRUE, ...)
}
\arguments{
\item{file}{A character string containing a file path, or a file connection.}

\item{tagsToParse}{A character vector of tags to parse for GenBank or EMBL
files. Common examples include \code{"CDS"}, \code{"gene"}, \code{"tRNA"},
\code{"repeat_region"}, and \code{"misc_feature"}.}

\item{fileType}{A character string containing the file format to parse.
Must be one of: \code{"genbank"}, \code{"embl"}, \code{"ptt"}, \code{"fasta"}, or \code{"detect"}. If
\code{"detect"} is chosen, then it will attempt to determine the file format
automatically.}

\item{meta_lines}{The number of lines in the ptt file that represent
metadata, not counting the header lines. Standard for NCBI files is 2 (name
and length, number of proteins).}

\item{gene_type}{A character string, determines how genes are visualized.
Must be a valid gene type (see \link{gene_types}). For GenBank and EMBL files, if
this argument is \code{"auto"}, the genes will appear as arrows if there are no
introns, and as exons (blocks) when there are introns present.}

\item{header}{Logical. If \code{TRUE}, parses the first line of the tabular file
as a header containing column names.}

\item{extra_fields}{A character vector of extra fields to parse for GenBank
or EMBL files. These fields will be added as columns in the resulting
\code{dna_seg} object, unless the field was always empty.}

\item{boundariesToParse}{A character vector of tags to parse as sequence
boundaries for GenBank or EMBL files. Common examples include \code{"source"},
\code{"contig"}, \code{"chromosome"}, and \code{"scaffold"}.}

\item{read_sequence}{Logical. If \code{TRUE}, will add a sequence column to the
\code{dna_seg} containing the DNA or amino acid sequence of the features.}

\item{verbose}{Logical. If \code{TRUE}, reports timings whenever it starts parsing
a file.}

\item{...}{Further arguments to pass to \link{as.dna_seg}.}

\item{files}{A list or character vector containing file paths. Supports
wildcard expansion (e.g. *.txt).}
}
\value{
A list of \code{dna_seg} objects for \code{read_dna_seg_from_files}, and a
single \code{dna_seg} object otherwise.
}
\description{
Functions to parse \code{dna_seg} objects from different file formats. Support
is included for the following file formats: GenBank, EMBL, ptt, FASTA, and
tabular data.
}
\details{
GenBank and EMBL files are two commonly used file types that often contain a
great variety of information. To properly extract data from these files, the
user has to choose which features to extract. Commonly 'CDS' features are of
interest, but other feature tags such as \code{"gene"}, \code{"misc_feature"}, or
\code{"tRNA"} may be of interest. Should a feature contain an inner "pseudo" tag
indicating this CDS or gene is a pseudo gene, this will be presented as a
\code{"CDS_pseudo"} or a \code{"gene_pseudo"} feature type respectively in the
resulting table. In these two file types, the following fields are parsed
(in addition to the mandatory name, start, end, and strand): gi
(from db_xref=GI), uniprot_id, gene, locus_id (from locus_tag=),
proteinid, product, color, and region_plot. The sequence itself from CDS tags
can also be read using \code{read_sequence = TRUE}. In addition, extra tags can be
parsed with the argument \code{extra_fields}. If there is more than one field for
a given name, only the first one is parsed.

Tab files representing DNA segments should have at least the following
columns: name, start, end, and strand. If these column names are not all
present, or if there is no header at all, then these 4 columns are assumed
to be the first 4 columns of the file, in that order. If the tab file does
have headers, then any additional columns can be supplied as needed, like
line width and type, pch and/ or cex. See \link{dna_seg} for more information.
An example:

\tabular{lllll}{
name   \tab start \tab end   \tab strand \tab fill  \cr
feat1A \tab 2     \tab 1345  \tab 1      \tab blue  \cr
feat1B \tab 1399  \tab 2034  \tab 1      \tab red   \cr
feat1C \tab 2101  \tab 2932  \tab -1     \tab grey  \cr
feat1D \tab 2800  \tab 3120  \tab 1      \tab green \cr
}

FASTA files are parsed differently, depending on the first sequence header
(defline) found in the file. When parsing FASTA files from UniprotKB,
metadata is parsed fromthe deflines, creating extra columns in the resulting
\code{dna_seg} object, including locus_id, gene, and product. Alternatively,
positional information of features will be parsed when using FASTA files from
ensembl when they contain this information in their headers. In all other
cases, each entry in a FASTA file will result in a single feature, all
concatenated behind each other in the resulting \code{dna_seg}. Some support is
included for parsing metadata from FASTA files from NCBI.

Ptt (or protein table) files are a tabular format providing information on
each protein of a genome (or plasmid, or virus, etc).
}
\examples{
## Read DNA segment from tab
dna_seg3_file <- system.file('extdata/dna_seg3.tab', package = 'genoPlotR')
dna_seg3 <- read_dna_seg_from_tab(dna_seg3_file)

## From GenBank file
bq_genbank <- system.file('extdata/BG_plasmid.gbk', package = 'genoPlotR')
bq <- read_dna_seg_from_file(bq_genbank, fileType = "detect")

## Parsing extra fields in the GenBank file
bq <- read_dna_seg_from_file(bq_genbank,
                             extra_fields = c("db_xref", "transl_table"))
names(bq)

## From embl file
bq_embl <- system.file('extdata/BG_plasmid.embl', package = 'genoPlotR')
bq <- read_dna_seg_from_embl(bq_embl)

## From ptt files
bq_ptt <- system.file('extdata/BQ.ptt', package = 'genoPlotR')
bq <- read_dna_seg_from_ptt(bq_ptt)

}
\seealso{
\link{dna_seg}, \link{gene_types}
}
\author{
Lionel Guy, Jens Roat Kultima, Mike Puijk
}
