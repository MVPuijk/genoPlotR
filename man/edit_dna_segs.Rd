% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/edit_data.R
\name{edit_dna_segs}
\alias{edit_dna_segs}
\title{Edit dna_seg features}
\usage{
edit_dna_segs(
  dna_seg_input,
  ids,
  seg_labels = NULL,
  id_tags = c("name", "locus_id"),
  fixed = FALSE,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{dna_seg_input}{Either a single \code{dna_seg} or a list of \code{dna_seg}
objects.}

\item{ids}{Either a character string (specifying a file path), or a
data.frame object. Contains the information on how to edit the \code{dna_segs},
and must contain at least an \code{id} column. See details.}

\item{seg_labels}{Either \code{NULL} or a character vector of the same length
as \code{dna_seg_input}. If \code{ids} contains a \code{seg_label} column, then changes
will be made only in the \code{dna_segs} with the corresponding labels. These
labels will be determined both from the \code{seg_labels} argument, but also from
the \code{dna_segs} themselves. As such, \code{seg_labels} can be used to provide an
alternate set of names.}

\item{id_tags}{A character vector of \code{dna_seg} column names to match to the
\code{id} column from \code{ids}.}

\item{fixed}{Logical. If \code{TRUE}, values from the \code{id} column have to match
exactly to the values found in the \code{dna_segs}. If \code{FALSE}, \link{grep} is used
to search instead, allowing for regular expressions to be used.}

\item{verbose}{Logical. If \code{TRUE}, generates warnings when no \code{dna_seg} could
be found for the labels found in the \code{seg_label} column from \code{ids}.
Additionally, generates a warning when
the columns provided by \code{id_tags} could not be found in the \code{dna_segs}.}

\item{...}{Arguments to pass to \link{fread}, which is used when the \code{ids}
argument refers to a file.}
}
\value{
Either a single \code{dna_seg} object or a list of \code{dna_seg} objects,
matching the input given using \code{dna_seg_input}.
}
\description{
Edit the features from \code{dna_segs} by supplying a set of IDs, and a
set of new values for features that match these IDs.
}
\details{
If \code{ids} is a character string, it is assumed to be a file path, and the file
will be read using \link{fread}. If not, it has to be a \code{data.frame}
or \code{data.table} object, with a mandatory \code{id} column. It will then update
the \code{dna_segs} by querying each value (the IDs) from the \code{id}
column, updating each matching row. It will look for the IDs in the columns
provided by the \code{id_tags} argument. This can be constrained so that it only
looks in a specific \code{dna_seg} for each ID by including a \code{seg_label} column
in \code{ids}.

This function can be used to alter \code{dna_seg} attributes on mass, by providing
IDs that match to very general attributes, like their color or the presence
of a certain word in their functions. But, it can also be used to modify very
specific features by making use of attributes with locus tags or the like.
}
\examples{
## Prepare dna_seg
names1 <- c("1A", "1B", "1C")
names2 <- c("2A", "2C", "2B")
names3 <- c("3B", "3A", "3C")

## Make dna_segs
dna_seg1 <- dna_seg(data.frame(name = names1,
                               start = (1:3) * 3,
                               end = (1:3) * 3 + 2,
                               strand = rep(1, 3)))
dna_seg2 <- dna_seg(data.frame(name = names2,
                               start = (1:3) * 3,
                               end = (1:3) * 3 + 2,
                               strand = rep(1, 3)))
dna_seg3 <- dna_seg(data.frame(name = names3,
                               start = (1:3) * 3,
                               end = (1:3) * 3 + 2,
                               strand = rep(1, 3)))
dna_segs <- list("Genome 1" = dna_seg1,
                 "Genome 2" = dna_seg2,
                 "Genome 3" = dna_seg3)

## Colors before using edit_dna_segs
lapply(dna_segs, function(x) x[, .(name, fill)])

## Add colors based on exact feature names
id_fixed <- c("1A", "1B", "2A", "2B")
fill_fixed <- c("red", "blue", "red", "blue")
dna_segs1 <- edit_dna_segs(dna_seg_input = dna_segs,
                           ids = data.frame(id = id_fixed,
                                            fill = fill_fixed),
                           fixed = TRUE)
lapply(dna_segs1, function(x) x[, .(name, fill)])

## Add colors based on the presence of a string in the feature names
id_grep <- c("A", "B")
fill_grep <- c("red", "blue")
dna_segs2 <- edit_dna_segs(dna_seg_input = dna_segs,
                           ids = data.frame(id = id_grep, fill = fill_grep))
lapply(dna_segs2, function(x) x[, .(name, fill)])

## Use seg_labels to add colors only to specific dna_segs
id_labels <- c("Genome 1", "Genome 2")
dna_segs3 <- edit_dna_segs(dna_seg_input = dna_segs,
                           ids = data.frame(id = id_grep, fill = fill_grep))
lapply(dna_segs3, function(x) x[, .(name, fill)])

}
\seealso{
\link{dna_seg}
}
\author{
Mike Puijk
}
