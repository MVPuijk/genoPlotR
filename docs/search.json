[{"path":"https://mvpuijk.github.io/genoPlotR/articles/editing_data.html","id":"editing-data","dir":"Articles","previous_headings":"","what":"Editing data","title":"Editing dna_segs and comparisons","text":"added.","code":"library(genoPlotR)"},{"path":"https://mvpuijk.github.io/genoPlotR/articles/generating_comparisons.html","id":"generating-comparisons","dir":"Articles","previous_headings":"","what":"Generating comparisons","title":"Generating comparisons from within R","text":"added.","code":"library(genoPlotR)"},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started with genoPlotR","text":"genoPlotR package intended produce publication-grade graphics gene genome maps. amazing speed data production new DNA sequencing techniques increase number software available compare sequences, great need graphically represent sequences comparisons. number packages already exist (Artemis, ACT, mauve), none produce easily reproducible, publication-grade graphics. goal package fill gap. vignette provides introduction genoPlotR, providing user examples increasing complexity. meant comprehensive guide functions options package, rather first approach package. load library R session, type:","code":"library(genoPlotR)"},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"Getting started with genoPlotR","text":"Loading simplest dataset, applying color scheme limits plotting area, adding tree annotations. details plot, refer first examples shown . Now plotting three segments:","code":"data(three_genes) dna_segs <- three_genes$dna_segs comparisons <- three_genes$comparisons comparisons[[1]]$col <- apply_color_scheme(c(0.6, 0.4, 0.5), \"grey\") names <- c(\"Huey\", \"Dewey\", \"Louie\") names(dna_segs) <- names tree <- ade4::newick2phylog(\"(((Huey:4.2,Dewey:3.9):3.1,Louie:7.3):1);\") mid_pos <- middle(dna_segs[[1]]) xlims <- list(c(Inf, -Inf), c(-Inf, Inf), c(1850, 2800)) annot <- annotation(x1 = c(mid_pos[1], dna_segs[[1]]$end[2]),                     x2 = c(NA, dna_segs[[1]]$end[3]),                     text = c(dna_segs[[1]]$name[1], \"region1\"),                     rot = c(30, 0),                     col = c(\"blue\", \"black\")) plot_gene_map(dna_segs = dna_segs, comparisons = comparisons,               annotations = annot, annotation_height = 1.3,               tree = tree, tree_width = 2,               xlims = xlims,               main = \"Comparison of Huey, Dewey and Louie\")"},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"getting-help","dir":"Articles","previous_headings":"","what":"Getting help","title":"Getting started with genoPlotR","text":"lot examples help available main functions, .e.Â reading functions (various read_dna_seg_from* read_comparison_from* functions) main plotting function, plot_gene_map(). Additionally, web pages R-forge GitHub provide ways get touch genoPlotR community submit bugs feature requests.","code":"help(\"read_dna_seg\") help(\"read_comparison\") help(\"plot_gene_map\")"},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"objects-in-genoplotr","dir":"Articles","previous_headings":"","what":"Objects in genoPlotR","title":"Getting started with genoPlotR","text":"section give overview different types R objects genoPlotR.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"dna_seg","dir":"Articles","previous_headings":"Objects in genoPlotR","what":"dna_seg","title":"Getting started with genoPlotR","text":"dna_seg object collection genes elements along genome, represented map. dna_seg objects need 4 columns, name, start, end strand. Extra columns names col, fill, lty, lwd, pch, cex, gene_type, region_type used plotting process. extra columns kept object, used.","code":"names1 <- c(\"feat1\", \"feat2\", \"feat3\") starts1 <- c(2, 1000, 1050) ends1 <- c(600, 800, 1345) strands1 <- c(\"-\", -1, 1) cols1 <- c(\"blue\", \"grey\", \"red\") df1 <- data.frame(name = names1, start = starts1, end = ends1,                   strand = strands1, col = cols1)  dna_seg1 <- dna_seg(df1) str(dna_seg1) #> Classes 'dna_seg', 'data.table' and 'data.frame':    3 obs. of  12 variables: #>  $ name       : chr  \"feat1\" \"feat2\" \"feat3\" #>  $ start      : num  2 1000 1050 #>  $ end        : num  600 800 1345 #>  $ strand     : num  -1 -1 1 #>  $ col        : chr  \"blue\" \"grey\" \"red\" #>  $ gene_type  : chr  \"arrows\" \"arrows\" \"arrows\" #>  $ region_plot: chr  \"NA\" \"NA\" \"NA\" #>  $ fill       : chr  \"grey80\" \"grey80\" \"grey80\" #>  $ lty        : num  1 1 1 #>  $ lwd        : num  1 1 1 #>  $ pch        : num  8 8 8 #>  $ cex        : num  1 1 1 #>  - attr(*, \".internal.selfref\")=<externalptr>"},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"comparison","dir":"Articles","previous_headings":"Objects in genoPlotR","what":"comparison","title":"Getting started with genoPlotR","text":"comparison collection similarities, representing comparison two DNA segments. Objects (data.frame, data.table, list) least named elements start1, end1, start2 end2. addition, optional col column can added, give color comparison. Additional numeric columns can used automatic color-coding (via gradient_color_scheme()).","code":"starts1 <- c(2, 1000, 1050) ends1 <- c(600, 800, 1345) starts2 <- c(50, 800, 1200) ends2 <- c(900, 1100, 1322) comparison1 <- as.comparison(data.frame(start1 = starts1, end1 = ends1,                                         start2 = starts2, end2 = ends2)) str(comparison1) #> Classes 'comparison', 'data.table' and 'data.frame': 3 obs. of  5 variables: #>  $ start1   : num  2 1000 1050 #>  $ end1     : num  600 800 1345 #>  $ start2   : num  50 800 1200 #>  $ end2     : num  900 1100 1322 #>  $ direction: num  1 -1 1 #>  - attr(*, \".internal.selfref\")=<externalptr>"},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"annotation","dir":"Articles","previous_headings":"Objects in genoPlotR","what":"annotation","title":"Getting started with genoPlotR","text":"annotation object used annotate DNA segment. labels attached positions. label can attached single position range.","code":"mid_pos <- middle(dna_segs[[1]]) annot1 <- annotation(x1 = mid_pos, text = dna_segs[[1]]$name) str(annot1) #> Classes 'annotation', 'data.table' and 'data.frame': 3 obs. of  5 variables: #>  $ x1   : num  301 900 1198 #>  $ x2   : logi  NA NA NA #>  $ text : chr  \"feat1\" \"feat2\" \"feat3\" #>  $ color: chr  \"black\" \"black\" \"black\" #>  $ rot  : num  0 0 0 #>  - attr(*, \".internal.selfref\")=<externalptr>"},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"tree","dir":"Articles","previous_headings":"Objects in genoPlotR","what":"tree","title":"Getting started with genoPlotR","text":"tree description Newick format can parsed using ade4 package.","code":"tree <- ade4::newick2phylog(\"(((A_aaa:4.2,B_bbb:3.9):3.1,C_ccc:7.3):1);\") str(tree$leaves) #>  Named num [1:3] 4.2 3.9 7.3 #>  - attr(*, \"names\")= chr [1:3] \"A_aaa\" \"B_bbb\" \"C_ccc\""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"dna-segments","dir":"Articles","previous_headings":"Reading data","what":"DNA segments","title":"Getting started with genoPlotR","text":"Several formats can read genoPlotR produce dna_seg objects: GenBank files (read_dna_seg_from_genbank()) EMBL files (read_dna_seg_from_embl()) FASTA files (read_dna_seg_from_fasta()) PTT (protein table) files, tabular versions GenBank files (read_dna_seg_from_ptt()) User generated tabular files (read_dna_seg_from_tab()) function read_dna_seg_from_file() wrapper function, attempt guess correct format file. first three files common biological formats can downloaded major databases, NCBI ENA. definition EMBL GenBank files can found .","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"comparisons","dir":"Articles","previous_headings":"Reading data","what":"Comparisons","title":"Getting started with genoPlotR","text":"genoPlotR can read tabular files, either user-generated tab files (read_comparison_from_tab()), BLAST output (read_comparison_from_blast()). produce files readable genoPlotR, BLAST+ commands run using outfmt -6 outfmt -7 options.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"mauve-output","dir":"Articles","previous_headings":"Reading data","what":"Mauve output","title":"Getting started with genoPlotR","text":"backbone output Mauve genome aligner can parsed using read_mauve_backbone() (Tested Mauve 2.3.1). function return list consisting list dna_seg objects corresponding comparisons.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"plotting-data","dir":"Articles","previous_headings":"","what":"Plotting data","title":"Getting started with genoPlotR","text":"one plotting function genoPlotR, plot_gene_map(). Many arguments available, list important ones. Check documentation thorough description. dna_segs list DNA segment objects. comparisons list comparisons. contain one element less dna_segs. tree phylogenetic tree plotted left figure. annotations annotation object, list annotations. display annotations first, DNA segments, respectively. xlims list even-numbered numeric vectors, giving borders sub-segments plotted. vector c(1,5000,8000,6000) display two sub-segments (1 5000 6000 8000), second reverse orientation. main title plot. scale scale displayed bottom right plot? dna_seg_scale Allows control addition scales segments. simply TRUE, display scale segment. vector, scale displayed corresponding TRUE element. global_color_scheme Generate new set colors DNA segments / comparisons. plot_new Turn avoid creating new plot. Especially useful integrate genoPlotR plot larger figure.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"other-useful-functions","dir":"Articles","previous_headings":"","what":"Other useful functions","title":"Getting started with genoPlotR","text":"gradient_color_scheme() Makes set colors, either gray scale shades red blue, can applied comparisons.uniform_color_scheme() Applies color scheme dna_segs / comparisons.middle() Useful get middle gene, especially create annotations.auto_annotate() Automatically generates annotations dna_segs.edit_dna_segs() Uses data frame edit list dna_segs. data() Type data(package = \"genoPlotR\") get full list datasets.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Getting started with genoPlotR","text":"section gives step--step examples, gradual complexity. last one shows combine several plots annotate already generated plots. examples, first step load library.","code":"library(genoPlotR)"},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"example-1-a-very-simple-example","dir":"Articles","previous_headings":"Examples","what":"Example 1: A very simple example","title":"Getting started with genoPlotR","text":"data used example dataset included genoPlotR, sake demonstration, recreated scratch. retrieve dataset package, use data(three_genes).","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"data-generation-and-a-very-simple-plot","dir":"Articles","previous_headings":"Examples > Example 1: A very simple example","what":"Data generation and a very simple plot","title":"Getting started with genoPlotR","text":"First, three dna_segs generated, data frames columns name, start, end, strand col. , create two comparison objects data frames columns start1, end1, start2, end2 col. first comparison, starts ends correspond genes created . constitutes material required create basic plot.","code":"df1 <- data.frame(name = c(\"feat1\", \"feat2\", \"feat3\"),                   start = c(2, 1000, 1050),                   end = c(600, 800, 1345),                   strand = c(-1, -1, 1),                   col = c(\"blue\", \"grey\", \"red\")) dna_seg1 <- dna_seg(df1) df2 <- data.frame(name = c(\"feat1\", \"feat2\", \"feat3\"),                   start = c(50, 800, 1200),                   end = c(900, 1100, 1322),                   strand = c(-1, 1, 1),                   col = c(\"blue\", \"grey\", \"red\")) dna_seg2 <- dna_seg(df2) df3 <- data.frame(name = c(\"feat1\", \"feat2\", \"feat3\"),                   start = c(1899, 2108, 2803),                   end = c(2034, 2732, 3620),                   strand = c(-1, -1, 1),                   col = rep(\"blue\", 3)) dna_seg3 <- dna_seg(df3) dna_segs <- list(dna_seg1, dna_seg2, dna_seg3) df4 <- data.frame(start1 = dna_seg1$start,                   end1 = dna_seg1$end,                   start2 = dna_seg2$start,                   end2 = dna_seg2$end) comparison1 <- comparison(df4) df5 <- data.frame(start1 = c(50, 800),                   end1 = c(500, 1100),                   start2 = c(1899, 2732),                   end2 = c(2034, 2508),                   col = c(\"#67000D\", \"#08306B\")) comparison2 <- comparison(df5) comparisons <- list(comparison1, comparison2) plot_gene_map(dna_segs = dna_segs, comparisons = comparisons)"},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"a-more-elaborate-plot","dir":"Articles","previous_headings":"Examples > Example 1: A very simple example","what":"A more elaborate plot","title":"Getting started with genoPlotR","text":"Many options can added simple plot. start, first comparison colored grey scale, using arbitrary scale passed function gradient_color_scheme(). Second, names phylogenetic tree prepared. function newick2phylog() package ade4 used prepare object suitable genoPlotR. elements list dna_segs must named correspond labels tree object, avoid confusion. Third, annotations first segment added. first gene annotated middle (thus use middle() function), region comprising second third gene annotated square bracket. Note use numeric value x1 NA first gene, use two numeric values second region. Finally, plot drawn, adding title, allowing 2 inches tree width, changing annotation space 1.3 lines. different options can checked removing/adding different arguments plot_gene_map().  explore different options, new windows can opened using x11() window(), depending OS, saved files using example png() pdf(). finish plot, function dev.() called. plot can saved file first adding call one graphical device functions R (e.g.Â pdf(), png(), jpeg()), making call(s) plot_gene_map(), finally function dev.().","code":"comparisons[[1]]$col <- gradient_color_scheme(c(0.6, 0.4, 0.5), \"grey\") names <- c(\"Huey\", \"Dewey\", \"Louie\") names(dna_segs) <- names tree_HDL <- ade4::newick2phylog(\"(((Huey:4.2,Dewey:3.9):3.1,Louie:7.3):1);\") mid_pos <- middle(dna_segs[[1]]) annot <- annotation(x1 = c(mid_pos[1], dna_segs[[1]]$end[2]),                     x2 = c(NA, dna_segs[[1]]$end[3]),                     text = c(dna_segs[[1]]$name[1], \"region1\"),                     rot = c(30, 0),                     col = c(\"grey\", \"black\")) plot_gene_map(dna_segs = dna_segs, comparisons = comparisons,               annotations = annot, annotation_height = 1.3,               tree = tree_HDL, tree_width = 2,               main = \"Comparison of Huey, Dewey and Louie\")"},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"example-2-generating-data-online","dir":"Articles","previous_headings":"Examples","what":"Example 2: Generating data online","title":"Getting started with genoPlotR","text":"section give example data can retrieved generated online, using resources available NCBI. example devised 5/3/2010, given relatively rapid rate changes public databases, possible part example becomes obsolete. Please contact author document (lionel.guy@ebc.uu.se) case. example, genomes Bartonella henselae (RefSeq accession NC_005956) Bartonella quintana (RefSeq accession NC_005955) compared.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"retrieving-dna_seg-data","dir":"Articles","previous_headings":"Examples > Example 2: Generating data online","what":"Retrieving dna_seg data","title":"Getting started with genoPlotR","text":"retrieve GenBank files, NCBI Nucleotide Database can directly queried, provided accession number known. case, database can accessed home page NCBI, entering accession number (e.g.Â NC_005956) search field selecting âNucleotideâ database. GenBank file displayed. can saved suitable format clicking âSend :â, selecting âComplete Recordâ âFileâ, selecting âGenBank (full)â format. accession number unknown, NCBI genome database can queried name organism. list assemblies, GenBank format file can downloaded selecting âDownloadâ âActionâ column, selecting âSequence annotation (GBFF)â file type. NC_005956 NC_005955.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"performing-web-based-blast-and-retrieving-result","dir":"Articles","previous_headings":"Examples > Example 2: Generating data online","what":"Performing web-based BLAST and retrieving result","title":"Getting started with genoPlotR","text":"two previously retrieved genomes can compared BLAST, can done locally online. online version BLAST can found NCBI website . , genomes can aligned entering NC_005956 query sequence, selecting âAlign two sequencesâ, entering NC_005955 subject sequence. arguments BLAST can modified suit needs comparison. BLAST search run, hit table (can read genoPlotR) can downloaded clicking âDownloadâ âHit Table(text)â result page. BLAST+ installed locally findable R, can within R. function comparisons_from_dna_segs() makes list comparisons running BLAST first, making FASTA files GenBank files necessary. Alternatively, DIAMOND can chosen well using argument tool = \"diamond\".","code":"BH_vs_BQ <-  comparisons_from_dna_segs(files = c(\"NC_005956.gb\", \"NC_005955.gb\"),                                        tool = \"blast\", algorithm = \"blastn\")"},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"plotting","dir":"Articles","previous_headings":"Examples > Example 2: Generating data online","what":"Plotting","title":"Getting started with genoPlotR","text":"Provided GenBank files comparison saved correct names directory R started, can parsed directly genoPlotR. Alternatively, data(barto) contains dna_segs made two genomes, well comparison made BLAST results. data can now plotted, using xlims argument plot first 50,000 base pairs.","code":"BH <- read_dna_seg_from_file(\"NC_005956.gb\") BQ <- read_dna_seg_from_file(\"NC_005955.gb\") BH_vs_BQ <- read_comparison_from_blast(\"NC_005956_NC_005955\") data(barto) BH <- barto$dna_segs[[3]] BQ <- barto$dna_segs[[4]] BH_vs_BQ <- barto$comparisons[[3]] xlims <- list(c(1,50000), c(1,50000)) plot_gene_map(dna_segs = list(BH, BQ),               comparisons = list(BH_vs_BQ),               dna_seg_labels = c(\"BH\", \"BQ\"),               xlims = xlims,               main = \"BH vs BQ, comparison of the first 50 kb\",               gene_type = \"side_blocks\",               alpha_comparisons = 0.5,               global_color_scheme = \"gradient\",               dna_seg_scale = TRUE, scale = FALSE)"},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"example-3-mauve-alignment-of-four-bartonella-genomes","dir":"Articles","previous_headings":"Examples","what":"Example 3: Mauve alignment of four Bartonella genomes","title":"Getting started with genoPlotR","text":"genoPlotR able parse backbone file produced Mauve (details format, see https://darlinglab.org/mauve/user-guide/files.html). elements DNA segments longer genes, Mauve blocks. Similarly, comparison reflects correspondences blocks. strand indicates orientation block respect reference, default first genome comparison. single list returned, contains two lists, one containing dna_segs one comparisons. genomes backbone file named, advised cautious order names given. example, 4 genomes Bartonella compared Mauve 2.3.1. smaller blocks (smaller 10 kb) filtered , second genome (largest) taken reference. dataset can also accessed package running data(mauve_bbone). lengths comparisons can calculated adding length sides comparisons. adding global_color_scheme = \"gradient\" color_scheme_column = \"length\" Now plotting, using global_color_scheme() color segments according lengths. can color comparisons based calculated lengths using global_color_scheme color_scheme_column arguments.","code":"bbone_file <- system.file('extdata/barto.backbone', package = 'genoPlotR') bbone <- read_mauve_backbone(bbone_file, ref = 2, filter_low = 10000) names <- c(\"B_bacilliformis\", \"B_grahamii\", \"B_henselae\", \"B_quintana\") names(bbone$dna_segs) <- names for (i in 1:length(bbone$comparisons)) {   cmp <- bbone$comparisons[[i]]   bbone$comparisons[[i]]$length <-      abs(cmp$end1 - cmp$start1) + abs(cmp$end2 - cmp$start2) } plot_gene_map(dna_segs = bbone$dna_segs,                comparisons = bbone$comparisons,               global_color_scheme = c(\"length\", \"increasing\", \"red_blue\", 0.7),               override_color_schemes = TRUE)"},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"example-4-several-sub-segments-of-four-bartonella-genomes","dir":"Articles","previous_headings":"Examples","what":"Example 4: Several sub-segments of four Bartonella genomes","title":"Getting started with genoPlotR","text":"examples presents use xlims argument represent several sub-segments segment, show reverse orientation. data used also comparison four Bartonella genomes (see ), comparison performed using BLAST. dataset available package (data(barto)). First, data loaded tree created. xlims argument created. list many elements dna_segs. element even-numbered numeric vector, containing left right border sub-segment, consecutively. first DNA segment, two sub-segments shown: 1,415,000 1,445,000 reverse orientation, 1,380,000 1,412,000, ânormalâ orientation. remaining DNA segments, 3, 3, 1 subsegments shown, respectively, normal orientation. complete example, annotations added. Genes gene name (.e.Â name locus synonym name) used annotate segment. every fourth gene annotated, avoid overlapping tags. function middle() used retrieve middle element DNA segments. Finally, plot result, using scales DNA segment, adding title, limiting plotting area longest segment, allow better placement sub-segments.","code":"data(barto) tree_barto <- ade4::newick2phylog(\"(BB:2.5,(BG:1.8,(BH:1,BQ:0.8):1.9):3);\") xlims <- list(c(1445000, 1415000, 1380000, 1412000),               c(  10000,   45000,   50000,   83000, 90000, 120000),               c(  15000,   36000,   90000,  120000, 74000,  98000),               c(   5000,   82000)) annots <- lapply(barto$dna_segs, function(x) {   mid <- middle(x)   annot <- annotation(x1 = mid, text = x$name, rot = 30)   idx <- grep(\"^[^B]\", annot$text, perl = TRUE)   annot[idx[idx %% 4 == 0], ]  }) plot_gene_map(barto$dna_segs, barto$comparisons, tree = tree_barto,               annotations = annots,               xlims = xlims,               limit_to_longest_dna_seg = FALSE,               dna_seg_scale = TRUE, scale = FALSE,               main = \"Comparison of homologous segments in 4 Bartonella genomes\")"},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"example-5-two-segments-of-the-y-chromsome-in-human-and-chimp","dir":"Articles","previous_headings":"Examples","what":"Example 5: Two segments of the Y chromsome in human and chimp","title":"Getting started with genoPlotR","text":"example, ability plot introns exons demonstrated. First, data loaded. dataset included package used, GenBank file containing introns exons can used. annotations added: segment, range gene calculated, corresponding annotations created. segments can directly plotted, passing annotations list.","code":"data(chrY_subseg) genes_homo <- unique(chrY_subseg$dna_segs[[1]]$gene) x_homo <- sapply(genes_homo, function(x)                  range(chrY_subseg$dna_segs[[1]]                        [chrY_subseg$dna_segs[[1]]$gene == x,])                  ) annot_homo <- annotation(x1 = x_homo[1,], x2 = x_homo[2,],                          text = dimnames(x_homo)[[2]]) genes_pan <- unique(chrY_subseg$dna_segs[[2]]$gene) x_pan <- sapply(genes_pan, function(x)                 range(chrY_subseg$dna_segs[[2]]                       [chrY_subseg$dna_segs[[2]]$gene == x,])                  ) annot_pan <- annotation(x1 = x_pan[1,], x2 = x_pan[2,],                         text = dimnames(x_pan)[[2]]) main <- \"Comparison of two subsegments in H. sapiens and P. troglodytes\" plot_gene_map(chrY_subseg$dna_segs, chrY_subseg$comparison,               annotations = list(annot_homo, annot_pan),               dna_seg_scale = TRUE,               main = main,               scale = FALSE)"},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"example-6-combining-several-genoplotr-figures-and-annotating-the-figure","dir":"Articles","previous_headings":"Examples","what":"Example 6: Combining several genoPlotR figures and annotating the figure","title":"Getting started with genoPlotR","text":"example, previous plots combined single, multi-panel figure. Using tools present grid package, plot annotated . information available documentation grid package. example uses R objects built previous examples, thus run first. First, viewport contain plots pushed new page. plot divided three rows, relative heights 1, 1.3 0.8. three panels C, containing result examples 4 6 pushed viewports, calling upViewport() plot come back main viewport. last plot, upViewport(0) called go 2 viewports, coming back root viewport. time, argument plot_new = FALSE used, avoid plotting new page every single panel.  functions current.vpTree() grid.ls() can used see current viewport structure, see object names. Despite complexity viewport structure, possible identify previously defined panel , B C. Using downViewport() function, possible find modify elements plots. First, labels panel modified names italics replace underscores dot space. second label also removed. Note use grid.edit() grid.remove(). Second, red rectangle placed around one subsegment panel B. plot shown 2 edits.","code":"pushViewport(viewport(   layout = grid.layout(3, 1,                      heights = unit(c(1,1.3,0.8), rep(\"null\", 3))),   name = \"overall_vp\")) ## Panel A pushViewport(viewport(layout.pos.row = 1, name = \"panelA\")) plot_gene_map(dna_segs = bbone$dna_segs,               comparisons = bbone$comparisons,               dna_seg_scale = c(FALSE, FALSE, FALSE, TRUE),               scale = FALSE,               main = \"A\", main_pos = \"left\",               plot_new = FALSE) upViewport() ## Panel B pushViewport(viewport(layout.pos.row = 2, name = \"panelB\")) plot_gene_map(barto$dna_segs, barto$comparisons,                annotations = annots,               tree = tree_barto,               xlims = xlims,               limit_to_longest_dna_seg = FALSE,               scale = FALSE,               dna_seg_scale = TRUE,               main = \"B\", main_pos = \"left\",               annotation_height = 0.6, annotation_cex = 0.5,                plot_new = FALSE) upViewport() ## Panel C pushViewport(viewport(layout.pos.row = 3, name = \"panelC\")) plot_gene_map(chrY_subseg$dna_segs, chrY_subseg$comparison,               annotations = list(annot_homo, annot_pan),               dna_seg_scale = TRUE, scale = FALSE,               main = \"C\", main_pos = \"left\",               plot_new = FALSE) upViewport(0) grid_list <- grid.ls(grob = TRUE, viewports = TRUE, print = FALSE) str(grid_list) current.vpTree() #> List of 6 #>  $ name   : chr [1:1334] \"ROOT\" \"overall_vp\" \"panelA\" \"oma\" ... #>  $ gDepth : num [1:1334] 0 0 0 0 0 0 0 0 0 0 ... #>  $ vpDepth: num [1:1334] 0 1 2 3 4 5 6 6 5 6 ... #>  $ gPath  : chr [1:1334] \"\" \"\" \"\" \"\" ... #>  $ vpPath : chr [1:1334] \"\" \"ROOT\" \"ROOT::overall_vp\" \"ROOT::overall_vp::panelA\" ... #>  $ type   : chr [1:1334] \"vpListing\" \"vpListing\" \"vpListing\" \"vpListing\" ... #>  - attr(*, \"class\")= chr \"flatGridListing\" #> viewport[ROOT]->(viewport[overall_vp]->(viewport[panelA]->(viewport[oma]->(viewport[oma_layout]->(viewport[main], viewport[frame]->(viewport[tree_outer]->(viewport[tree]->(viewport[labels])), viewport[plotarea_outer]->(viewport[plotarea]->(viewport[map]->(viewport[comparison.1], viewport[comparison.2], viewport[comparison.3], viewport[seg_plot.1], viewport[seg_plot.2], viewport[seg_plot.3], viewport[seg_plot.4], viewport[scale_and_dna_seg.1]->(viewport[dna_seg.1.1]), viewport[scale_and_dna_seg.2]->(viewport[dna_seg.2.1]), viewport[scale_and_dna_seg.3]->(viewport[dna_seg.3.1]), viewport[scale_and_dna_seg.4]->(viewport[dna_seg_scale.4.1], viewport[dna_seg.4.1])))))))), viewport[panelB]->(viewport[oma]->(viewport[oma_layout]->(viewport[main], viewport[frame]->(viewport[tree_outer]->(viewport[tree]->(viewport[treeFrame]->(viewport[GRID.VP.13]->(viewport[GRID.VP.14]->(viewport[tree.branches]), viewport[GRID.VP.15]->(viewport[tree.labels]))))), viewport[plotarea_outer]->(viewport[plotarea]->(viewport[map]->(viewport[comparison.1], viewport[comparison.2], viewport[comparison.3], viewport[seg_plot.1], viewport[seg_plot.2], viewport[seg_plot.3], viewport[seg_plot.4], viewport[scale_and_dna_seg.1]->(viewport[dna_seg_scale.1.1], viewport[dna_seg_scale.1.2], viewport[dna_seg.1.1], viewport[annotation.1.1], viewport[gap.1.2], viewport[dna_seg.1.2], viewport[annotation.1.2]), viewport[scale_and_dna_seg.2]->(viewport[gap.2.2], viewport[gap.2.3], viewport[dna_seg_scale.2.1], viewport[dna_seg_scale.2.2], viewport[dna_seg_scale.2.3], viewport[dna_seg.2.1], viewport[dna_seg.2.2], viewport[dna_seg.2.3], viewport[annotation.2.1], viewport[annotation.2.2], viewport[annotation.2.3]), viewport[scale_and_dna_seg.3]->(viewport[gap.3.2], viewport[gap.3.3], viewport[dna_seg_scale.3.1], viewport[dna_seg_scale.3.2], viewport[dna_seg_scale.3.3], viewport[dna_seg.3.1], viewport[annotation.3.1], viewport[dna_seg.3.2], viewport[annotation.3.2], viewport[dna_seg.3.3], viewport[annotation.3.3]), viewport[scale_and_dna_seg.4]->(viewport[annotation.4.1], viewport[dna_seg_scale.4.1], viewport[dna_seg.4.1])))))))), viewport[panelC]->(viewport[oma]->(viewport[oma_layout]->(viewport[main], viewport[frame]->(viewport[plotarea_outer]->(viewport[plotarea]->(viewport[map]->(viewport[comparison.1], viewport[seg_plot.1], viewport[seg_plot.2], viewport[scale_and_dna_seg.1]->(viewport[dna_seg_scale.1.1], viewport[dna_seg.1.1], viewport[annotation.1.1]), viewport[scale_and_dna_seg.2]->(viewport[dna_seg_scale.2.1], viewport[dna_seg.2.1], viewport[annotation.2.1])))))))))) downViewport(\"panelA\") for (i in 1:length(names)) {   new_label <- sub(\"_\", \". \", names[[i]])   grid.edit(paste(\"label\", i, sep = \".\"),             label = new_label,              gp = gpar(fontface = \"italic\"),             redraw = FALSE) } grid.remove(\"label.2\") upViewport(0) downViewport(\"panelB\") downViewport(\"dna_seg.3.2\") grid.rect(height = unit(2.2, \"npc\"), gp = gpar(col = \"red\", lwd = 2, fill = 0)) upViewport(0)"},{"path":"https://mvpuijk.github.io/genoPlotR/articles/genoPlotR.html","id":"example-7-using-user-defined-gene_type-and-seg_plot","dir":"Articles","previous_headings":"Examples","what":"Example 7: Using user-defined gene_type and seg_plot","title":"Getting started with genoPlotR","text":"example, use personalized gene_types seg_plots show data next DNA segments demonstrated. data example 4 used. graphical function defined, represent triangles instead arrows genes. triangles oriented function strand transparency set differently according length cut-, passed function. required, function two arguments, gene row dna_seg, dots (...). extra argument passed plot_gene_map() passed turn gene_type-defining function. make use , gene_type column dna_segs must replaced. make use supplementary argument line_col, column added dna_seg object. Finally, plot result.  Now, letâs plot random data along DNA segment. standard grid function returning grob used, possible use personalized functions, long return grob gList objects. example, function starGrob() defined previous exercise modified used . seg_plot objects first defined, following structure: seg_plot element func argument, giving function use plot data, grid function linesGrob(). arguments passed function contained args argument, list. Notice use gp = gpar(...). result can plotted, modulated using arguments seg_plot_height, seg_plot_height_unit, seg_plot_yaxis, seg_plot_yaxis_cex.","code":"starGrob <- function(gene, ...) {   ## Coordinates for the star   x <- sin(((0:5) / 2.5) * pi) * (gene$end - gene$start) / 2 + (gene$end + gene$start) / 2   y <- cos(((0:5) / 2.5) * pi) * gene$strand * 0.5 + 0.5   idx <- c(1, 3, 5, 2, 4, 1)   ## Attribute line_col only if present in the gene   line_col <- if (!is.null(gene$line_col)) gene$line_col else gene$col   ## Having a conditional transparency, depending on a length cut-off   ## passed via dots   length_cutoff <- list(...)$length_cutoff   if (!is.null(length_cutoff)) {     alpha <- if ((gene$end-gene$start) < length_cutoff) 0.3 else 0.8   } else {     alpha <- 1   }      ## Grobs   g <- polygonGrob(x[idx], y[idx],                    gp = gpar(fill = gene$col, col = line_col,                              lty = gene$lty, lwd = gene$lwd, alpha = alpha),                    default.units = \"native\")   t <- textGrob(label = \"***\",                 x = (gene$end+gene$start) / 2,                 y = 0.5,                 default.units = \"native\")   gList(g, t) } barto$dna_segs[[2]]$gene_type <- \"starGrob\" barto$dna_segs[[4]]$gene_type <- \"starGrob\" line_col <- rep(1:20, (nrow(barto$dna_segs[[3]]) %% 20) + 1) barto$dna_segs[[2]]$line_col <- line_col[1:nrow(barto$dna_segs[[2]])] plot_gene_map(barto$dna_segs, barto$comparisons,               tree = tree_barto,               annotations = annots,               xlims = xlims,                dna_seg_scale = TRUE,               length_cutoff = 600,               annotation_height = 0.3) seg_plots <- lapply(barto$dna_segs, function(ds) {   x <- seq(1, range(ds)[2], by = 1000)   y <- jitter(seq(100, 300, length = length(x)), amount = 50)   seg_plot(func = linesGrob, args = list(x = x, y = y,                                          gp = gpar(col = grey(0.3), lty = 2))) }) str(seg_plots[[1]]) #> List of 5 #>  $ func :function (x = unit(c(0, 1), \"npc\"), y = unit(c(0, 1), \"npc\"), default.units = \"npc\",  #>     arrow = NULL, name = NULL, gp = gpar(), vp = NULL)   #>  $ args :List of 4 #>   ..$ x            : num [1:1445] 1 1001 2001 3001 4001 ... #>   ..$ y            : num [1:1445] 58.1 133.6 110.4 66.1 51.3 ... #>   ..$ gp           :List of 2 #>   .. ..$ col: chr \"#4D4D4D\" #>   .. ..$ lty: num 2 #>   .. ..- attr(*, \"class\")= chr \"gpar\" #>   ..$ default.units: chr \"native\" #>  $ xargs: chr [1:5] \"x\" \"x0\" \"x1\" \"x2\" ... #>  $ yargs: chr [1:5] \"y\" \"y0\" \"y1\" \"y2\" ... #>  $ ylim : NULL #>  - attr(*, \"class\")= chr [1:2] \"seg_plot\" \"list\" plot_gene_map(barto$dna_segs, barto$comparisons, tree = tree_barto,               annotations = annots,               xlims = xlims,               seg_plots = seg_plots,               seg_plot_height = 0.5,               seg_plot_height_unit = \"null\",               seg_plot_yaxis = 2,               seg_plot_yaxis_cex = 0.7)"},{"path":"https://mvpuijk.github.io/genoPlotR/articles/wrapper_script.html","id":"run_genoplotr-r","dir":"Articles","previous_headings":"","what":"run_genoPlotR.R","title":"Running genoPlotR from a command-line interface","text":"R script run_genoPlotR.R wrapper script can generate gene maps single command. run_genoPlotR.R created majority features genoPlotR accessible directly command-line interface. , many customization options available. minimum, R genoPlotR package must installed run run_genoPlotR.R. features run_genoPlotR.R require command-line versions BLAST DIAMOND installed well.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/articles/wrapper_script.html","id":"basic-usage","dir":"Articles","previous_headings":"run_genoPlotR.R","what":"Basic usage","title":"Running genoPlotR from a command-line interface","text":"prominent use-case run_genoPlotR.R create regional plots multiple genomes time. usually involves parsing set GenBank files using BLAST create comparisons resulting DNA segments. example command shown : GenBank files provided --seg_files option, supports usage wildcards (*) select multiple files . case, files GenBank folder selected. folder specified --comp_path holds files used create comparisons DNA segments. --comp_format option tells run_genoPlotR.R format use comparisons. DIAMOND BLAST program selected, like blastp , run_genoPlotR.R run program generate necessary files, unless files already exist provided location. --ids option often essential want make regional plot. specifies IDs file, can used select features plot. IDs file table IDs correspond features plot form tab-delimited file. example contents IDs file: fill column changes color selected features, adding value true region_plot column marks feature plotted. principle, column can included IDs file. columns respective values added dna_segs, overwriting existing data columns already present. However, id seg_label columns special meanings treated differently: id mandatory column. match values found column dna_segs, default look name locus_id columns (can changed --id_tags option). IDs match exactly. Internally, grep() used, wildcards (*) regular expressions work well. seg_label column allows specify single DNA segment name. , can edit features single dna_seg, even ID question can found multiple dna_segs. row left empty, column omitted entirely, dna_segs queried ID.","code":"Rscript run_genoPlotR.R \\ --seg_files \"path/to/dataset/GenBank/*\" \\ --comp_path \"path/to/dataset/output/comps\" \\ --comp_format blastp \\ --ids \"path/to/dataset/ids.tab\" \\ --out \"path/to/dataset/output/genemap.pdf\""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/articles/wrapper_script.html","id":"dna-segments","dir":"Articles","previous_headings":"run_genoPlotR.R > Options","what":"DNA segments","title":"Running genoPlotR from a command-line interface","text":"tab-delimited file IDs corresponding features plotted. header least contain id column, can include column names add dna_seg objects. IDs can refer values dna_seg column, specified --id_tags option. IMPORTANT: --comp_format blastp algorithm DIAMOND, region_plot column carried next dna_seg object, features linked comparisons. Notable columns include: id: identifying feature ID seg_label: name dna_seg object query fill: Anything identifiable color R (e.g.Â red, blue4, salmon, #88CCEE) region_plot: value plot, true, yes, y, genome neighbourhood feature plotted. format use reading comparison files. necessary files found --comp_path, BLAST DIAMOND can chosen create . Must one : diamond, blast, tab, orthofinder, orthomcl,mmseqs2, one supported blast         programs (blastp,blastp-fast,blastp-short,blastn,blastn-short,megablast,dc-megablast`). diamond: tab-separated DIAMOND result file (--outfmt 6) blast: tab-separated BLAST result file (-outfmt 6) tab: custom tab-delimited file following structure: \"start1 end1 start2 end2 col gene1 gene2\" orthofinder: OrthoFinder format file containing orthogroups provided dna_segs orthomcl: file containing orthogroups orthomcl format mmseqs2: file containing clusters genes âCluster TSV formatâ mmseqs2, cluster output DIAMOND Predefined positions plot dna_seg (subsegment). --xlims_from_file given, option ignored. dna_segs must separated commas, plotting order, subsegments separated spaces (format --print_xlims). e.g.: Path tab-separated file predefined positions plot dna_seg (subsegment) format --xlims_out. One line per subsegment, plotting order, positions dna_seg label. e.g.: list predefined offset values dna_seg subsegment. --offsets_from_file given, option ignored. dna_seg 1 value must provided, many values subsegments dna_seg. dna_segs must separated commas, plotting order, subsegments separated spaces. e.g.: Path file predefined offset values dna_seg subsegment. One line per dna_seg, plotting order, subsegments separated spaces, e.g.:","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/articles/wrapper_script.html","id":"using-blast-to-create-comparisons-on-the-fly","dir":"Articles","previous_headings":"run_genoPlotR.R > Examples","what":"Using BLAST to create comparisons on the fly","title":"Running genoPlotR from a command-line interface","text":"example, downloaded GenBank (full) files recent versions four genomes used dataset found data(\"barto\") NCBI: Bartonella bacilliformis KC583 (NC_008783.1) Bartonella grahamii as4aup (NC_012846.1) Bartonella henselae str. Houston-1 (NC_005956.1) Bartonella quintana str. Toulouse (NC_005955.1) Letâs say interested addB argB genes. genoPlotR use gene names name column present GenBank file, can use gene names IDs barto_ids.tab IDs file: Using file input, can create basic gene map like : use blastp create comparisons store resulting files vignette_barto/comps. make another gene map input genomes, need run BLAST second time, even look different region genomes.","code":"Rscript run_genoPlotR.R \\ --seg_files \"vignette_barto/GenBank/*\" \\ --comp_path \"vignette_barto/comps\" \\ --comp_format blastp \\ --ids \"vignette_barto/barto_ids.tab\" \\ --out \"vignette_barto/ex1_1.pdf\" --width 9"},{"path":"https://mvpuijk.github.io/genoPlotR/articles/wrapper_script.html","id":"customization","dir":"Articles","previous_headings":"run_genoPlotR.R > Examples","what":"Customization","title":"Running genoPlotR from a command-line interface","text":"comparisons bit difficult track figure fairly bare-bones general. , letâs run , visual customization options added : Instead showing BLAST results, can filter using --comp_mode. option can filter BLAST results taking best hit per query (besthit), bidirectional best hits (bidirectional). Picking bidirectional double amount BLAST results generated, best hits BLAST results 1 direction now match direction. Adding --annotations automatically add annotations, displaying gene names, locus tags available. --alpha_comparisons 0.5 option adds transparency comparisons. easier parse visually. --global_color_scheme sequential option transfers colors added earlier comparisons connected . results following figure:  Note also added --print_xlims. printed xlims, start end coordinates subsegment DNA segment. examples , DNA segment 2 subsegments, 4 coordinates per DNA segment, DNA segments separated commas. chose print xlims, can now manipulate . example, can enter coordinates reverse order B_bacciliformis, inverting entire DNA segment. , can use --xlims_in option, allows us manually enter coordinates format output --print_xlims:  Selecting uniform --global_color_scheme option instead sequential automatically assigns colors based data available. example, uses gene names. Hypothetical proteins given single, separate color instead. results following plot:  --legend_column option generate legend based values found dna_seg column choice. Alternatively, can set auto. --global_color_scheme uniform used, legend automatically based column used generate color scheme. cases, picking auto defaults gene column, name column gene column present. , adding --legend_column auto previous plot get :","code":"Rscript run_genoPlotR.R \\ --seg_files \"vignette_barto/GenBank/*\" \\ --comp_path \"vignette_barto/comps\" \\ --comp_format blastp \\ --ids \"vignette_barto/barto_ids.tab\" \\ --out \"vignette_barto/ex1_2.pdf\" \\ --width 9 \\ --annotations \\ --alpha_comparisons 0.5 \\ --global_color_scheme sequential \\ --print_xlims 1368895 1389810 1412813 1435966,16890 40019 79755 100670,21410 44542 84165 105080,19042 42171 74542 95457 Rscript run_genoPlotR.R \\ --seg_files \"vignette_barto/GenBank/*\" \\ --comp_path \"vignette_barto/comps\" \\ --comp_format blastp \\ --ids \"vignette_barto/barto_ids.tab\" \\ --out \"vignette_barto/ex1_3.pdf\" \\ --width 9 \\ --annotations \\ --alpha_comparisons 0.5 \\ --global_color_scheme sequential \\ --xlims_in \"1435966 1412813 1389810 1368895,16890 40019 79755 100670,21410 44542 84165 105080,19042 42171 74542 95457\""},{"path":"https://mvpuijk.github.io/genoPlotR/articles/wrapper_script.html","id":"visualing-cluster-results","dir":"Articles","previous_headings":"run_genoPlotR.R > Examples","what":"Visualing cluster results","title":"Running genoPlotR from a command-line interface","text":"addition sequence alignments BLAST DIAMOND, run_genoPlotR.R also supports use sequence clustering tools create comparisons DNA segments. Support included output formats used OrthoMCL, Orthofinder, mmseqs2. method requires bit preparation, results must created beforehand. However, offer certain advantages well. example, can use DIAMOND cluster sequences. requires FASTA files input DNA segments. previous examples, BLAST used create comparisons, also generates necessary FASTA files. genoPlotR includes genbank_to_fasta() dna_seg_to_fasta() functions create FASTA files directly GenBank files dna_seg objects, respectively. Assuming FASTA files made, use command like concatenate : resulting file can used DIAMOND: can now use input run_genoPlotR.R selecting file --comp_path setting --comp_format mmseqs2. IMPORTANT: Entering --comp_format diamond result using DIAMOND pairwise sequence alignments, clustering. clustering results DIAMOND format produced mmseqs2, select option instead. One advantages using clustering order DNA segments can freely changed, comparisons longer created pairwise sequence alignments. Another advantage dna_seg features cluster automatically given colors uniform color scheme chosen. example, comparisons made bidirectional best hits BLAST, clustering results often reliable.","code":"cat vignette_barto/fasta/*.fa > vignette_barto/concat.fa diamond cluster -d \"vignette_barto/concat.fa\" -o \"vignette_barto/clusters.tab\" Rscript run_genoPlotR.R \\ --seg_files \"vignette_barto/GenBank/*\" \\ --comp_path \"vignette_barto/clusters.tab\" \\ --comp_format mmseqs2 \\ --ids \"vignette_barto/barto_ids.tab\" \\ --out \"vignette_barto/ex1_5.pdf\" \\ --width 9 \\ --annotations \\ --alpha_comparisons 0.5 \\ --global_color_scheme uniform \\ --xlims_in \"1435966 1412813 1389810 1368895,16890 40019 79755 100670,21410 44542 84165 105080,19042 42171 74542 95457\""},{"path":"https://mvpuijk.github.io/genoPlotR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mike Puijk. Maintainer.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Guy L, Puijk M (2025). genoPlotR: Plot Publication-Grade Gene Genome Maps. R package version 2.0.0, https://mvpuijk.github.io/genoPlotR/.","code":"@Manual{,   title = {genoPlotR: Plot Publication-Grade Gene and Genome Maps},   author = {Lionel Guy and Mike Puijk},   year = {2025},   note = {R package version 2.0.0},   url = {https://mvpuijk.github.io/genoPlotR/}, }"},{"path":"https://mvpuijk.github.io/genoPlotR/index.html","id":"genoplotr","dir":"","previous_headings":"","what":"Plot Publication-Grade Gene and Genome Maps","title":"Plot Publication-Grade Gene and Genome Maps","text":"genoPlotR R package made generating reproducible, publication-grade graphics gene genome maps. allows user read various formats GenBank BLAST results, well home-made tabular files.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Plot Publication-Grade Gene and Genome Maps","text":"install latest stable version genoPlotR: install latest development version genoPlotR GitHub, devtools package installed first. devtools already installed, genoPlotR can installed follows:","code":"install.packages(\"genoPlotR\") install.packages(\"devtools\") devtools::install_github(\"MVPuijk/genoPlotR\")"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"annotation class and methods â annotation","title":"annotation class and methods â annotation","text":"annotation objects used describe dna_seg objects. consists labels attached single position range.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"annotation class and methods â annotation","text":"","code":"annotation(x1, x2 = NA, text, rot = 0, col = \"black\")  as.annotation(df, x2 = NA, rot = 0, col = \"black\")  is.annotation(annotation)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"annotation class and methods â annotation","text":"x1 numeric vector giving first position label. x2 numeric vector length x1 NA, providing optional secondary position label. text character vector length x1, providing text labels. rot numeric vector length x1, providing rotation labels degrees. col character vector length x1, providing color labels. df data.frame convert annotation object. Must least columns x1 text. annotation object test.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/annotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"annotation class and methods â annotation","text":".annotation annotation return annotation object. .annotation returns logical.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/annotation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"annotation class and methods â annotation","text":"annotation object data.table columns x1, x2, text, col, rot. provide first () position, optional second position, text, color, rotation annotation, respectively. plotted using plot_gene_map, add annotation row top corresponding DNA segment. given row annotation object, x2 NA, label attached position given x1. x2 number instead, range plotted two values label attached middle range. .annotation returns TRUE object tested annotation object.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/annotation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"annotation class and methods â annotation","text":"Lionel Guy","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/annotation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"annotation class and methods â annotation","text":"","code":"## Loading data data(three_genes) dna_segs <- three_genes$dna_segs comparisons <- three_genes$comparisons  ## Calculating middle positions mid_pos <- middle(dna_segs[[1]])  ## Create first annotation annot1 <- annotation(x1 = mid_pos, text = dna_segs[[1]]$name) plot_gene_map(dna_segs = dna_segs, comparisons = comparisons,               annotations = annot1)   ## Exploring options annot2 <- annotation(x1 = c(mid_pos[1], dna_segs[[1]]$end[2]),                      x2 = c(NA, dna_segs[[1]]$end[3]),                      text = c(dna_segs[[1]]$name[1], \"region1\"),                      rot = c(30, 0),                      col = c(\"grey\", \"black\")) plot_gene_map(dna_segs = dna_segs, comparisons = comparisons,               annotations = annot2, annotation_height = 1.3)                 ## Using a bigger dataset from a 4-genome comparison data(barto)  ## Showing several subsegments xlims2 <- list(c(1445000, 1415000, 1380000, 1412000),                c(  10000,   45000,   50000,   83000, 90000, 120000),                c(  15000,   36000,   90000,  120000, 74000,  98000),                c(   5000,    82000)) ## Adding annotations for all genomes, allow segments to be placed out ## of the longest segment annots <- lapply(barto$dna_segs, function(x) {   mid <- middle(x)   annot <- annotation(x1 = mid, text = x$name, rot = 30)   # removing gene names starting with \"B\" and keeping 1 in 4   idx <- grep(\"^[^B]\", annot$text, perl = TRUE)   annot[idx[idx %% 4 == 0], ] }) plot_gene_map(dna_segs = barto$dna_segs,               comparisons = barto$comparisons,               annotations = annots,               xlims = xlims2,               limit_to_longest_dna_seg = FALSE,               dna_seg_scale = TRUE)   ## Annotations on all the segments annots <- lapply(dna_segs, function(x) {   mid <- middle(x)   annot <- annotation(x1 = mid, text = x$name, rot = 30) }) plot_gene_map(dna_segs = dna_segs,               comparisons = comparisons,               annotations = annots,               annotation_height = 1.8,               annotation_cex = 1)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/artemisColors.html","id":null,"dir":"Reference","previous_headings":"","what":"Artemis Colors â artemisColors","title":"Artemis Colors â artemisColors","text":"Returns data frame standard artemis colors.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/artemisColors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Artemis Colors â artemisColors","text":"","code":"artemisColors()"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/artemisColors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Artemis Colors â artemisColors","text":"data.frame following columns: n, names, colors, r, g, b. 3 first columns give Artemis color number, name, equivalent R. final 3 columns give r, g, b values.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/artemisColors.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Artemis Colors â artemisColors","text":"Artemis website: https://www.sanger.ac.uk/tool/artemis/","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/artemisColors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Artemis Colors â artemisColors","text":"Lionel Guy","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/artemisColors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Artemis Colors â artemisColors","text":"","code":"artCol <- artemisColors() plot(rep(1, nrow(artCol)), artCol$n, xlim = c(1, 2), type = \"n\") text(rep(1, nrow(artCol)), artCol$n, labels = artCol$n, col = artCol$colors) text(rep(1, nrow(artCol)), artCol$n, labels = artCol$names,      col = artCol$colors, pos = 4, offset = 1)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/auto_annotate.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto-annotate dna_segs â auto_annotate","title":"Auto-annotate dna_segs â auto_annotate","text":"Annotate dna_segs smart way. especially designed dna_segs read GenBank EMBL files, can used purposes well. default arguments, produces annotation objects based gene attribute dna_segs.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/auto_annotate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto-annotate dna_segs â auto_annotate","text":"","code":"auto_annotate(   dna_seg_input,   names = \"gene\",   basic_mode = FALSE,   locus_tag_pattern = NULL,   keep_genes_only = TRUE,   dna_seg = NULL,   ... )"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/auto_annotate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto-annotate dna_segs â auto_annotate","text":"dna_seg_input Either single dna_seg list dna_seg objects. names character string name dna_seg attribute, base annotations . dna_seg_input single dna_seg, can also character vector many elements rows dna_seg. basic_mode Logical. TRUE, annotate dna_seg_input using names argument, ignoring arguments never generating spanning annotations. locus_tag_pattern character string giving pattern, used simplify names. turn , use locus_tag_pattern = \"\". See details. keep_genes_only Logical. TRUE, row names \"-\", \"NA\", empty (\"\"), annotations made. See details. dna_seg Deprecated, included backwards compatibility. provided, replaces dna_seg_input. . ... arguments passed annotation function, like rot col.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/auto_annotate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auto-annotate dna_segs â auto_annotate","text":"dna_seg_input single dna_seg, single annotation object returned. dna_seg_input list dna_seg objects, list annotation objects returned equal length.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/auto_annotate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Auto-annotate dna_segs â auto_annotate","text":"keep_genes_only intended used gene column. TRUE, make annotations names 'empty' (\"-\", \"NA\", \"\"). FALSE however, locus_tag_pattern becomes relevant. element names 'empty', take name attribute dna_seg remove locus_tag_pattern (e.g. Eco003456 becomes 003456, Eco locus_tag_pattern). locus_tag_pattern left NULL attempt determine common prefix automatically. turn behavior , use locus_tag_pattern = \"\". names refers gene names, create spanning annotations operons sequences genes. work, gene names consecutive end number capital letter.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/auto_annotate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Auto-annotate dna_segs â auto_annotate","text":"Lionel Guy, Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/auto_annotate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auto-annotate dna_segs â auto_annotate","text":"","code":"## Prepare dna_seg names <- paste(\"Eco\", sprintf(\"%04d\", 1:20), sep = \"\") gene <- c(\"-\", \"atpC\", \"atpB\", \"atpA\", \"atp2\",            \"-\", \"-\", \"cda1\", \"cda2\", \"cda3\",           \"vcx23\", \"vcx22\", \"vcx21\", \"cde20\",           \"-\", \"gfrU\", \"gfrT\", \"gfrY\", \"gfrX\", \"gfrW\") ds <- dna_seg(data.frame(name = names,                          start = (1:20) * 3,                          end = (1:20) * 3 + 2,                          strand = rep(1, 20),                          gene = gene,                          stringsAsFactors = FALSE))  ## Original annotation annot1 <- annotation(x1 = middle(ds), text = ds$gene, rot = 45)  ## auto_annotate with various options annot2 <- auto_annotate(ds) annot3 <- auto_annotate(ds, keep_genes_only = FALSE,                         locus_tag_pattern = \"\", rot = 75) annot4 <- auto_annotate(ds, keep_genes_only = FALSE, col = \"red\")  ## Plot plot_gene_map(dna_segs = list(ds, ds, ds, ds),               annotations = list(annot1, annot2, annot3, annot4))"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/barto.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparison of 4 Bartonella genomes â barto","title":"Comparison of 4 Bartonella genomes â barto","text":"comparison 4 Bartonella genomes BLAST.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/barto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparison of 4 Bartonella genomes â barto","text":"","code":"data(barto)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/barto.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Comparison of 4 Bartonella genomes â barto","text":"barto, list 3 data frame lists, representing four genomes pairwise comparisons: dna_segs list 4 dna_seg objects, containing protein-coding genes genome. Obtained reading ptt files downloaded NCBI read_dna_seg_from_ptt. comparisons list 3 comparison objects, obtained genome--genome (fasta files) BLASTS, reading resulting tab files read_comparison_from_blast. rnt_segs list 4 dna_seg objects, containing RNA genes four genomes. Obtained reading rnt files downloaded NCBI read_dna_seg_from_ptt.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/barto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comparison of 4 Bartonella genomes â barto","text":"","code":"data(barto) plot_gene_map(barto$rnt_segs, barto$comparisons, gene_type = \"blocks\")"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/best_hit.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a comparison to include only the best hits for each query â best_hit","title":"Filter a comparison to include only the best hits for each query â best_hit","text":"Takes comparison object filters include best hit query. query names provided group_by, best hit determined sorting set queries based set columns provided sort_order.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/best_hit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a comparison to include only the best hits for each query â best_hit","text":"","code":"best_hit(   comparison,   group_by = \"name1\",   sort_order = c(\"bit_score\", \"aln_len\", \"per_id\", \"direction\") )"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/best_hit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a comparison to include only the best hits for each query â best_hit","text":"comparison comparison object filter. group_by character string referring column comparison holds query names. sort_order character vector column names determine best hit , order importance. first column used determine best hits per query, subsequent column used case ties.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/best_hit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a comparison to include only the best hits for each query â best_hit","text":"comparison object.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/best_hit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter a comparison to include only the best hits for each query â best_hit","text":"Designed find best hits per query comparison objects generated tabular BLAST DIAMOND results. column sort_order, maximum (minimum) value taken unique query name group_by, order provided sort_order, query 1 hit left. maximum values taken sort_order column, unless column provided one : \"mism\", \"gaps\", \"e_value\", \"name1\", \"name2\", \"start1\", \"start2\", \"end1\", \"end2\".","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/best_hit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter a comparison to include only the best hits for each query â best_hit","text":"Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/best_hit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter a comparison to include only the best hits for each query â best_hit","text":"","code":"## Read example blastp results infile <- system.file('extdata/blastp_example1.tab', package = 'genoPlotR')  ## comparison before filtering for best hits blast_comparison <- read_comparison_from_blast(infile) print_comparison(blast_comparison) #>     start1  end1 start2  end2          name1          name2 per_id aln_len #>      <int> <int>  <int> <int>         <char>         <char>  <num>   <int> #>  1:    117   502      1   385 HKIDPCCJ_00001 LABPAKCO_00001   58.7     387 #>  2:      1   376      1   379 HKIDPCCJ_00002 LABPAKCO_00002   56.5     379 #>  3:     19   651     12   645 HKIDPCCJ_00004 LABPAKCO_00005   74.6     634 #>  4:     23   655      8   644 HKIDPCCJ_00004 LABPAKCO_01957   51.4     642 #>  5:     11   811     10   812 HKIDPCCJ_00005 LABPAKCO_00006   62.8     803 #>  6:     11   810      6   809 HKIDPCCJ_00005 LABPAKCO_01958   40.0     817 #>  7:      1   172      1   190 HKIDPCCJ_00007 LABPAKCO_00009   55.8     197 #>  8:      1   172      1   164 HKIDPCCJ_00007 LABPAKCO_02342   50.0     174 #>  9:     93   535     67   509 HKIDPCCJ_00029 LABPAKCO_00168   28.7     453 #> 10:     87   521    107   546 HKIDPCCJ_00029 LABPAKCO_00977   26.3     452 #> 11:    328   529    335   539 HKIDPCCJ_00029 LABPAKCO_01459   33.2     205 #> 12:     88   534    100   548 HKIDPCCJ_00029 LABPAKCO_01460   23.7     451 #> 13:    304   498    312   502 HKIDPCCJ_00029 LABPAKCO_02399   31.3     201 #> 14:    328   521     28   227 HKIDPCCJ_00029 LABPAKCO_02526   29.8     208 #> 15:    328   519      4   214 HKIDPCCJ_00029 LABPAKCO_01272   29.1     213 #> 16:      1   637      1   644 HKIDPCCJ_00034 LABPAKCO_00103   56.1     645 #> 17:      2   210     11   270 HKIDPCCJ_00034 LABPAKCO_01390   31.5     260 #> 18:      8   303     12   290 HKIDPCCJ_00034 LABPAKCO_01699   30.1     306 #> 19:    100   531     78   511 HKIDPCCJ_00038 LABPAKCO_00168   24.1     456 #> 20:    250   513    267   544 HKIDPCCJ_00038 LABPAKCO_00977   26.1     284 #> 21:    267   513    290   533 HKIDPCCJ_00038 LABPAKCO_01460   27.6     254 #> 22:    325   503    331   513 HKIDPCCJ_00038 LABPAKCO_02399   28.1     185 #> 23:    109   473    105   460 HKIDPCCJ_00038 LABPAKCO_01612   22.5     374 #> 24:    359   501    368   516 HKIDPCCJ_00038 LABPAKCO_01459   29.6     152 #> 25:    320   514     22   226 HKIDPCCJ_00038 LABPAKCO_02526   25.8     209 #> 26:    323   485      2   187 HKIDPCCJ_00038 LABPAKCO_01272   22.1     204 #> 27:    451   514    331   398 HKIDPCCJ_00038 LABPAKCO_00394   32.4      68 #> 28:      8   338      4   334 HKIDPCCJ_00047 LABPAKCO_00854   54.1     333 #> 29:      4   336      1   333 HKIDPCCJ_00047 LABPAKCO_02361   27.1     336 #> 30:      1   442      1   443 HKIDPCCJ_00048 LABPAKCO_01328   33.8     444 #> 31:      1   438      1   440 HKIDPCCJ_00048 LABPAKCO_02752   32.4     442 #> 32:      1   379      1   378 HKIDPCCJ_00049 LABPAKCO_00839   72.5     382 #> 33:     15   348      9   310 HKIDPCCJ_00049 LABPAKCO_00753   32.2     342 #>     start1  end1 start2  end2          name1          name2 per_id aln_len #>      mism  gaps   e_value bit_score direction #>     <int> <int>     <num>     <num>     <num> #>  1:   157     2 1.32e-153     440.0         1 #>  2:   162     1 1.18e-140     401.0         1 #>  3:   160     1  0.00e+00     946.0         1 #>  4:   298    11 9.19e-211     601.0         1 #>  5:   297     1  0.00e+00     989.0         1 #>  6:   460     7 4.55e-185     547.0         1 #>  7:    55     2  2.90e-56     172.0         1 #>  8:    75     2  8.61e-50     154.0         1 #>  9:   303    10  3.22e-49     174.0         1 #> 10:   304    13  2.30e-31     124.0         1 #> 11:   134     3  3.10e-30     120.0         1 #> 12:   338     6  4.45e-29     117.0         1 #> 13:   122     4  2.08e-22      97.1         1 #> 14:   124     6  2.37e-14      69.7         1 #> 15:   128     7  3.15e-14      71.2         1 #> 16:   274     5 7.15e-256     715.0         1 #> 17:   127     4  8.69e-31     124.0         1 #> 18:   177    10  5.54e-24     102.0         1 #> 19:   300     9  3.02e-28     114.0         1 #> 20:   184     8  3.67e-21      93.2         1 #> 21:   167     6  5.92e-19      86.3         1 #> 22:   125     2  9.99e-18      82.4         1 #> 23:   263     7  2.73e-17      80.9         1 #> 24:    95     3  1.32e-12      66.2         1 #> 25:   137     6  9.21e-11      58.9         1 #> 26:   100     7  6.56e-05      41.6         1 #> 27:    42     2  2.91e-04      39.7         1 #> 28:   149     3 6.03e-110     322.0         1 #> 29:   239     4  5.43e-29     111.0         1 #> 30:   291     3  2.02e-80     252.0         1 #> 31:   293     4  7.28e-74     235.0         1 #> 32:    98     3 5.42e-194     537.0         1 #> 33:   184    11  4.93e-43     149.0         1 #>      mism  gaps   e_value bit_score direction  ## Filter for best hits and print results bh_comparison <- best_hit(blast_comparison) print_comparison(bh_comparison) #>     start1  end1 start2  end2          name1          name2 per_id aln_len #>      <int> <int>  <int> <int>         <char>         <char>  <num>   <int> #>  1:    117   502      1   385 HKIDPCCJ_00001 LABPAKCO_00001   58.7     387 #>  2:      1   376      1   379 HKIDPCCJ_00002 LABPAKCO_00002   56.5     379 #>  3:     19   651     12   645 HKIDPCCJ_00004 LABPAKCO_00005   74.6     634 #>  4:     11   811     10   812 HKIDPCCJ_00005 LABPAKCO_00006   62.8     803 #>  5:      1   172      1   190 HKIDPCCJ_00007 LABPAKCO_00009   55.8     197 #>  6:     93   535     67   509 HKIDPCCJ_00029 LABPAKCO_00168   28.7     453 #>  7:      1   637      1   644 HKIDPCCJ_00034 LABPAKCO_00103   56.1     645 #>  8:    100   531     78   511 HKIDPCCJ_00038 LABPAKCO_00168   24.1     456 #>  9:      8   338      4   334 HKIDPCCJ_00047 LABPAKCO_00854   54.1     333 #> 10:      1   442      1   443 HKIDPCCJ_00048 LABPAKCO_01328   33.8     444 #> 11:      1   379      1   378 HKIDPCCJ_00049 LABPAKCO_00839   72.5     382 #>      mism  gaps   e_value bit_score direction #>     <int> <int>     <num>     <num>     <num> #>  1:   157     2 1.32e-153       440         1 #>  2:   162     1 1.18e-140       401         1 #>  3:   160     1  0.00e+00       946         1 #>  4:   297     1  0.00e+00       989         1 #>  5:    55     2  2.90e-56       172         1 #>  6:   303    10  3.22e-49       174         1 #>  7:   274     5 7.15e-256       715         1 #>  8:   300     9  3.02e-28       114         1 #>  9:   149     3 6.03e-110       322         1 #> 10:   291     3  2.02e-80       252         1 #> 11:    98     3 5.42e-194       537         1"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/bidirectional_best_hit.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a comparison to include only bidirectional best hits â bidirectional_best_hit","title":"Filter a comparison to include only bidirectional best hits â bidirectional_best_hit","text":"Takes comparison object filters include bidirectional best hits, use second comparison, provided other_direction. comparison objects must filtered best hits already (see best_hit).","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/bidirectional_best_hit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a comparison to include only bidirectional best hits â bidirectional_best_hit","text":"","code":"bidirectional_best_hit(   comparison,   other_direction,   group_by1 = \"name1\",   group_by2 = \"name2\" )"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/bidirectional_best_hit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a comparison to include only bidirectional best hits â bidirectional_best_hit","text":"comparison comparison object filter. other_direction comparison object comparison filter compared . group_by1 character string referring column comparison holds query names. group_by2 character string referring column other_direction holds query names.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/bidirectional_best_hit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a comparison to include only bidirectional best hits â bidirectional_best_hit","text":"comparison object.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/bidirectional_best_hit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter a comparison to include only bidirectional best hits â bidirectional_best_hit","text":"best hits first comparison kept query-subject combinations can also found best hits second comparison. example, take best hit first comparison query name \"geneA\" subject name \"geneB\". comparison provided other_direction, best hit query name \"geneB\" subject name \"geneA\". hit kept bidirectional best hit. query names provided group_by1 group_by2, comparison filter comparison respectively.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/bidirectional_best_hit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter a comparison to include only bidirectional best hits â bidirectional_best_hit","text":"Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/bidirectional_best_hit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter a comparison to include only bidirectional best hits â bidirectional_best_hit","text":"","code":"## Read example blastp results infile1 <- system.file('extdata/blastp_example1.tab', package = 'genoPlotR')  ## comparison before filtering for best hits blast_comparison1 <- read_comparison_from_blast(infile1) print_comparison(blast_comparison1) #>     start1  end1 start2  end2          name1          name2 per_id aln_len #>      <int> <int>  <int> <int>         <char>         <char>  <num>   <int> #>  1:    117   502      1   385 HKIDPCCJ_00001 LABPAKCO_00001   58.7     387 #>  2:      1   376      1   379 HKIDPCCJ_00002 LABPAKCO_00002   56.5     379 #>  3:     19   651     12   645 HKIDPCCJ_00004 LABPAKCO_00005   74.6     634 #>  4:     23   655      8   644 HKIDPCCJ_00004 LABPAKCO_01957   51.4     642 #>  5:     11   811     10   812 HKIDPCCJ_00005 LABPAKCO_00006   62.8     803 #>  6:     11   810      6   809 HKIDPCCJ_00005 LABPAKCO_01958   40.0     817 #>  7:      1   172      1   190 HKIDPCCJ_00007 LABPAKCO_00009   55.8     197 #>  8:      1   172      1   164 HKIDPCCJ_00007 LABPAKCO_02342   50.0     174 #>  9:     93   535     67   509 HKIDPCCJ_00029 LABPAKCO_00168   28.7     453 #> 10:     87   521    107   546 HKIDPCCJ_00029 LABPAKCO_00977   26.3     452 #> 11:    328   529    335   539 HKIDPCCJ_00029 LABPAKCO_01459   33.2     205 #> 12:     88   534    100   548 HKIDPCCJ_00029 LABPAKCO_01460   23.7     451 #> 13:    304   498    312   502 HKIDPCCJ_00029 LABPAKCO_02399   31.3     201 #> 14:    328   521     28   227 HKIDPCCJ_00029 LABPAKCO_02526   29.8     208 #> 15:    328   519      4   214 HKIDPCCJ_00029 LABPAKCO_01272   29.1     213 #> 16:      1   637      1   644 HKIDPCCJ_00034 LABPAKCO_00103   56.1     645 #> 17:      2   210     11   270 HKIDPCCJ_00034 LABPAKCO_01390   31.5     260 #> 18:      8   303     12   290 HKIDPCCJ_00034 LABPAKCO_01699   30.1     306 #> 19:    100   531     78   511 HKIDPCCJ_00038 LABPAKCO_00168   24.1     456 #> 20:    250   513    267   544 HKIDPCCJ_00038 LABPAKCO_00977   26.1     284 #> 21:    267   513    290   533 HKIDPCCJ_00038 LABPAKCO_01460   27.6     254 #> 22:    325   503    331   513 HKIDPCCJ_00038 LABPAKCO_02399   28.1     185 #> 23:    109   473    105   460 HKIDPCCJ_00038 LABPAKCO_01612   22.5     374 #> 24:    359   501    368   516 HKIDPCCJ_00038 LABPAKCO_01459   29.6     152 #> 25:    320   514     22   226 HKIDPCCJ_00038 LABPAKCO_02526   25.8     209 #> 26:    323   485      2   187 HKIDPCCJ_00038 LABPAKCO_01272   22.1     204 #> 27:    451   514    331   398 HKIDPCCJ_00038 LABPAKCO_00394   32.4      68 #> 28:      8   338      4   334 HKIDPCCJ_00047 LABPAKCO_00854   54.1     333 #> 29:      4   336      1   333 HKIDPCCJ_00047 LABPAKCO_02361   27.1     336 #> 30:      1   442      1   443 HKIDPCCJ_00048 LABPAKCO_01328   33.8     444 #> 31:      1   438      1   440 HKIDPCCJ_00048 LABPAKCO_02752   32.4     442 #> 32:      1   379      1   378 HKIDPCCJ_00049 LABPAKCO_00839   72.5     382 #> 33:     15   348      9   310 HKIDPCCJ_00049 LABPAKCO_00753   32.2     342 #>     start1  end1 start2  end2          name1          name2 per_id aln_len #>      mism  gaps   e_value bit_score direction #>     <int> <int>     <num>     <num>     <num> #>  1:   157     2 1.32e-153     440.0         1 #>  2:   162     1 1.18e-140     401.0         1 #>  3:   160     1  0.00e+00     946.0         1 #>  4:   298    11 9.19e-211     601.0         1 #>  5:   297     1  0.00e+00     989.0         1 #>  6:   460     7 4.55e-185     547.0         1 #>  7:    55     2  2.90e-56     172.0         1 #>  8:    75     2  8.61e-50     154.0         1 #>  9:   303    10  3.22e-49     174.0         1 #> 10:   304    13  2.30e-31     124.0         1 #> 11:   134     3  3.10e-30     120.0         1 #> 12:   338     6  4.45e-29     117.0         1 #> 13:   122     4  2.08e-22      97.1         1 #> 14:   124     6  2.37e-14      69.7         1 #> 15:   128     7  3.15e-14      71.2         1 #> 16:   274     5 7.15e-256     715.0         1 #> 17:   127     4  8.69e-31     124.0         1 #> 18:   177    10  5.54e-24     102.0         1 #> 19:   300     9  3.02e-28     114.0         1 #> 20:   184     8  3.67e-21      93.2         1 #> 21:   167     6  5.92e-19      86.3         1 #> 22:   125     2  9.99e-18      82.4         1 #> 23:   263     7  2.73e-17      80.9         1 #> 24:    95     3  1.32e-12      66.2         1 #> 25:   137     6  9.21e-11      58.9         1 #> 26:   100     7  6.56e-05      41.6         1 #> 27:    42     2  2.91e-04      39.7         1 #> 28:   149     3 6.03e-110     322.0         1 #> 29:   239     4  5.43e-29     111.0         1 #> 30:   291     3  2.02e-80     252.0         1 #> 31:   293     4  7.28e-74     235.0         1 #> 32:    98     3 5.42e-194     537.0         1 #> 33:   184    11  4.93e-43     149.0         1 #>      mism  gaps   e_value bit_score direction  ## Filter for best hits and print results bh_comparison1 <- best_hit(blast_comparison1) print_comparison(bh_comparison1) #>     start1  end1 start2  end2          name1          name2 per_id aln_len #>      <int> <int>  <int> <int>         <char>         <char>  <num>   <int> #>  1:    117   502      1   385 HKIDPCCJ_00001 LABPAKCO_00001   58.7     387 #>  2:      1   376      1   379 HKIDPCCJ_00002 LABPAKCO_00002   56.5     379 #>  3:     19   651     12   645 HKIDPCCJ_00004 LABPAKCO_00005   74.6     634 #>  4:     11   811     10   812 HKIDPCCJ_00005 LABPAKCO_00006   62.8     803 #>  5:      1   172      1   190 HKIDPCCJ_00007 LABPAKCO_00009   55.8     197 #>  6:     93   535     67   509 HKIDPCCJ_00029 LABPAKCO_00168   28.7     453 #>  7:      1   637      1   644 HKIDPCCJ_00034 LABPAKCO_00103   56.1     645 #>  8:    100   531     78   511 HKIDPCCJ_00038 LABPAKCO_00168   24.1     456 #>  9:      8   338      4   334 HKIDPCCJ_00047 LABPAKCO_00854   54.1     333 #> 10:      1   442      1   443 HKIDPCCJ_00048 LABPAKCO_01328   33.8     444 #> 11:      1   379      1   378 HKIDPCCJ_00049 LABPAKCO_00839   72.5     382 #>      mism  gaps   e_value bit_score direction #>     <int> <int>     <num>     <num>     <num> #>  1:   157     2 1.32e-153       440         1 #>  2:   162     1 1.18e-140       401         1 #>  3:   160     1  0.00e+00       946         1 #>  4:   297     1  0.00e+00       989         1 #>  5:    55     2  2.90e-56       172         1 #>  6:   303    10  3.22e-49       174         1 #>  7:   274     5 7.15e-256       715         1 #>  8:   300     9  3.02e-28       114         1 #>  9:   149     3 6.03e-110       322         1 #> 10:   291     3  2.02e-80       252         1 #> 11:    98     3 5.42e-194       537         1  ## Repeat steps BLAST results in the other direction  infile2 <- system.file('extdata/blastp_example2.tab', package = 'genoPlotR') blast_comparison2 <- read_comparison_from_blast(infile2) bh_comparison2 <- best_hit(blast_comparison2)  ## Filter for bidirectional best hits and print results bbh_comparison1 <- bidirectional_best_hit(comparison = bh_comparison1,                                          other_direction = bh_comparison2) print_comparison(bbh_comparison1) #>    start1  end1 start2  end2          name1          name2 per_id aln_len  mism #>     <int> <int>  <int> <int>         <char>         <char>  <num>   <int> <int> #> 1:    117   502      1   385 HKIDPCCJ_00001 LABPAKCO_00001   58.7     387   157 #> 2:      1   376      1   379 HKIDPCCJ_00002 LABPAKCO_00002   56.5     379   162 #> 3:     19   651     12   645 HKIDPCCJ_00004 LABPAKCO_00005   74.6     634   160 #> 4:     11   811     10   812 HKIDPCCJ_00005 LABPAKCO_00006   62.8     803   297 #> 5:      1   172      1   190 HKIDPCCJ_00007 LABPAKCO_00009   55.8     197    55 #> 6:      1   637      1   644 HKIDPCCJ_00034 LABPAKCO_00103   56.1     645   274 #> 7:      8   338      4   334 HKIDPCCJ_00047 LABPAKCO_00854   54.1     333   149 #> 8:      1   442      1   443 HKIDPCCJ_00048 LABPAKCO_01328   33.8     444   291 #> 9:      1   379      1   378 HKIDPCCJ_00049 LABPAKCO_00839   72.5     382    98 #>     gaps   e_value bit_score direction #>    <int>     <num>     <num>     <num> #> 1:     2 1.32e-153       440         1 #> 2:     1 1.18e-140       401         1 #> 3:     1  0.00e+00       946         1 #> 4:     1  0.00e+00       989         1 #> 5:     2  2.90e-56       172         1 #> 6:     5 7.15e-256       715         1 #> 7:     3 6.03e-110       322         1 #> 8:     3  2.02e-80       252         1 #> 9:     3 5.42e-194       537         1"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/chrY_subseg.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparisons of subsegments of the Y chromosome in human and chimp â chrY_subseg","title":"Comparisons of subsegments of the Y chromosome in human and chimp â chrY_subseg","text":"subsegment Y chromosome Homo sapiens Pan troglodytes, illustrate support exons introns.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/chrY_subseg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparisons of subsegments of the Y chromosome in human and chimp â chrY_subseg","text":"","code":"data(chrY_subseg)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/chrY_subseg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Comparisons of subsegments of the Y chromosome in human and chimp â chrY_subseg","text":"chrY_subseg, list two data frame lists, representing Y segment two species comparison : dna_segs list 2 dna_seg objects, containing 3 genes . exon intron seperate feature (row) dna_seg. comparison list containing 1 comparison object.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/chrY_subseg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comparisons of subsegments of the Y chromosome in human and chimp â chrY_subseg","text":"","code":"data(chrY_subseg) plot_gene_map(chrY_subseg$dna_segs, chrY_subseg$comparison,               dna_seg_scale = TRUE, scale = FALSE)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"comparison class and methods â comparison","title":"comparison class and methods â comparison","text":"comparison objects collections similarities two DNA segments. functions class functions create, convert, test comparison objects.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"comparison class and methods â comparison","text":"","code":"comparison(x)  as.comparison(df)  is.comparison(comparison)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"comparison class and methods â comparison","text":"x object coerced. Can list, data.frame data.table object. See details necessary columns. df x. comparison object test.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/comparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"comparison class and methods â comparison","text":".comparison comparison return comparison object. .comparison returns logical.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/comparison.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"comparison class and methods â comparison","text":"comparison object requires least start1, end1, start2, end2 columns. color can provided well using col column. Additional numeric columns can used color-coding using [gradient_color_scheme], \"gradient\" color scheme global_color_scheme argument [plot_gene_map]. objects inherit data.table, can therefore manipulated using data.table syntax. .comparison returns TRUE object tested comparison object.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/comparison.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"comparison class and methods â comparison","text":"Lionel Guy","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/comparison.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"comparison class and methods â comparison","text":"","code":"## Get some values starts1 <- c(2, 1000, 1050) ends1 <- c(600, 800, 1345) starts2 <- c(50, 800, 1200) ends2 <- c(900, 1100, 1322)  ## From a data.frame comparison1 <- as.comparison(data.frame(start1 = starts1, end1 = ends1,                                         start2 = starts2, end2 = ends2)) print_comparison(comparison1) #>    start1  end1 start2  end2 direction #>     <num> <num>  <num> <num>     <num> #> 1:      2   600     50   900         1 #> 2:   1000   800    800  1100        -1 #> 3:   1050  1345   1200  1322         1 is.comparison(comparison1) #> [1] TRUE is.data.frame(comparison1) #> [1] TRUE print_comparison(data.frame(start1 = starts1, end1 = ends1,                             start2 = starts2, end2 = ends2)) #>    start1  end1 start2  end2 #>     <num> <num>  <num> <num> #> 1:      2   600     50   900 #> 2:   1000   800    800  1100 #> 3:   1050  1345   1200  1322  ## From a list print_comparison(list(start1 = starts1, end1 = ends1,                       start2 = starts2, end2 = ends2)) #>    start1  end1 start2  end2 #>     <num> <num>  <num> <num> #> 1:      2   600     50   900 #> 2:   1000   800    800  1100 #> 3:   1050  1345   1200  1322   ## Printing out a comparison like this can occasionally throw an error: if (FALSE) { comparison1 print(comparison1) } ## This can happen when print.comparison is loaded from the testthat package ## To avoid this, use print_comparison as shown above"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/comparisons_from_dna_segs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create comparisons between DNA segments â comparisons_from_dna_segs","title":"Create comparisons between DNA segments â comparisons_from_dna_segs","text":"Create list comparison objects list dna_seg objects files parsing (executing) sequence alignments. files already exist, parsed. , DIAMOND BLAST program can executed generate sequence alignment results dna_seg, respect order dna_segs. Executing DIAMOND BLAST requires command-line implementations tools installed.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/comparisons_from_dna_segs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create comparisons between DNA segments â comparisons_from_dna_segs","text":"","code":"comparisons_from_dna_segs(   dna_segs = NULL,   seg_labels = NULL,   files = NULL,   mode = \"full\",   tool = \"blast\",   algorithm = \"blastp\",   sensitivity = \"default\",   output_path = NULL,   all_vs_all = FALSE,   filt_length = \"auto\",   use_cache = TRUE,   verbose = FALSE,   ... )"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/comparisons_from_dna_segs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create comparisons between DNA segments â comparisons_from_dna_segs","text":"dna_segs list dna_seg objects create comparisons . Either dna_segs files must provided. seg_labels character vector containing DNA segment labels. files character vector, containing file paths FASTA GenBank files. comparisons made files. Either dna_segs files must provided. mode Determines comparisons filtered. \"besthit\", \"bidirectional\", \"full\". mode \"besthit\", best hit taken input query (see best_hit). mode \"bidirectional\", hits kept best hits query directions (see bidirectional_best_hit). \"full\" means sequence alignment results considered. tool Choice sequence alignment tool. Either \"blast\" \"diamond\". algorithm Choice BLAST algorithm run. One : \"blastp\", \"blastp-fast\", \"blastp-short\", \"tblastx\", \"blastn\", \"blastn-short\", \"megablast\", \"dc-megablast\". sensitivity Choice sensitivity option running DIAMOND. One : \"fast\", \"default\", \"mid-sensitive\", \"sensitive\", \"-sensitive\", \"-sensitive\", \"ultra-sensitive\". output_path Path folder contain output files. sequence alignment result FASTA files used make stored . all_vs_all Logical. TRUE, sequence alignments performed every combination inputs, instead just ones necessary plotting. Note can take long time, use caution. filt_length number indicating minimum length required hits, \"auto\". \"auto\", determined based choice tool algorithm (150 DIAMOND blastp algorithm, 450 tblastx, 900 blastn algorithm). use_cache Logical. FALSE, never check existing files. includes FASTA files used input sequcence alignment, database files used DIAMOND BLAST, sequence alignment results . verbose Logical. TRUE, reports timings creating new files. ... Arguments pass functions (functions executing sequence alignments tools, run_blast, run_diamond, function parsing BLAST/ DIAMOND results, read_comparison_from_blast).","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/comparisons_from_dna_segs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create comparisons between DNA segments â comparisons_from_dna_segs","text":"list comparison objects.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/comparisons_from_dna_segs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create comparisons between DNA segments â comparisons_from_dna_segs","text":"Unless use_cache set FALSE, function look files required using combination seg_labels (provided), names dna_segs files provided input. find sequence alignment results form \"query_subject\" (put differently, \"dna_seg1_dna_seg2\"), run DIAMOND BLAST generate results. Using system, also looks FASTA files required input sequence alignment. output_path left NULL, current working directory used instead.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/comparisons_from_dna_segs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create comparisons between DNA segments â comparisons_from_dna_segs","text":"Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/comparisons_from_dna_segs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create comparisons between DNA segments â comparisons_from_dna_segs","text":"","code":"if (FALSE) { ## Comparisons from a vector of GenBank files using DIAMOND comparisons <- comparisons_from_dna_segs(   files = c(\"genome1.gb\", \"genome2.gb\", \"genome2.gb\"),   tool = \"diamond\",   output_path = \"output/diamond\",   sensitivity = \"very-sensitive\",   verbose = TRUE ) }"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/dna_seg.html","id":null,"dir":"Reference","previous_headings":"","what":"dna_seg class and methods â dna_seg","title":"dna_seg class and methods â dna_seg","text":"dna_seg objects collections genes elements along genome, represented map. functions class functions create, convert, test dna_seg objects.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/dna_seg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dna_seg class and methods â dna_seg","text":"","code":"dna_seg(x, ...)  as.dna_seg(   df,   col = \"grey20\",   fill = \"grey80\",   lty = 1,   lwd = 1,   pch = 8,   cex = 1,   gene_type = \"arrows\",   region_plot = \"NA\",   ordered = TRUE )  is.dna_seg(dna_seg)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/dna_seg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dna_seg class and methods â dna_seg","text":"x object coerced. Can data.frame, data.table, list object. See details necessary columns. ... Arguments pass dna_seg, see arguments . df x. col character vector colors, either length one length x. Determines outline features, overall color shapes (see gene_types) fill color (e.g. text, points). fill col, determines fill color features. lty vector either length 1 length x. Determines line type (see par) features. lwd numeric vector either length 1 length x. Determines line width (see par) features. pch vector either length 1 length x. Determines shape (see points) features represented points. cex numeric vector either length 1 length x. Determines size multiplier features represented text points. gene_type character vector either length 1 length x. Determines gene type (.e. shape) features. See gene_types. region_plot character vector either length 1 length x. Determines features going plotted going regional plotting. See plot_gene_map details. ordered Logical. TRUE, orders dna_seg start end columns. dna_seg object test.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/dna_seg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dna_seg class and methods â dna_seg","text":".dna_seg dna_seg return dna_seg object. .dna_seg returns logical.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/dna_seg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"dna_seg class and methods â dna_seg","text":"dna_seg object data.table must start columns name, start, end, strand. arguments listed add columns, already present data provided x. number additional columns can added dna_seg objects, act metadata ways group identify features. dna_seg .dna_seg can used create dna_seg objects list, data.frame, data.table objects. Alternatively, read_dna_seg_from_file can used create file. objects inherit data.table, can therefore manipulated using data.table syntax. .dna_seg returns TRUE object tested dna_seg object.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/dna_seg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dna_seg class and methods â dna_seg","text":"Lionel Guy, Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/dna_seg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dna_seg class and methods â dna_seg","text":"","code":"## Generate data names1 <- c(\"feat1\", \"feat2\", \"feat3\") starts1 <- c(2, 1000, 1050) ends1 <- c(600, 800, 1345) strands1 <- c(\"-\", -1, 1) cols1 <- c(\"blue\", \"grey\", \"red\")  ## Create data.frame df1 <- data.frame(name = names1, start = starts1, end = ends1,                   strand = strands1, col = cols1)  ## Create dna_seg dna_seg1 <- dna_seg(df1) dna_seg1 #>      name start   end strand    col gene_type region_plot   fill   lty   lwd #>    <char> <num> <num>  <num> <char>    <char>      <char> <char> <num> <num> #> 1:  feat1     2   600     -1   blue    arrows          NA grey80     1     1 #> 2:  feat2  1000   800     -1   grey    arrows          NA grey80     1     1 #> 3:  feat3  1050  1345      1    red    arrows          NA grey80     1     1 #>      pch   cex #>    <num> <num> #> 1:     8     1 #> 2:     8     1 #> 3:     8     1 as.dna_seg(df1) #>      name start   end strand    col gene_type region_plot   fill   lty   lwd #>    <char> <num> <num>  <num> <char>    <char>      <char> <char> <num> <num> #> 1:  feat1     2   600     -1   blue    arrows          NA grey80     1     1 #> 2:  feat2  1000   800     -1   grey    arrows          NA grey80     1     1 #> 3:  feat3  1050  1345      1    red    arrows          NA grey80     1     1 #>      pch   cex #>    <num> <num> #> 1:     8     1 #> 2:     8     1 #> 3:     8     1  ## Test dna_seg is.dna_seg(dna_seg1) #> [1] TRUE"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/dna_seg_to_fasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert dna_seg objects to FASTA files â dna_seg_to_fasta","title":"Convert dna_seg objects to FASTA files â dna_seg_to_fasta","text":"Takes (non-boundary) features dna_seg_input sequences makes FASTA file .","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/dna_seg_to_fasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert dna_seg objects to FASTA files â dna_seg_to_fasta","text":"","code":"dna_seg_to_fasta(   dna_seg_input,   output_path = NULL,   id = \"locus_id\",   file_names = NULL,   unique_ids = FALSE,   verbose = FALSE,   ... )"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/dna_seg_to_fasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert dna_seg objects to FASTA files â dna_seg_to_fasta","text":"dna_seg_input Either single dna_seg object list dna_seg objects, output_path Path folder contain output files. id dna_seg column use header FASTA sequences. file_names character vector file names use. provided, must length amount provided dna_seg objects. unique_ids Logical. TRUE, values column provided id unique. FALSE use first sequence unique value id. verbose Logical. TRUE, report time starts writing output file, well potential warning id column duplicate values. ... Arguments pass fwrite.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/dna_seg_to_fasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert dna_seg objects to FASTA files â dna_seg_to_fasta","text":"Returns nothing (invisible NULL).","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/dna_seg_to_fasta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert dna_seg objects to FASTA files â dna_seg_to_fasta","text":"output_path left NULL, current working directory used instead.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/dna_seg_to_fasta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert dna_seg objects to FASTA files â dna_seg_to_fasta","text":"Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/dna_seg_to_fasta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert dna_seg objects to FASTA files â dna_seg_to_fasta","text":"","code":"if (FALSE) { dna_seg_to_fasta(dna_seg_input = list(dna_seg1, dna_seg2),                   output_path = \"path/to/output/folder\") }"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/edit_dna_segs.html","id":null,"dir":"Reference","previous_headings":"","what":"Edit dna_seg features â edit_dna_segs","title":"Edit dna_seg features â edit_dna_segs","text":"Edit features dna_segs supplying set IDs, set new values features match IDs.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/edit_dna_segs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edit dna_seg features â edit_dna_segs","text":"","code":"edit_dna_segs(   dna_seg_input,   ids,   seg_labels = NULL,   id_tags = c(\"name\", \"locus_id\"),   fixed = FALSE,   verbose = FALSE,   ... )"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/edit_dna_segs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edit dna_seg features â edit_dna_segs","text":"dna_seg_input Either single dna_seg list dna_seg objects. ids Either character string (specifying file path), data.frame object. Contains information edit dna_segs, must contain least id column. See details. seg_labels Either NULL character vector length dna_seg_input. ids contains seg_label column, changes made dna_segs corresponding labels. labels determined seg_labels argument, also dna_segs . , seg_labels can used provide alternate set names. id_tags character vector dna_seg column names match id column ids. fixed Logical. TRUE, values id column match exactly values found dna_segs. FALSE, grep used search instead, allowing regular expressions used. verbose Logical. TRUE, generates warnings dna_seg found labels found seg_label column ids. Additionally, generates warning columns provided id_tags found dna_segs. ... Arguments pass fread, used ids argument refers file.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/edit_dna_segs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edit dna_seg features â edit_dna_segs","text":"Either single dna_seg object list dna_seg objects, matching input given using dna_seg_input.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/edit_dna_segs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Edit dna_seg features â edit_dna_segs","text":"ids character string, assumed file path, file read using fread. , data.frame data.table object, mandatory id column. update dna_segs querying value (IDs) id column, updating matching row. look IDs columns provided id_tags argument. can constrained looks specific dna_seg ID including seg_label column ids. function can used alter dna_seg attributes mass, providing IDs match general attributes, like color presence certain word functions. , can also used modify specific features making use attributes locus tags like.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/edit_dna_segs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Edit dna_seg features â edit_dna_segs","text":"Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/edit_dna_segs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edit dna_seg features â edit_dna_segs","text":"","code":"## Prepare dna_seg names1 <- c(\"1A\", \"1B\", \"1C\") names2 <- c(\"2A\", \"2C\", \"2B\") names3 <- c(\"3B\", \"3A\", \"3C\")  ## Make dna_segs dna_seg1 <- dna_seg(data.frame(name = names1,                                start = (1:3) * 3,                                end = (1:3) * 3 + 2,                                strand = rep(1, 3))) dna_seg2 <- dna_seg(data.frame(name = names2,                                start = (1:3) * 3,                                end = (1:3) * 3 + 2,                                strand = rep(1, 3))) dna_seg3 <- dna_seg(data.frame(name = names3,                                start = (1:3) * 3,                                end = (1:3) * 3 + 2,                                strand = rep(1, 3))) dna_segs <- list(\"Genome 1\" = dna_seg1,                  \"Genome 2\" = dna_seg2,                  \"Genome 3\" = dna_seg3)  ## Colors before using edit_dna_segs lapply(dna_segs, function(x) x[, .(name, fill)]) #> $`Genome 1` #>      name   fill #>    <char> <char> #> 1:     1A grey80 #> 2:     1B grey80 #> 3:     1C grey80 #>  #> $`Genome 2` #>      name   fill #>    <char> <char> #> 1:     2A grey80 #> 2:     2C grey80 #> 3:     2B grey80 #>  #> $`Genome 3` #>      name   fill #>    <char> <char> #> 1:     3B grey80 #> 2:     3A grey80 #> 3:     3C grey80 #>   ## Add colors based on exact feature names id_fixed <- c(\"1A\", \"1B\", \"2A\", \"2B\") fill_fixed <- c(\"red\", \"blue\", \"red\", \"blue\") dna_segs1 <- edit_dna_segs(dna_seg_input = dna_segs,                            ids = data.frame(id = id_fixed,                                             fill = fill_fixed),                            fixed = TRUE) lapply(dna_segs1, function(x) x[, .(name, fill)]) #> $`Genome 1` #>      name   fill #>    <char> <char> #> 1:     1A    red #> 2:     1B   blue #> 3:     1C grey80 #>  #> $`Genome 2` #>      name   fill #>    <char> <char> #> 1:     2A    red #> 2:     2C grey80 #> 3:     2B   blue #>  #> $`Genome 3` #>      name   fill #>    <char> <char> #> 1:     3B grey80 #> 2:     3A grey80 #> 3:     3C grey80 #>   ## Add colors based on the presence of a string in the feature names id_grep <- c(\"A\", \"B\") fill_grep <- c(\"red\", \"blue\") dna_segs2 <- edit_dna_segs(dna_seg_input = dna_segs,                            ids = data.frame(id = id_grep, fill = fill_grep)) lapply(dna_segs2, function(x) x[, .(name, fill)]) #> $`Genome 1` #>      name   fill #>    <char> <char> #> 1:     1A    red #> 2:     1B   blue #> 3:     1C grey80 #>  #> $`Genome 2` #>      name   fill #>    <char> <char> #> 1:     2A    red #> 2:     2C grey80 #> 3:     2B   blue #>  #> $`Genome 3` #>      name   fill #>    <char> <char> #> 1:     3B   blue #> 2:     3A    red #> 3:     3C grey80 #>   ## Use seg_labels to add colors only to specific dna_segs id_labels <- c(\"Genome 1\", \"Genome 2\") dna_segs3 <- edit_dna_segs(dna_seg_input = dna_segs,                            ids = data.frame(id = id_grep, fill = fill_grep)) lapply(dna_segs3, function(x) x[, .(name, fill)]) #> $`Genome 1` #>      name   fill #>    <char> <char> #> 1:     1A    red #> 2:     1B   blue #> 3:     1C grey80 #>  #> $`Genome 2` #>      name   fill #>    <char> <char> #> 1:     2A    red #> 2:     2C grey80 #> 3:     2B   blue #>  #> $`Genome 3` #>      name   fill #>    <char> <char> #> 1:     3B   blue #> 2:     3A    red #> 3:     3C grey80 #>"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/genbank_to_fasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert GenBank files to FASTA files â genbank_to_fasta","title":"Convert GenBank files to FASTA files â genbank_to_fasta","text":"Takes CDS tags translation fields creates FASTA file , takes ORIGIN field(s) create FASTA file containing nucleotide sequences instead.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/genbank_to_fasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert GenBank files to FASTA files â genbank_to_fasta","text":"","code":"genbank_to_fasta(   file,   id_tag = \"locus_tag\",   take_origin = FALSE,   out = NULL,   verbose = FALSE )"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/genbank_to_fasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert GenBank files to FASTA files â genbank_to_fasta","text":"file GenBank file convert. id_tag character string, denotes CDS field use header FASTA file sequences. field must exist CDS tags present GenBank file. take_origin Logical. TRUE, take ORIGIN field(s) create FASTA file containing nucleotide sequences instead. Output file path. verbose Logical. TRUE, report time starts writing output file.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/genbank_to_fasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert GenBank files to FASTA files â genbank_to_fasta","text":"Returns nothing (invisible NULL).","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/genbank_to_fasta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert GenBank files to FASTA files â genbank_to_fasta","text":"left NULL, current working directory used instead.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/genbank_to_fasta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert GenBank files to FASTA files â genbank_to_fasta","text":"Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/genbank_to_fasta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert GenBank files to FASTA files â genbank_to_fasta","text":"","code":"if (FALSE) { genbank_to_fasta(file = \"genome1.gb\", out = \"genome1\") }"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/gene_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Lists gene_types for dna_seg objects â gene_types","title":"Lists gene_types for dna_seg objects â gene_types","text":"Returns character vector containing available gene types plotting dna_seg features.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/gene_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lists gene_types for dna_seg objects â gene_types","text":"","code":"gene_types(auto = TRUE)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/gene_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lists gene_types for dna_seg objects â gene_types","text":"auto Logical. TRUE, includes \"auto\" gene type output, plot_gene_map determine gene type use automatically.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/gene_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lists gene_types for dna_seg objects â gene_types","text":"character vector.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/gene_types.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lists gene_types for dna_seg objects â gene_types","text":"dna_segs may contain gene_type column, determines shape dna_seg features plotted using plot_gene_map. Elements column either one predefined gene types returned function, must refer graphical function exactly name returns grob gList object.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/gene_types.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Lists gene_types for dna_seg objects â gene_types","text":"Lionel Guy","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/gene_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lists gene_types for dna_seg objects â gene_types","text":"","code":"## To view pre-coded gene types: gene_types() #>  [1] \"auto\"            \"arrows\"          \"headless_arrows\" \"blocks\"          #>  [5] \"bars\"            \"points\"          \"text\"            \"lines\"           #>  [9] \"side_blocks\"     \"side_bars\"       \"side_points\"     \"side_text\"       #> [13] \"side_lines\"      \"introns\"         \"exons\"           \"side_exons\"      #> [17] \"boundaries\"       ## Load data data(barto) n <- length(gene_types(auto = FALSE))  ## Get a small subset from the barto dataset dna_seg <- barto$dna_segs[[3]][1:n,] plot_gene_map(list(dna_seg))   ## Change gene_types and plot again dna_seg$gene_type <- gene_types(auto = FALSE) dna_seg$fill <- rainbow(n) dna_seg_r <- dna_seg dna_seg_r$strand <- -dna_seg$strand  ## Add an annotation annot <- annotation(middle(dna_seg), text = dna_seg$gene_type, rot = 45,                     col = dna_seg$col)  ## Plot plot_gene_map(list(dna_seg, dna_seg_r), annotations = list(annot, annot),               annotation_height = 5, dna_seg_line = grey(0.7))"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/genoPlotR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"genoPlotR: Plot Publication-Grade Gene and Genome Maps â genoPlotR-package","title":"genoPlotR: Plot Publication-Grade Gene and Genome Maps â genoPlotR-package","text":"Draws gene genome maps comparisons , publication-grade manner. Starting simple, common files, draw postscript PDF files can sent journals.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/gradient_color_scheme.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a gradient color scheme â gradient_color_scheme","title":"Generate a gradient color scheme â gradient_color_scheme","text":"color scale generated based numeric vector, darker colors corresponding higher values, lower values decreasing = TRUE.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/gradient_color_scheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a gradient color scheme â gradient_color_scheme","text":"","code":"gradient_color_scheme(   x,   direction = NULL,   color_scheme = \"grey\",   decreasing = FALSE,   rng = NULL,   alpha = 0.5,   transparency )  apply_color_scheme(   x,   direction = NULL,   color_scheme = \"grey\",   decreasing = FALSE,   rng = NULL,   alpha = 0.5,   transparency )"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/gradient_color_scheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a gradient color scheme â gradient_color_scheme","text":"x numeric vector generate colors . direction numeric vector composed -1 1 values, denoting direction comparison. Ignored unless color scheme red-blue color scheme. color_scheme character string, one : \"red_blue\", \"blue_red\", \"gray\", \"grey\". decreasing Logical. values x representing relationship gets stronger number goes (e.g. e-values, gaps, mismatches)? rng Numeric length 2. Gives lower upper limits apply gradient . alpha single numeric value 0 1, FALSE. Determines transparency applied color scheme, 0 fully transparent, 1 fully opaque. transparency Deprecated, included backwards compatibility. provided, replaces alpha.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/gradient_color_scheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a gradient color scheme â gradient_color_scheme","text":"character vector colors, length x.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/gradient_color_scheme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a gradient color scheme â gradient_color_scheme","text":"apply_color_scheme synonymous gradient_color_scheme, included backwards compatibility. Made use alongside comparison objects, especially useful visualize representations sequence similarities, like BLAST percentage identity values e-values. red-blue color scheme, red colors correspond comparisons go direction (1), blue colors correspond comparisons go opposite direction (-1).","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/gradient_color_scheme.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate a gradient color scheme â gradient_color_scheme","text":"Lionel Guy","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/gradient_color_scheme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a gradient color scheme â gradient_color_scheme","text":"","code":"## Load data data(three_genes) dna_segs <- three_genes$dna_segs comparisons <- three_genes$comparisons  ## Color schemes ## Greys comparisons[[1]]$values <- c(70, 80, 90) comparisons[[1]]$col <- gradient_color_scheme(   comparisons[[1]]$values,   color_scheme = \"grey\") plot_gene_map(dna_segs = dna_segs, comparisons = comparisons)  ## Red-blue comparisons[[1]]$col <- gradient_color_scheme(   comparisons[[1]]$values,   direction = comparisons[[1]]$direction,   color_scheme = \"red_blue\") plot_gene_map(dna_segs = dna_segs, comparisons = comparisons)  ## Decreasing comparisons[[1]]$col <- gradient_color_scheme(   comparisons[[1]]$values,   direction = comparisons[[1]]$direction,   color_scheme = \"red_blue\",   decreasing = TRUE) plot_gene_map(dna_segs = dna_segs, comparisons = comparisons)  ## Range comparisons[[1]]$col <- gradient_color_scheme(   comparisons[[1]]$values,   direction = comparisons[[1]]$direction,   color_scheme = \"red_blue\",   rng = c(30,100)) plot_gene_map(dna_segs = dna_segs, comparisons = comparisons)  ## Transparency x1 <- seq(100, 600, by = 50) x2 <- seq(1100, 700, by = -50) comparisons[[2]] <- as.comparison(data.frame(   start1 = c(x1, x2),   end1 = c(x1 + 250, x2 + 300),   start2 = c(x1 + 150, x2 - 300) + 2000,   end2 = c(x1 + 250, x2 - 500) + 2000)) comparisons[[1]]$col <- gradient_color_scheme(   comparisons[[1]]$values,   color_scheme = \"grey\",   alpha = 0.8) comparisons[[2]]$col <- gradient_color_scheme(   1:nrow(comparisons[[2]]),   direction = comparisons[[2]]$direction,   color_scheme = \"blue_red\") plot_gene_map(dna_segs = dna_segs, comparisons = comparisons)   comparisons[[1]]$col <- gradient_color_scheme(   comparisons[[1]]$values,   color_scheme = \"grey\",   alpha = 1) comparisons[[2]]$col <- gradient_color_scheme(   1:nrow(comparisons[[2]]),   direction = comparisons[[2]]$direction,   color_scheme = \"blue_red\",   alpha = 0.2) plot_gene_map(dna_segs = dna_segs, comparisons = comparisons)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/human_nt.html","id":null,"dir":"Reference","previous_headings":"","what":"Human-readable nucleotide scale â human_nt","title":"Human-readable nucleotide scale â human_nt","text":"Returns human readable list nucleotide position length.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/human_nt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Human-readable nucleotide scale â human_nt","text":"","code":"human_nt(nt, signif = FALSE)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/human_nt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Human-readable nucleotide scale â human_nt","text":"nt nucleotide position. signif Either numeric logical. FALSE, nt rounded. argument numeric, returns amount significant digits.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/human_nt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Human-readable nucleotide scale â human_nt","text":"Returns list 4 elements. n numeric value corresponding nt divided mult (see ). tag character, giving multiplier used text. mult muliplier used, numeric value. text character, giving value human readable format.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/human_nt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Human-readable nucleotide scale â human_nt","text":"Return nucleotide value nt, kb, Mb Gb, according value given. particularly useful display nice scales without many trailing zeros.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/human_nt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Human-readable nucleotide scale â human_nt","text":"Lionel Guy","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/human_nt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Human-readable nucleotide scale â human_nt","text":"","code":"human_nt(123456) #> $n #> [1] 123.456 #>  #> $tag #> [1] \"kb\" #>  #> $mult #> [1] 1000 #>  #> $text #> [1] \"123.456 kb\" #>  human_nt(123456, signif = 2) #> $n #> [1] 120 #>  #> $tag #> [1] \"kb\" #>  #> $mult #> [1] 1000 #>  #> $text #> [1] \"120 kb\" #>  human_nt(123456890, signif = 2) #> $n #> [1] 120 #>  #> $tag #> [1] \"Mb\" #>  #> $mult #> [1] 1e+06 #>  #> $text #> [1] \"120 Mb\" #>"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/make_unique_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Make unique IDs for dna_segs â make_unique_ids","title":"Make unique IDs for dna_segs â make_unique_ids","text":"Generates unique identifiers (IDs) dna_seg features. can based values existing columns, generated scratch.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/make_unique_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make unique IDs for dna_segs â make_unique_ids","text":"","code":"make_unique_ids(dna_seg_input, old_id = NULL, new_id = \"id\")"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/make_unique_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make unique IDs for dna_segs â make_unique_ids","text":"dna_seg_input Either single dna_seg list dna_seg objects. old_id Either character vector representing dna_seg columns, NULL. IDs generated based vector dna_seg columns provided, generated scratch argument NULL. new_id character string, generated IDs stored dna_seg column given argument. create new column exist dna_segs.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/make_unique_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make unique IDs for dna_segs â make_unique_ids","text":"Either single dna_seg object list dna_seg objects, matching input given using dna_seg_input.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/make_unique_ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make unique IDs for dna_segs â make_unique_ids","text":"function generates unique identifiers dna_segs. unique identifiers necessary certain functions, like converting dna_seg FASTA file, tools make use FASTA files require unique headers sequence FASTA file. old_id left NULL, generated IDs simply row numbers feature. old_id refers one multiple dna_seg columns, values columns concatenated, separated \"_\". , number added values, starts 1 combination values, goes time combination found. See examples .","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/make_unique_ids.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make unique IDs for dna_segs â make_unique_ids","text":"Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/make_unique_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make unique IDs for dna_segs â make_unique_ids","text":"","code":"## Prepare dna_seg names1 <- c(\"A\", \"A\", \"B\", \"B\", \"B\", \"C\") types1 <- c(\"gene\", \"gene\", \"gene\", \"protein\", \"gene\", \"gene\")  ## Make dna_seg dna_seg_raw <- dna_seg(data.frame(name = names1,                                   start = (1:6) * 3,                                   end = (1:6) * 3 + 2,                                   strand = rep(1, 6),                                   type = types1))  ## Generate IDs based on 1 column  dna_seg_edit <- make_unique_ids(dna_seg_input = dna_seg_raw,                                 old_id = \"name\") dna_seg_edit[, .(name, type, id)] #>      name    type     id #>    <char>  <char> <char> #> 1:      A    gene    A_1 #> 2:      A    gene    A_2 #> 3:      B    gene    B_1 #> 4:      B protein    B_2 #> 5:      B    gene    B_3 #> 6:      C    gene    C_1  ## Generate IDs based on multiple columns dna_seg_edit <- make_unique_ids(dna_seg_input = dna_seg_raw,                                  old_id = c(\"name\", \"type\")) dna_seg_edit[, .(name, type, id)] #>      name    type          id #>    <char>  <char>      <char> #> 1:      A    gene    A_gene_1 #> 2:      A    gene    A_gene_2 #> 3:      B    gene    B_gene_1 #> 4:      B protein B_protein_1 #> 5:      B    gene    B_gene_2 #> 6:      C    gene    C_gene_1"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/mauve_bbone.html","id":null,"dir":"Reference","previous_headings":"","what":"Mauve backbone of 4 Bartonella genomes â mauve_bbone","title":"Mauve backbone of 4 Bartonella genomes â mauve_bbone","text":"result multiple genome alignment 4 Bartonella genomes Mauve","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/mauve_bbone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mauve backbone of 4 Bartonella genomes â mauve_bbone","text":"","code":"data(mauve_bbone)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/mauve_bbone.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mauve backbone of 4 Bartonella genomes â mauve_bbone","text":"mauve_bbone, list two data frame lists, representing regions conserved least 2 genomes: dna_segs list 4 dna_seg objects, containing mauve blocks genome. comparison list 3 comparison objects. bash script obtain file data available extdata folder package. Find location running system.file('extdata/mauve.sh',package = 'genoPlotR'). resulting backbone file can read read_mauve_backbone.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/mauve_bbone.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mauve backbone of 4 Bartonella genomes â mauve_bbone","text":"Mauve: https://darlinglab.org/mauve/mauve.html","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/mauve_bbone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mauve backbone of 4 Bartonella genomes â mauve_bbone","text":"","code":"data(mauve_bbone) plot_gene_map(mauve_bbone$dna_segs, mauve_bbone$comparisons)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/max_by_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter dna_seg features by looking at a maximum within groups â max_by_group","title":"Filter dna_seg features by looking at a maximum within groups â max_by_group","text":"Takes dna_seg list dna_seg objects. groups based group_by, per group takes feature maximum value column given longest.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/max_by_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter dna_seg features by looking at a maximum within groups â max_by_group","text":"","code":"max_by_group(   dna_seg_input,   group_by,   longest = \"length\",   ignore_boundaries = TRUE )"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/max_by_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter dna_seg features by looking at a maximum within groups â max_by_group","text":"dna_seg_input Either single dna_seg list dna_seg objects. group_by character string, representing dna_seg attribute features grouped . longest character string, representing dna_seg attribute. grouping, features taken maximum value column given argument. ignore_boundaries Logical. TRUE, features \"boundaries\" gene_type kept regardless.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/max_by_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter dna_seg features by looking at a maximum within groups â max_by_group","text":"Either single dna_seg object list dna_seg objects, matching input given using dna_seg_input.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/max_by_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter dna_seg features by looking at a maximum within groups â max_by_group","text":"intended take longest transcript per gene, although can used purposes. group_by points column gene IDs, intentionally mimics output primary_transcript.py script OrthoFinder, dna_segs can loaded FASTA files primary_transcript.py used. preserves metadata FASTA files, since primary_transcript.py remove metadata.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/max_by_group.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter dna_seg features by looking at a maximum within groups â max_by_group","text":"Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/max_by_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter dna_seg features by looking at a maximum within groups â max_by_group","text":"","code":"## Prepare dna_seg names1 <- c(\"1A\", \"1B\", \"2A\", \"2B\", \"2C\") genes1 <- c(\"1\", \"1\", \"2\", \"2\", \"2\") starts1 <- c(1, 1, 101, 101, 101) ends1 <- c(30, 60, 160, 130, 160) lengths1 <- abs(starts1 - ends1)+1  ## Make dna_seg dna_seg_raw <- dna_seg(data.frame(name=names1, start=starts1, end=ends1,                                   strand=rep(1, 5), length=lengths1,                                   gene=genes1)) dna_seg_raw #>      name start   end strand length   gene gene_type region_plot    col   fill #>    <char> <num> <num>  <num>  <num> <char>    <char>      <char> <char> <char> #> 1:     1A     1    30      1     30      1    arrows          NA grey20 grey80 #> 2:     1B     1    60      1     60      1    arrows          NA grey20 grey80 #> 3:     2B   101   130      1     30      2    arrows          NA grey20 grey80 #> 4:     2A   101   160      1     60      2    arrows          NA grey20 grey80 #> 5:     2C   101   160      1     60      2    arrows          NA grey20 grey80 #>      lty   lwd   pch   cex #>    <num> <num> <num> <num> #> 1:     1     1     8     1 #> 2:     1     1     8     1 #> 3:     1     1     8     1 #> 4:     1     1     8     1 #> 5:     1     1     8     1  ## Take longest feature per gene name dna_seg_edit <- max_by_group(dna_seg_input = dna_seg_raw, group_by = \"gene\") dna_seg_edit #>      name start   end strand length   gene gene_type region_plot    col   fill #>    <char> <num> <num>  <num>  <num> <char>    <char>      <char> <char> <char> #> 1:     1B     1    60      1     60      1    arrows          NA grey20 grey80 #> 2:     2A   101   160      1     60      2    arrows          NA grey20 grey80 #>      lty   lwd   pch   cex #>    <num> <num> <num> <num> #> 1:     1     1     8     1 #> 2:     1     1     8     1"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/middle.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the middle point of dna_seg features â middle","title":"Find the middle point of dna_seg features â middle","text":"Returns vector containing middle point feature dna_seg object. Useful prepare annotations, example.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/middle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the middle point of dna_seg features â middle","text":"","code":"middle(dna_seg)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/middle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the middle point of dna_seg features â middle","text":"dna_seg dna_seg object.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/middle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the middle point of dna_seg features â middle","text":"numeric vector.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/middle.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find the middle point of dna_seg features â middle","text":"Lionel Guy","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/middle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the middle point of dna_seg features â middle","text":"","code":"## Load data data(barto)  ## Get middles of the first dna_seg mid <- middle(barto$dna_segs[[1]])"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/permute_dna_segs.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder dna_segs or labels to match a tree â permute_dna_segs","title":"Reorder dna_segs or labels to match a tree â permute_dna_segs","text":"Takes list dna_seg objects dna_seg labels reorganizes based given (phylogenetic) tree.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/permute_dna_segs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder dna_segs or labels to match a tree â permute_dna_segs","text":"","code":"permute_dna_segs(   dna_segs,   tree,   exact_match = FALSE,   return_old_labels = FALSE )"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/permute_dna_segs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder dna_segs or labels to match a tree â permute_dna_segs","text":"dna_segs Either character vector containing dna_seg labels, list dna_seg objects. tree (phylogenetic) tree, form phylo phylog object, character string containing file path Newick tree format file. exact_match Logical. TRUE, dna_seg labels need match labels tree exactly. exact_match = FALSE, tree tip labels need contain dna_seg labels match found (e.g. dna_seg label \"seq_1\" match tree tip label \"E_coli_seq_1.fa\"). return_old_labels Logical. TRUE, dna_seg labels returned using original names provided dna_segs argument. relevant exact_match = FALSE, option can cause dna_seg labels changed match tree tip labels.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/permute_dna_segs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder dna_segs or labels to match a tree â permute_dna_segs","text":"list dna_seg objects character vector dna_seg labels, matching input given dna_segs argument. return_old_labels = TRUE, list 2 named elements returned instead (dna_segs, return value , old_labels, character vector original labels now sorted).","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/permute_dna_segs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reorder dna_segs or labels to match a tree â permute_dna_segs","text":"function takes character vector dna_seg labels, either directly, extracting list dna_segs, dna_segs argument. labels queried find matching tree tip labels, sorting match order found tree. exactly 1 match found, dna_seg label updated match tree tip label, unless exact_match = TRUE. multiple matches found, error returned shows offending dna_seg label.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/permute_dna_segs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reorder dna_segs or labels to match a tree â permute_dna_segs","text":"Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/permute_dna_segs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reorder dna_segs or labels to match a tree â permute_dna_segs","text":"","code":"## Generate data seg_labels <- c(\"seq_2\", \"seq_3\", \"seq_1\", \"seq_4\") tree_str <- paste0(\"(seq_1_B_bacilliformis:0.5,\",                    \"(seq_2_B_grahamii:0.1,\",                    \"(seq_3_B_henselae:0.1,\",                    \"seq_4_B_quintana:0.2):0.1):0.1);\") tree <- ade4::newick2phylog(tree_str)  ## Reorder and rename dna_seg labels to match tree seg_labels #> [1] \"seq_2\" \"seq_3\" \"seq_1\" \"seq_4\" seg_labels <- permute_dna_segs(dna_segs = seg_labels, tree = tree) seg_labels #> [1] \"seq_1_B_bacilliformis\" \"seq_2_B_grahamii\"      \"seq_3_B_henselae\"      #> [4] \"seq_4_B_quintana\""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/plot_gene_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot gene and genome maps â plot_gene_map","title":"Plot gene and genome maps â plot_gene_map","text":"plotting function represents linear DNA segments comparisons . plot one line per DNA segment, eventually separated comparisons. addition, tree can plotted left plot, well annotations DNA segment. function based grid package, plots can placed graphics modified.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/plot_gene_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot gene and genome maps â plot_gene_map","text":"","code":"plot_gene_map(   dna_segs,   comparisons = NULL,   tree = NULL,   tree_width = NULL,   tree_branch_labels_cex = NULL,   tree_scale = FALSE,   legend_column = NULL,   legend_labels = NULL,   legend_colors = NULL,   annotations = NULL,   annotation_height = 0.1,   annotation_cex = 0.8,   seg_plots = NULL,   seg_plot_height = 3,   seg_plot_height_unit = \"lines\",   seg_plot_yaxis = 3,   seg_plot_yaxis_cex = scale_cex,   region_size = NULL,   xlims = NULL,   print_xlims = FALSE,   outfile_xlims = NULL,   offsets = NULL,   print_offsets = FALSE,   minimum_gap_size = 0.03,   fixed_gap_length = FALSE,   limit_to_longest_dna_seg = TRUE,   main = NULL,   main_pos = \"centre\",   dna_seg_labels = NULL,   dna_seg_label_cex = 0.9,   dna_seg_label_col = \"black\",   gene_type = NULL,   arrow_head_len = 200,   dna_seg_line = TRUE,   scale = TRUE,   dna_seg_scale = FALSE,   n_scale_ticks = 7,   scale_cex = 0.6,   global_color_scheme = NULL,   color_scheme_column = \"auto\",   color_scheme_colors = \"auto\",   color_scheme_dataset = \"auto\",   gradient_scheme_direction = \"auto\",   alpha_dna_segs = NULL,   alpha_comparisons = NULL,   plot_new = TRUE,   outfile = NULL,   outfile_format = \"pdf\",   outfile_height = \"auto\",   outfile_width = \"auto\",   debug = 0,   verbose = FALSE,   ... )"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/plot_gene_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot gene and genome maps â plot_gene_map","text":"dna_segs list dna_seg objects. Mandatory. comparisons list comparison objects. provided, plotted dna_segs. number comparisons 1 less number dna_segs. tree tree, form phylog object. provided, plotted left. See details. tree_width single numeric, giving width tree area plot, inches. default take 20% total plotting area. tree_branch_labels_cex single numeric, giving size multiplier possible node annotations provided tree (present). tree_scale Logical. TRUE, plots scale tree. legend_column character string, must either \"auto\", refer name column present dna_seg. provided, attempt create plot legend based given column. See details. legend_labels character vector labels display legend. See details. legend_colors character vector colors use legend, legend_labels provided. See details. annotations annotation list annotation objects length dna_segs. provided, plots annotations dna_seg(s). annotation_height single numeric, giving height reserved plotting annotations. comparison, height dna_seg 1. annotation_cex single numeric, giving size multiplier annotations. seg_plots seg_plot list seg_plot objects length dna_segs. provided, plots additional data dna_segs. See seg_plot information examples. seg_plot_height single numeric, giving height seg_plot regions, measured unit provided seg_plot_height_unit. seg_plot_height_unit unit height seg_plot regions. Must valid unit, see grid documentation details. argument set \"null\", height calculated proportion comparison region (.e. 0.5 means seg_plot region half size comparison). seg_plot_yaxis Can NULL, FALSE numeric. first two cases, y-axis drawn seg_plots. numeric, axis drawn approximately number ticks. seg_plot_yaxis_cex single numeric, giving size multiplier seg_plot y-axis. region_size single numeric numeric vector length dna_segs, providing neighbourhood size use creating regional plots. Ignored xlims provided. See details. xlims list many elements dna_segs, NULL. NULL, whole DNA segment represented. list provided, element list must numeric vector, representing pairs left right limits subsegment. See details. print_xlims Logical. TRUE, prints xlims (start end coordinates subsegment dna_seg). outfile_xlims file path. provided, xlims (start end coordinates subsegment dna_seg) written file. offsets list numeric vector length dna_segs, NULL, giving distance subsegments. element list must length number subsegments (see xlims details). offsets NULL, gaps optimized minimize comparison length. See details. print_offsets Logical. TRUE, prints offsets, gap lengths subsegments dna_seg. minimum_gap_size single numeric, giving minimum gap size subsegments, proportional plot region (e.g. 0.03 means width gaps least 3% overall plot width). fixed_gap_length Logical. TRUE, gaps subsegments fixed length instead optimizing gap size minimize comparison length. limit_to_longest_dna_seg Logical. TRUE, restricts plot width length longest dna_seg. FALSE, sizes shorter dna_segs can extended better fit comparisons, can lead extremely wide plots. main character string gives main title plot. main_pos character string gives position plot title. Must one \"centre\", \"left\", \"right\". dna_seg_labels character vector length dna_segs, NULL. NULL, names dna_segs determined automatically possible (e.g. dna_segs named list). Labels optional, must provided findable tree provided. dna_seg_label_cex single numeric, giving size multiplier dna_seg labels. dna_seg_label_col character vector, providing color(s) dna_seg labels. Must provide either 1 color many dna_segs. gene_type character string, determines gene type (.e. shape) features, overriding gene_type column dna_segs. See gene_types. arrow_head_len single numeric, giving length arrow heads \"arrows\" \"headless_arrows\" gene types. maximum, arrow heads extend half total length. Can set Inf force behavior. dna_seg_line vector, either logical character, length either 1 amount dna_segs. Determines whether line drawn middle dna_seg, , color. See details. scale Logical. TRUE, scale displayed plot. dna_seg_scale single logical determines whether scale drawn dna_seg, logical vector length dna_segs, making choice dna_seg separately. n_scale_ticks single numeric, giving approximate number ticks display longest segment. scale_cex single numeric, giving size multiplier scale labels. global_color_scheme character string, adding color scheme dna_segs / comparisons. Must one : \"uniform\", \"gradient\", \"sequential\". See details. color_scheme_column character string, must either \"auto\", refer name column. Depending global_color_scheme, colors determined based values found column. See details. color_scheme_colors color scheme. global_color_scheme = \"gradient\", must one : \"red_blue\", \"blue_red\", \"gray\". global_color_scheme = \"uniform\", can palette vector colors use. See details. color_scheme_dataset character string, choice data apply color scheme . Must one : \"auto\", \"dna_segs\", \"comparisons\". \"auto\", color scheme applied , unless possible apply comparisons. applies global_color_scheme \"uniform\" \"sequential\". gradient_scheme_direction character string, indicating direction scale used gradient color scheme. Must one : \"increasing\", \"decreasing\", \"auto\". See details. alpha_dna_segs single numeric value 0 1, NULL. Determines transparency applied dna_segs, 0 fully transparent, 1 fully opaque. overrides existing alpha values. NULL, change made. alpha_comparisons single numeric value 0 1, NULL. Determines transparency applied comparisons, 0 fully transparent, 1 fully opaque. overrides existing alpha values. NULL, change made. plot_new Logical. TRUE, uses grid.newpage() produce new plot. FALSE, integrates current plot. outfile file path. provided, plot saved file instead regular output. outfile_format character string, giving file format saved plot outfile. Must one : \"pdf\", \"png\", \"bmp\". outfile_height single numeric, giving height plot outfile inches, \"auto\". \"auto\", appropriate height approximated automatically. outfile_width single numeric, giving width plot outfile inches, \"auto\". \"auto\", appropriate width approximated automatically. debug numeric. larger 0, number elements plotted dna_seg comparison. verbose Logical. TRUE, reports timing various steps. ... arguments passed user-defined graphical functions.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/plot_gene_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot gene and genome maps â plot_gene_map","text":"lattice graphic plotted current device. function returns nothing (invisible NULL).","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/plot_gene_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot gene and genome maps â plot_gene_map","text":"One line plotted per dna_seg. shape dna_seg elements determined gene_type column, unless explicitly overwritten using gene_type argument. See gene_types details.  provided, comparisons placed dna_segs, annotations displayed dna_seg, accompanying data dna_seg can plotted using seg_plots (see seg_plot details). phylogenetic tree (phylog object package ade4) can drawn left plot (see newick2phylog). tree need ordered way dna_seg_labels, permutation tree order exist. tree large, number permutations can become large, causing function stop (>100000 permutations). solution provide dna_segs ordered manner tree labels, vice-versa (see permute_dna_segs). (experimental) support branch annotations. given Newick tree, directly parenthesis closing node. can characters integers, far newick2phylog support . character labels. Tags ignored start \"\", trimmed start \"X\". two ways draw legend using function: first customizable legend, can drawn providing vector labels legend_labels argument vector colors link labels legend_colors argument. way legend_column argument, must \"auto\", name column present dna_seg. \"auto\", column use column used \"uniform\" color scheme applied, gene column present, finally name column neither previous options possible. legend take possible values chosen column, alongside color first instance can find possible value. legend_labels provided, values found character vector considered legend. xlims allow user plot subsegments dna_seg. xlims consists list composed many numeric vectors dna_segs. numeric vectors give pairs left right borders, gives direction. example, c(1,2,6,4) plot two subsegments single dna_seg, first subsegment go 1 2 plotted left right second subsegment go 4 6, plotted right left. -Inf Inf values accepted. NULL values result plotting whole segment. Alternatively, region_size argument can used make regional plots automated fashion. dna_seg features value \"TRUE\" region_plot column plotted become center subsegment. Portions dna_seg left right features included size portions determined region_size. overlapping subsegments merged, features marked boundaries end subsegments early (e.g. chromosome contig boundaries). Functions like edit_dna_segs can used alter features focus altering region_plot column, dna_segs can altered manner data.table objects well, see data.table package details. offsets allows user define placement subsegments (defined xlims region_size).  offsetsis list, element represents 1dna_segand must numeric vector giving gap sizes subsegments thatdna_seg, including first one (distance left border plot first subsegment). element list must length number subsegments (see xlimsand details). Ifoffsetsis numeric vector, numbers give distance first subsegment eachdna_seg, others gaps remain static.  offsetsis NULL, gaps optimized minimize comparison` length. dna_seg_line determines whether line drawn dna_seg, , color. value provided, value repeated dna_seg. dna_seg_line logical vector, TRUE default drawing black line dna_seg, FALSE result line. dna_seg_line character vector, \"FALSE\" still result line, value interpreted color choice line. global_color_scheme applies color scheme dna_segs /comparisons, overriding colors present objects. 3 options: \"uniform\",\"gradient\", \"sequential\". color schemes can customized using color scheme arguments. \"uniform\": Applies different color possible value given column (specified color_scheme_column) dna_segs / comparisons (specified color_scheme_dataset). values features shown plot included. color_scheme_column must column present dna_segs (comparisons skipped present ). color_scheme_column = \"auto\", determine column use, prioritizing column names related orthology groups, followed gene column finally gene_type column. choice colors dependent color_scheme_colors argument. can color palette, character vector colors recognizable R. color_scheme_colors = \"auto\", palette chosen based amount distinct colors required. See uniform_color_scheme function used apply color scheme. \"gradient\": Applies gradient color scheme comparisons based numerical column (specified color_scheme_column) present comparisons. gradient dependent color_scheme_colors, can \"red_blue\", \"blue_red\", \"gray\" (\"auto\" default \"red_blue\"). color_scheme_column = \"auto\", determine column use, prioritizing column names present comparisons parsed BLAST results. direction gradient dependent gradient_scheme_direction, \"increasing\" variables represent relationship increases numbers go (e.g. bit score, alignment length), \"decreasing\" variables represent relationship decreases numbers go (e.g. e-value, gaps, mismatches), \"auto\", attempt determine automatically depending chosen column. See gradient_color_scheme function used apply color scheme. \"sequential\": Transfers colors already present dna_segs comparisons copies linked features. Features linked shared identifiers (specified color_scheme_column) comparisons connect . See sequential_color_scheme function used apply color scheme.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/plot_gene_map.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot gene and genome maps â plot_gene_map","text":"Lionel Guy <lionel.guy@ebc.uu.se>, Jens Roat Kultima. Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/plot_gene_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot gene and genome maps â plot_gene_map","text":"","code":"old.par <- par(no.readonly = TRUE) data(\"three_genes\") dna_segs <- three_genes$dna_segs comparisons <- three_genes$comparisons  ## Segments only plot_gene_map(dna_segs = dna_segs)    ## With comparisons plot_gene_map(dna_segs = dna_segs, comparisons = comparisons)    ## Tree names <- c(\"A_aaa\", \"B_bbb\", \"C_ccc\") names(dna_segs) <- names tree <- ade4::newick2phylog(\"(((A_aaa:4.2,B_bbb:3.9):3.1,C_ccc:7.3):1);\") plot_gene_map(dna_segs = dna_segs, comparisons = comparisons,               tree = tree)  ## Increasing tree width plot_gene_map(dna_segs = dna_segs, comparisons = comparisons,               tree = tree, tree_width = 3)  ## Annotations on the tree tree2 <- ade4::newick2phylog(\"(((A_aaa:4.2,B_bbb:3.9)97:3.1,C_ccc:7.3)78:1);\") plot_gene_map(dna_segs = dna_segs, comparisons = comparisons,               tree = tree2, tree_width = 3)  plot_gene_map(dna_segs = dna_segs, comparisons = comparisons,               tree = tree2, tree_width = 3, tree_branch_labels_cex = 0.6)  plot_gene_map(dna_segs = dna_segs, comparisons = comparisons,               tree = tree2, tree_width = 3, tree_branch_labels_cex = 0)   ## Annotation ## Calculating middle positions mid_pos <- middle(dna_segs[[1]])  # Create first annotation annot1 <- annotation(x1 = mid_pos, text = dna_segs[[1]]$name) plot_gene_map(dna_segs = dna_segs, comparisons = comparisons,               annotations = annot1)   ## Exploring options annot2 <- annotation(x1 = c(mid_pos[1], dna_segs[[1]]$end[2]),                      x2 = c(NA, dna_segs[[1]]$end[3]),                      text = c(dna_segs[[1]]$name[1], \"region1\"),                      rot = c(30, 0), col = c(\"grey\", \"black\")) plot_gene_map(dna_segs = dna_segs, comparisons = comparisons,               annotations = annot2, annotation_height = 1.3)   ## xlims ## Just reversing 1 segment plot_gene_map(dna_segs, comparisons,               xlims = list(NULL, NULL, c(Inf,-Inf)),               dna_seg_scale = TRUE)  ## Removing one gene plot_gene_map(dna_segs, comparisons,               xlims = list(NULL, NULL, c(-Inf,2800)),               dna_seg_scale = TRUE)   ## offsets offsets <- c(0, 0, 0)   plot_gene_map(dna_segs = dna_segs, comparisons = comparisons,               offsets = offsets)  offsets <- c(200, 400, 0)   plot_gene_map(dna_segs = dna_segs, comparisons = comparisons,               offsets = offsets)   ## main plot_gene_map(dna_segs = dna_segs, comparisons = comparisons,               main = \"Comparison of A, B and C\")  plot_gene_map(dna_segs = dna_segs, comparisons = comparisons,               main = \"Comparison of A, B and C\", main_pos = \"left\")   ## dna_seg_labels plot_gene_map(dna_segs = dna_segs, comparisons = comparisons,               dna_seg_labels = c(\"Huey\", \"Dewey\", \"Louie\"))   ## dna_seg_labels size plot_gene_map(dna_segs = dna_segs, comparisons = comparisons,               dna_seg_labels = c(\"Huey\", \"Dewey\", \"Louie\"),               dna_seg_label_cex = 2)   ## dna_seg_line plot_gene_map(dna_segs = dna_segs, comparisons = comparisons,               dna_seg_line = c(\"FALSE\", \"red\", grey(0.6)))   ## gene_type plot_gene_map(dna_segs = dna_segs, comparisons = comparisons,               gene_type = \"side_blocks\")   ## ## From here on, using a bigger dataset from a 4-genome comparison ## data(\"barto\") ## Adding a tree tree <- ade4::newick2phylog(\"(BB:2.5,(BG:1.8,(BH:1,BQ:0.8):1.9):3);\") ## Showing only subsegments xlims1 <- list(c(1380000, 1445000),                c(10000, 83000),                c(15000, 98000),                c(5000, 82000)) ## Reducing dataset size for speed purpose for (i in 1:length(barto$dna_segs)) {   barto$dna_segs[[i]] <- trim(barto$dna_segs[[i]], xlim = xlims1[[i]])   if (i < length(barto$dna_segs)) {     barto$comparisons[[i]] <- trim(barto$comparisons[[i]],                                    xlim1 = xlims1[[i]], xlims1[[i+1]])   } } plot_gene_map(barto$dna_segs, barto$comparisons, tree = tree,               xlims = xlims1,               dna_seg_scale = TRUE)  ## Showing several subsegments per genome xlims2 <- list(c(1445000, 1415000, 1380000, 1412000),                c(  10000,   45000,   50000,   83000, 90000, 120000),                c(  15000,   36000,   90000,  120000, 74000,  98000),                c(   5000,   82000)) plot_gene_map(barto$dna_segs, barto$comparisons, tree = tree,               xlims = xlims2,               dna_seg_scale = TRUE)  ## Hand-made offsets: size of all gaps offsets2 <- list(c(10000, 10000),                  c(2000, 2000, 2000),                  c(10000, 5000, 2000),                  c(10000)) plot_gene_map(barto$dna_segs, barto$comparisons, tree = tree,               xlims = xlims2,               offsets = offsets2,               dna_seg_scale = TRUE)   ## dna_seg_scale, global_color_scheme, size, number, color of dna_seg_scale, ## size of dna_seg_scale labels plot_gene_map(barto$dna_segs, barto$comparisons, tree = tree,               xlims = xlims2,               dna_seg_scale = c(TRUE, FALSE, FALSE, TRUE),               scale = FALSE,               dna_seg_label_cex = 1.4,               dna_seg_label_col = c(\"black\", \"grey\", \"blue\", \"red\"),               global_color_scheme = \"gradient\",               alpha_comparisons = 0.5,               n_scale_ticks = 3, scale_cex = 1)   ## ## Exploring and modifying a previously plotted gene map plot ## plot_gene_map(barto$dna_segs, barto$comparisons, tree = tree,               xlims = xlims2, offsets = offsets2, dna_seg_scale = TRUE) ## View viewports current.vpTree() #> viewport[ROOT]->(viewport[oma]->(viewport[oma_layout]->(viewport[frame]->(viewport[scale], viewport[tree_outer]->(viewport[tree]->(viewport[treeFrame]->(viewport[GRID.VP.28]->(viewport[GRID.VP.29]->(viewport[tree.branches]), viewport[GRID.VP.30]->(viewport[tree.labels]))))), viewport[plotarea_outer]->(viewport[plotarea]->(viewport[map]->(viewport[comparison.1], viewport[comparison.2], viewport[comparison.3], viewport[seg_plot.1], viewport[seg_plot.2], viewport[seg_plot.3], viewport[seg_plot.4], viewport[scale_and_dna_seg.1]->(viewport[dna_seg_scale.1.1], viewport[dna_seg_scale.1.2], viewport[dna_seg.1.1], viewport[gap.1.2], viewport[dna_seg.1.2]), viewport[scale_and_dna_seg.2]->(viewport[gap.2.2], viewport[gap.2.3], viewport[dna_seg_scale.2.1], viewport[dna_seg_scale.2.2], viewport[dna_seg_scale.2.3], viewport[dna_seg.2.1], viewport[dna_seg.2.2], viewport[dna_seg.2.3]), viewport[scale_and_dna_seg.3]->(viewport[gap.3.2], viewport[gap.3.3], viewport[dna_seg_scale.3.1], viewport[dna_seg_scale.3.2], viewport[dna_seg_scale.3.3], viewport[dna_seg.3.1], viewport[dna_seg.3.2], viewport[dna_seg.3.3]), viewport[scale_and_dna_seg.4]->(viewport[dna_seg_scale.4.1], viewport[dna_seg.4.1]))))))))  ## Go down to one of the viewports, add an xaxis, go back up to root viewport downViewport(\"dna_seg_scale.3.2\") grid.rect() upViewport(0)  ## Get all the names of the objects grobNames <- getNames() grobNames #>   [1] \"scale.lines\"                    \"scale.text\"                     #>   [3] \"treeFrameGrob\"                  \"comp.1.25040-21726_19088-15776\" #>   [5] \"comp.1.25558-25124_26518-26949\" \"comp.1.19541-18419_12925-11803\" #>   [7] \"comp.1.21598-19601_15459-13476\" \"comp.1.35558-33382_29873-27712\" #>   [9] \"comp.1.12532-10305_4881-2940\"   \"comp.1.40000-36942_36159-32854\" #>  [11] \"comp.1.15624-14302_7982-6657\"   \"comp.1.74966-76597_48067-46436\" #>  [13] \"comp.1.76896-82000_44115-40880\" \"comp.1.55199-57926_73880-71591\" #>  [15] \"comp.1.60571-62403_66630-64777\" \"comp.1.63761-66025_61723-59478\" #>  [17] \"comp.1.58161-59998_68956-67139\" \"comp.2.26535-26976_22913-22468\" #>  [19] \"comp.2.15789-19101_19096-22411\" \"comp.2.11108-12916_14605-16412\" #>  [21] \"comp.2.19707-26434_29669-22932\" \"comp.2.2940-7994_10000-11958\"   #>  [23] \"comp.2.70193-73880_75446-79414\" \"comp.2.67043-69624_72300-74913\" #>  [25] \"comp.2.59441-63139_68000-70027\" \"comp.2.64766-66753_70228-72220\" #>  [27] \"comp.3.10000-11958_14888-20248\" \"comp.3.18506-29685_26132-37312\" #>  [29] \"comp.3.14605-17097_23224-25708\" \"comp.3.12109-13758_20329-21989\" #>  [31] \"comp.3.84000-84067_73013-86844\" \"comp.3.84000-85263_82290-87000\" #>  [33] \"comp.3.70205-84067_73013-86844\" \"comp.3.79526-85263_82290-87000\" #>  [35] \"comp.3.68000-70083_69259-72991\" \"dna_seg_scale.1.1.lines\"        #>  [37] \"dna_seg_scale.1.1.labels\"       \"dna_seg_line.1.1\"               #>  [39] \"seg.1.folC\"                     \"seg.1.BARBAKC583_1353\"          #>  [41] \"seg.1.BARBAKC583_1354\"          \"seg.1.BARBAKC583_1355\"          #>  [43] \"seg.1.addB\"                     \"seg.1.addA\"                     #>  [45] \"seg.1.trx\"                      \"seg.1.prfC\"                     #>  [47] \"seg.1.lysK\"                     \"seg.1.argG\"                     #>  [49] \"seg.1.BARBAKC583_1363\"          \"seg.1.BARBAKC583_1362\"          #>  [51] \"seg.1.BARBAKC583_1364\"          \"seg.1.ptsN\"                     #>  [53] \"seg.1.BARBAKC583_1366\"          \"seg.1.BARBAKC583_1367\"          #>  [55] \"seg.1.BARBAKC583_1368\"          \"seg.1.BARBAKC583_1369\"          #>  [57] \"seg.1.BARBAKC583_1370\"          \"seg.1.ihfB\"                     #>  [59] \"seg.1.BARBAKC583_1372\"          \"seg.1.BARBAKC583_1373\"          #>  [61] \"seg.1.BARBAKC583_1374\"          \"seg.1.lspA\"                     #>  [63] \"dna_seg_scale.1.2.lines\"        \"dna_seg_scale.1.2.labels\"       #>  [65] \"dna_seg_line.1.2\"               \"seg.1.dnaJ\"                     #>  [67] \"seg.1.dnaK\"                     \"seg.1.BARBAKC583_1329\"          #>  [69] \"seg.1.BARBAKC583_1330\"          \"seg.1.BARBAKC583_1331\"          #>  [71] \"seg.1.bvrR\"                     \"seg.1.bvrS\"                     #>  [73] \"seg.1.grpE\"                     \"seg.1.rdgB\"                     #>  [75] \"seg.1.BARBAKC583_1337\"          \"seg.1.dapE\"                     #>  [77] \"seg.1.BARBAKC583_1339\"          \"seg.1.BARBAKC583_1340\"          #>  [79] \"seg.1.infC\"                     \"seg.1.BARBAKC583_1342\"          #>  [81] \"seg.1.BARBAKC583_1343\"          \"seg.1.BARBAKC583_1344\"          #>  [83] \"seg.1.BARBAKC583_1345\"          \"seg.1.gyrB\"                     #>  [85] \"seg.1.ubiE\"                     \"seg.1.ubiB\"                     #>  [87] \"gap.1.2\"                        \"dna_seg_scale.2.1.lines\"        #>  [89] \"dna_seg_scale.2.1.labels\"       \"dna_seg_line.2.1\"               #>  [91] \"seg.2.Bgr_00100\"                \"seg.2.Bgr_00110\"                #>  [93] \"seg.2.Bgr_00120\"                \"seg.2.Bgr_00130\"                #>  [95] \"seg.2.Bgr_00140\"                \"seg.2.Bgr_00150\"                #>  [97] \"seg.2.Bgr_00160\"                \"seg.2.ptsN\"                     #>  [99] \"seg.2.Bgr_00180\"                \"seg.2.Bgr_00190\"                #> [101] \"seg.2.Bgr_00210\"                \"seg.2.argG\"                     #> [103] \"seg.2.lysS\"                     \"seg.2.prfC\"                     #> [105] \"seg.2.addB\"                     \"seg.2.addA\"                     #> [107] \"seg.2.trxA\"                     \"seg.2.Bgr_00280\"                #> [109] \"seg.2.Bgr_00290\"                \"seg.2.ahcY\"                     #> [111] \"seg.2.Bgr_00310\"                \"seg.2.folC\"                     #> [113] \"seg.2.accD\"                     \"seg.2.Bgr_00340\"                #> [115] \"dna_seg_scale.2.2.lines\"        \"dna_seg_scale.2.2.labels\"       #> [117] \"dna_seg_line.2.2\"               \"seg.2.gyrB\"                     #> [119] \"seg.2.Bgr_00400\"                \"seg.2.Bgr_00410\"                #> [121] \"seg.2.Bgr_00420\"                \"seg.2.Bgr_00430\"                #> [123] \"seg.2.msbA\"                     \"seg.2.Bgr_00480\"                #> [125] \"seg.2.Bgr_00490\"                \"seg.2.dapE\"                     #> [127] \"seg.2.hemN\"                     \"seg.2.Bgr_00530\"                #> [129] \"seg.2.hrcA\"                     \"seg.2.grpE\"                     #> [131] \"seg.2.Bgr_00560\"                \"seg.2.ptsH\"                     #> [133] \"seg.2.Bgr_00580\"                \"seg.2.Bgr_00590\"                #> [135] \"seg.2.batS\"                     \"gap.2.2\"                        #> [137] \"dna_seg_scale.2.3.lines\"        \"dna_seg_scale.2.3.labels\"       #> [139] \"dna_seg_line.2.3\"               \"gap.2.3\"                        #> [141] \"dna_seg_scale.3.1.lines\"        \"dna_seg_scale.3.1.labels\"       #> [143] \"dna_seg_line.3.1\"               \"seg.3.BH00160\"                  #> [145] \"seg.3.BH00170\"                  \"seg.3.ptsN\"                     #> [147] \"seg.3.BH00190\"                  \"seg.3.BH00200\"                  #> [149] \"seg.3.BH00210\"                  \"seg.3.lysK\"                     #> [151] \"seg.3.prfC\"                     \"seg.3.trxA\"                     #> [153] \"seg.3.addA\"                     \"seg.3.BH00280\"                  #> [155] \"dna_seg_scale.3.2.lines\"        \"dna_seg_scale.3.2.labels\"       #> [157] \"dna_seg_line.3.2\"               \"seg.3.argB\"                     #> [159] \"seg.3.BH00700\"                  \"gap.3.2\"                        #> [161] \"dna_seg_scale.3.3.lines\"        \"dna_seg_scale.3.3.labels\"       #> [163] \"dna_seg_line.3.3\"               \"seg.3.dapE\"                     #> [165] \"seg.3.hemN\"                     \"seg.3.BH00540\"                  #> [167] \"seg.3.hrcA\"                     \"seg.3.grpE\"                     #> [169] \"seg.3.BH00570\"                  \"seg.3.ptsH\"                     #> [171] \"seg.3.BH00590\"                  \"seg.3.hprK\"                     #> [173] \"seg.3.batS\"                     \"seg.3.batR\"                     #> [175] \"seg.3.BH00630\"                  \"seg.3.BH00640\"                  #> [177] \"seg.3.dnaK\"                     \"seg.3.dnaJ1\"                    #> [179] \"seg.3.argB\"                     \"seg.3.BH00700\"                  #> [181] \"gap.3.3\"                        \"dna_seg_scale.4.1.lines\"        #> [183] \"dna_seg_scale.4.1.labels\"       \"dna_seg_line.4.1\"               #> [185] \"seg.4.BQ00070\"                  \"seg.4.BQ00080\"                  #> [187] \"seg.4.lspA\"                     \"seg.4.BQ00100\"                  #> [189] \"seg.4.BQ00120\"                  \"seg.4.ihfB\"                     #> [191] \"seg.4.BQ00140\"                  \"seg.4.BQ00150\"                  #> [193] \"seg.4.BQ00160\"                  \"seg.4.ptsN\"                     #> [195] \"seg.4.BQ00180\"                  \"seg.4.BQ00190\"                  #> [197] \"seg.4.lysK\"                     \"seg.4.prfC\"                     #> [199] \"seg.4.trxA\"                     \"seg.4.addA\"                     #> [201] \"seg.4.BQ00260\"                  \"seg.4.BQ00270\"                  #> [203] \"seg.4.BQ00280\"                  \"seg.4.ahcY\"                     #> [205] \"seg.4.BQ00300\"                  \"seg.4.folC\"                     #> [207] \"seg.4.accD\"                     \"seg.4.dfp\"                      #> [209] \"seg.4.aarF\"                     \"seg.4.ubiE\"                     #> [211] \"seg.4.gyrB\"                     \"seg.4.BQ00380\"                  #> [213] \"seg.4.comM\"                     \"seg.4.BQ00400\"                  #> [215] \"seg.4.BQ00410\"                  \"seg.4.msbA\"                     #> [217] \"seg.4.infC\"                     \"seg.4.BQ00440\"                  #> [219] \"seg.4.BQ00450\"                  \"seg.4.dapE\"                     #> [221] \"seg.4.hemN\"                     \"seg.4.BQ00480\"                  #> [223] \"seg.4.hrcA\"                     \"seg.4.grpE\"                     #> [225] \"seg.4.BQ00510\"                  \"seg.4.ptsH\"                     #> [227] \"seg.4.BQ00530\"                  \"seg.4.BQ00540\"                  #> [229] \"seg.4.BQ00550\"                  \"seg.4.BQ00560\"                  #> [231] \"seg.4.BQ00570\"                  \"seg.4.BQ00580\"                  #> [233] \"seg.4.dnaK\"                     \"GRID.rect.53\"                   ## Change the color of the scale line grid.edit(\"scale.lines\", gp = gpar(col = \"grey\"))  ## Remove first dna_seg_lines grid.remove(\"dna_seg_line.1.1\")   ## ## Plot genoPlotR logo ## col_vec <- c(\"#B2182B\", \"#D6604D\", \"#F4A582\", \"#FDDBC7\",              \"#D1E5F0\", \"#92C5DE\", \"#4393C3\", \"#2166AC\") cex <- 2.3 ## First segment  start1 <- c(150, 390, 570, 270, 530) end1   <- c(  1, 490, 690, 270, 530) ## Second segment start2 <- c(100, 520, 550, 330) end2   <- c(240, 420, 650, 330) ## dna_segs ds1 <- as.dna_seg(data.frame(name = c(\"\", \"\", \"\", \"geno\", \"R\"),                              start = start1, end = end1, strand = rep(1, 5),                              fill = col_vec[c(2, 6, 1, 8, 9)]                              )) ds_genoR <- edit_dna_segs(ds1, ids = data.frame(id = c(\"geno\", \"R\"),                                                  cex = c(2.3, 2.3),                                                 gene_type = c(\"text\", \"text\")                                                 )) ds2 <- as.dna_seg(data.frame(name = c(\"\", \"\", \"\", \"Plot\"),                              start = start2, end = end2,                              strand = rep(1, 4),                              fill = col_vec[c(5, 3, 7, 1)]                              )) ds_Plot <- edit_dna_segs(ds2, ids = data.frame(id = \"Plot\",                                                 cex = 2.3,                                                gene_type = \"text\"                                                )) ## comparison c1 <- as.comparison(data.frame(start1 = start1[1:3], end1 = end1[1:3],                                start2 = start2[1:3], end2 = end2[1:3],                                fill = grey(c(0.6, 0.8, 0.5)))) ## Generate genoPlotR logo if (FALSE) {   pdf(\"logo.pdf\", h = 0.7, w = 3) } par(fin = c(0.7, 3)) plot_gene_map(dna_segs = list(ds_genoR, ds_Plot),               comparisons = list(c1), scale = FALSE, dna_seg_scale = FALSE,               dna_seg_line = grey(0.7), offsets = c(-20,160))  if (FALSE) {   dev.off() } par(old.par)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/print_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Print out a comparison â print_comparison","title":"Print out a comparison â print_comparison","text":"Converts objects data.table object prints ","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/print_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print out a comparison â print_comparison","text":"","code":"print_comparison(comparison)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/print_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print out a comparison â print_comparison","text":"comparison comparison object object can printed data.table object without conversions.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/print_comparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print out a comparison â print_comparison","text":"data.table object.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/print_comparison.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print out a comparison â print_comparison","text":"object provided printed data.table object without explicitly converting . , function returns data.table object, comparison. function written avoid potential errors, using generic print function comparison object can cause error print.comparison method testthat package loaded. Outside situation, printing comparison object normal function properly.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/print_comparison.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print out a comparison â print_comparison","text":"Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/print_comparison.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print out a comparison â print_comparison","text":"","code":"## Get some values starts1 <- c(2, 1000, 1050) ends1 <- c(600, 800, 1345) starts2 <- c(50, 800, 1200) ends2 <- c(900, 1100, 1322)  ## From a data.frame comparison1 <- as.comparison(data.frame(start1 = starts1, end1 = ends1,                                         start2 = starts2, end2 = ends2)) print_comparison(comparison1) #>    start1  end1 start2  end2 direction #>     <num> <num>  <num> <num>     <num> #> 1:      2   600     50   900         1 #> 2:   1000   800    800  1100        -1 #> 3:   1050  1345   1200  1322         1  ## Printing out a comparison like this can occasionally throw an error: if (FALSE) { comparison1 print(comparison1)} ## This can happen when print.comparison is loaded from the testthat package ## To avoid this, use print_comparison as shown above"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/range.html","id":null,"dir":"Reference","previous_headings":"","what":"Range calculation â range","title":"Range calculation â range","text":"Calculate range dna_seg, comparison annotation objects.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Range calculation â range","text":"","code":"# S3 method for annotation range(x, ...)  # S3 method for comparison range(x, overall = TRUE, ...)  # S3 method for dna_seg range(x, ...)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Range calculation â range","text":"x object calculate range . ... Unused. overall Used x comparison object, logical. FALSE, calculate range side separately instead calculating overall range x.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Range calculation â range","text":"numeric length 2, unless x comparison object overall FALSE, case data.frame object two rows two named columns, xlim1 xlim2","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/range.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Range calculation â range","text":"Lionel Guy","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Range calculation â range","text":"","code":"## Create dna_segs and comparison df1 <- data.frame(name = c(\"feat1\", \"feat2\", \"feat3\"),                   start = c(2, 1000, 1050),                   end = c(600, 800, 1345),                   strand = c(-1, -1, 1)) df2 <- data.frame(name = c(\"feat1\", \"feat2\", \"feat3\"),                   start = c(50, 800, 1200),                   end = c(900, 1100, 1322),                   strand = c(-1, 1, 1)) dna_seg1 <- dna_seg(df1) dna_seg2 <- dna_seg(df2) df3 <- data.frame(start1 = dna_seg1$start,                   end1 = dna_seg1$end,                   start2 = dna_seg2$start,                   end2 = dna_seg2$end) comparison1 <- comparison(df3)  ## Range calculation range(dna_seg1) #> [1]    2 1345 range(comparison1) #> [1]    2 1345 range(comparison1, overall = FALSE) #>   xlim1 xlim2 #> 1     2    50 #> 2  1345  1322"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating comparisons between genomic sequences from files â read_comparison","title":"Creating comparisons between genomic sequences from files â read_comparison","text":"Functions parse comparison objects tabular data BLAST output.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating comparisons between genomic sequences from files â read_comparison","text":"","code":"read_comparison_from_file(file, fileType, ...)  read_comparison_from_files(files, fileType, seg_labels = NULL, ...)  read_comparison_from_blast(   file,   sort_by = NULL,   filt_high_evalue = NULL,   filt_low_per_id = NULL,   filt_length = NULL,   color_scheme = NULL,   reverse = 0 )  read_comparison_from_tab(file, header = TRUE, filt_length = NULL, reverse = 0)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating comparisons between genomic sequences from files â read_comparison","text":"file character string containing file path, file connection. fileType character string containing file format parse. Must one : \"blast\", \"tab\". ... arguments pass read_comparison_from_blast read_comparison_from_tab, see arguments . files list character vector containing file paths. Supports wildcard expansion (e.g. *.txt). seg_labels character vector containing dna_seg labels. provided, function search file names match dna_seg labels. example, seg_labels = c(\"seg1\", \"seg2\", \"seg3\"), look \"seg1_seg2\" \"seg2_seg3\" among file names provided files argument, parse files, ignore files provided. sort_by character string containing name column sort . Must numeric column. filt_high_evalue numerical, filters comparisons e-value higher value (unfiltered left NULL). filt_low_per_id numerical, filters comparisons percentage identity lower value (unfiltered left NULL). filt_length numerical, filters comparisons alignments shorter value (unfiltered left NULL). color_scheme color scheme apply. Possible values include grey, red_blue, NULL (applies color scheme). See gradient_color_scheme details. reverse provided, comparison reversed. reverse = 1, first side reversed. reverse = 2, second side reversed. reverse < 1, side reversed. reverse > 2, sides reversed. header Logical. TRUE, first line parsed header containing column names.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_comparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating comparisons between genomic sequences from files â read_comparison","text":"list comparison objects read_comparison_from_files, single comparison object otherwise.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_comparison.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creating comparisons between genomic sequences from files â read_comparison","text":"make comparisons tabular files, columns files must include start1, end1, start2, end2. header specified, columns expected order, optional fifth column parsed color comparison col column. Additional columns can included regardless whether header specified. BLAST output must provided default tabular format (-outfmt 6), contains following columns order: qseqid, sseqid, pident, length, mismatch, gapopen, qstart, qend, sstart, send, evalue, bitscore. resulting comparison object contain columns names: name1, name2, per_id, aln_len, mism, gaps, start1, start2,end1, end2, e_value, bit_score.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_comparison.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creating comparisons between genomic sequences from files â read_comparison","text":"Lionel Guy, Jens Roat Kultima, Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_comparison.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating comparisons between genomic sequences from files â read_comparison","text":"","code":"## Read comparison from tabular data tab_file <- system.file('extdata/comparison2.tab', package = 'genoPlotR') tab_comp <- read_comparison_from_tab(tab_file) data.frame(tab_comp) #>   start1 end1 start2 end2 direction #> 1     50  500   1899 2034         1 #> 2    800 1100   2732 2508        -1  ## Load dna_segs data(barto) bh <- barto$dna_segs[[3]] bq <- barto$dna_segs[[4]]  ## Read comparison from BLAST output blast <- system.file('extdata/BH_vs_BQ.blastn.tab', package = 'genoPlotR') blast_comp <- read_comparison_from_blast(blast, color_scheme = \"red_blue\")  ## Plot plot_gene_map(dna_segs = list(BH = bh, BQ = bq),               comparisons = list(blast_comp),               xlims = list(c(1,50000), c(1, 50000)))"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_dna_seg.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating dna_segs from files â read_dna_seg","title":"Creating dna_segs from files â read_dna_seg","text":"Functions parse dna_seg objects different file formats. Support included following file formats: GenBank, EMBL, ptt, FASTA, tabular data.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_dna_seg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating dna_segs from files â read_dna_seg","text":"","code":"read_dna_seg_from_file(   file,   tagsToParse = c(\"CDS\"),   fileType = \"detect\",   meta_lines = 2,   gene_type = \"auto\",   header = TRUE,   extra_fields = NULL,   boundariesToParse = NULL,   read_sequence = FALSE,   verbose = FALSE,   ... )  read_dna_seg_from_files(   files,   tagsToParse = c(\"CDS\"),   fileType = \"detect\",   meta_lines = 2,   gene_type = \"auto\",   header = TRUE,   extra_fields = NULL,   boundariesToParse = NULL,   read_sequence = FALSE,   verbose = FALSE,   ... )  read_dna_seg_from_embl(   file,   tagsToParse = c(\"CDS\"),   boundariesToParse = NULL,   extra_fields = NULL,   read_sequence = FALSE,   gene_type = \"auto\",   verbose = FALSE,   ... )  read_dna_seg_from_genbank(   file,   tagsToParse = c(\"CDS\"),   boundariesToParse = NULL,   extra_fields = NULL,   read_sequence = FALSE,   gene_type = \"auto\",   verbose = FALSE,   ... )  read_dna_seg_from_fasta(file, read_sequence = FALSE, ...)  read_dna_seg_from_ptt(file, meta_lines = 2, header = TRUE, ...)  read_dna_seg_from_tab(file, header = TRUE, ...)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_dna_seg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating dna_segs from files â read_dna_seg","text":"file character string containing file path, file connection. tagsToParse character vector tags parse GenBank EMBL files. Common examples include \"CDS\", \"gene\", \"tRNA\", \"repeat_region\", \"misc_feature\". fileType character string containing file format parse. Must one : \"genbank\", \"embl\", \"ptt\", \"fasta\", \"detect\". \"detect\" chosen, attempt determine file format automatically. meta_lines number lines ptt file represent metadata, counting header lines. Standard NCBI files 2 (name length, number proteins). gene_type character string, determines genes visualized. Must valid gene type (see gene_types). GenBank EMBL files, argument \"auto\", genes appear arrows introns, exons (blocks) introns present. header Logical. TRUE, parses first line tabular file header containing column names. extra_fields character vector extra fields parse GenBank EMBL files. fields added columns resulting dna_seg object, unless field always empty. boundariesToParse character vector tags parse sequence boundaries GenBank EMBL files. Common examples include \"source\", \"contig\", \"chromosome\", \"scaffold\". read_sequence Logical. TRUE, add sequence column dna_seg containing DNA amino acid sequence features. verbose Logical. TRUE, reports timings whenever starts parsing file. ... arguments pass .dna_seg. files list character vector containing file paths. Supports wildcard expansion (e.g. *.txt).","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_dna_seg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating dna_segs from files â read_dna_seg","text":"list dna_seg objects read_dna_seg_from_files, single dna_seg object otherwise.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_dna_seg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creating dna_segs from files â read_dna_seg","text":"GenBank EMBL files two commonly used file types often contain great variety information. properly extract data files, user choose features extract. Commonly 'CDS' features interest, feature tags \"gene\", \"misc_feature\", \"tRNA\" may interest. feature contain inner \"pseudo\" tag indicating CDS gene pseudo gene, presented \"CDS_pseudo\" \"gene_pseudo\" feature type respectively resulting table. two file types, following fields parsed (addition mandatory name, start, end, strand): gi (db_xref=GI), uniprot_id, gene, locus_id (locus_tag=), proteinid, product, color, region_plot. sequence CDS tags can also read using read_sequence = TRUE. addition, extra tags can parsed argument extra_fields. one field given name, first one parsed. Tab files representing DNA segments least following columns: name, start, end, strand. column names present, header , 4 columns assumed first 4 columns file, order. tab file headers, additional columns can supplied needed, like line width type, pch / cex. See dna_seg information. example: FASTA files parsed differently, depending first sequence header (defline) found file. parsing FASTA files UniprotKB, metadata parsed fromthe deflines, creating extra columns resulting dna_seg object, including locus_id, gene, product. Alternatively, positional information features parsed using FASTA files ensembl contain information headers. cases, entry FASTA file result single feature, concatenated behind resulting dna_seg. support included parsing metadata FASTA files NCBI. Ptt (protein table) files tabular format providing information protein genome (plasmid, virus, etc).","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_dna_seg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creating dna_segs from files â read_dna_seg","text":"Lionel Guy, Jens Roat Kultima, Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_dna_seg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating dna_segs from files â read_dna_seg","text":"","code":"## Read DNA segment from tab dna_seg3_file <- system.file('extdata/dna_seg3.tab', package = 'genoPlotR') dna_seg3 <- read_dna_seg_from_tab(dna_seg3_file)  ## From GenBank file bq_genbank <- system.file('extdata/BG_plasmid.gbk', package = 'genoPlotR') bq <- read_dna_seg_from_file(bq_genbank, fileType = \"detect\")  ## Parsing extra fields in the GenBank file bq <- read_dna_seg_from_file(bq_genbank,                              extra_fields = c(\"db_xref\", \"transl_table\")) names(bq) #>  [1] \"name\"         \"start\"        \"end\"          \"strand\"       \"length\"       #>  [6] \"gi\"           \"gene\"         \"locus_id\"     \"product\"      \"proteinid\"    #> [11] \"feature\"      \"gene_type\"    \"seq_origin\"   \"db_xref\"      \"transl_table\" #> [16] \"region_plot\"  \"col\"          \"fill\"         \"lty\"          \"lwd\"          #> [21] \"pch\"          \"cex\"           ## From embl file bq_embl <- system.file('extdata/BG_plasmid.embl', package = 'genoPlotR') bq <- read_dna_seg_from_embl(bq_embl)  ## From ptt files bq_ptt <- system.file('extdata/BQ.ptt', package = 'genoPlotR') bq <- read_dna_seg_from_ptt(bq_ptt)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_mauve_backbone.html","id":null,"dir":"Reference","previous_headings":"","what":"Read mauve backbone files to create dna_segs and comparisons â read_mauve_backbone","title":"Read mauve backbone files to create dna_segs and comparisons â read_mauve_backbone","text":"Parses Progressive Mauve backbone files create list dna_segs, matching list comparisons .","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_mauve_backbone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read mauve backbone files to create dna_segs and comparisons â read_mauve_backbone","text":"","code":"read_mauve_backbone(   file,   ref = 1,   gene_type = \"side_blocks\",   header = TRUE,   filter_low = 0,   common_blocks_only = TRUE,   ... )"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_mauve_backbone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read mauve backbone files to create dna_segs and comparisons â read_mauve_backbone","text":"file character string containing file path, file connection. ref numeric indicating DNA segment use reference, .e. one blocks order. gene_type character string, determines genes visualized. Must valid gene type (see gene_types). header Logical. TRUE, parses first line file header containing column names. filter_low numeric, larger 0, blocks smaller number filtered . common_blocks_only Logical. TRUE, reads common blocks (core blocks). ... arguments pass .dna_seg.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_mauve_backbone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read mauve backbone files to create dna_segs and comparisons â read_mauve_backbone","text":"list 2 named elements: dna_segs comparisons, lists containing dna_seg comparison objects, respectively.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_mauve_backbone.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read mauve backbone files to create dna_segs and comparisons â read_mauve_backbone","text":"Mauve Backbone files tabular files summarize similarities genomes blocks. genome 2 columns containing start end coordinates block, respectively. header, present, uses sequence numbers instead genome names. See https://darlinglab.org/mauve/user-guide/files.html info file format. function able read progressiveMauve mauveAligner outputs.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_mauve_backbone.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read mauve backbone files to create dna_segs and comparisons â read_mauve_backbone","text":"Mauve: https://darlinglab.org/mauve/mauve.html","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_mauve_backbone.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read mauve backbone files to create dna_segs and comparisons â read_mauve_backbone","text":"Lionel Guy, Jens Roat Kultima","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_mauve_backbone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read mauve backbone files to create dna_segs and comparisons â read_mauve_backbone","text":"","code":"## Mauve backbone bbone_file <- system.file('extdata/barto.backbone', package = 'genoPlotR') bbone <- read_mauve_backbone(bbone_file) names <- c(\"B_bacilliformis\", \"B_grahamii\", \"B_henselae\", \"B_quintana\") names(bbone$dna_segs) <- names  ## Plot plot_gene_map(dna_segs = bbone$dna_segs, comparisons = bbone$comparisons)   ## Using filter_low & changing reference sequence bbone <- read_mauve_backbone(bbone_file, ref = 2, filter_low = 2000)  names(bbone$dna_segs) <- names plot_gene_map(dna_segs = bbone$dna_segs, comparisons = bbone$comparisons)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_offsets.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse dna_seg offset values for plotting â read_offsets","title":"Parse dna_seg offset values for plotting â read_offsets","text":"function takes character string separates parse offset values plotting plot_gene_map. offset values determine amount space subsegment plotted dna_seg.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_offsets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse dna_seg offset values for plotting â read_offsets","text":"","code":"read_offsets(offsets)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_offsets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse dna_seg offset values for plotting â read_offsets","text":"offsets character string offset values parse. See details.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_offsets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse dna_seg offset values for plotting â read_offsets","text":"list offset values can passed directly offsets argument plot_gene_map. element list numeric vector corresponds offset values one dna_seg.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_offsets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse dna_seg offset values for plotting â read_offsets","text":"format offsets corresponds output print_offsets argument plot_gene_map. offsets must character string containing 1 offset values dna_seg. dna_segs separated commas, plotting order, subsegments separated spaces. dna_seg, single value provided, value become offset first subsegment. values provided dna_seg, must many values subsegments dna_seg.',","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_offsets.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parse dna_seg offset values for plotting â read_offsets","text":"Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_offsets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse dna_seg offset values for plotting â read_offsets","text":"","code":"## Parse offset values for 2 dna_segs ## dna_seg 1: its 2 subsegments will be offset by 150 and 1300, respectively ## dna_seg 2: only its first subsegment  will be offset by 300 read_offsets(\"150 1300,300\") #> [[1]] #> [1]  150 1300 #>  #> [[2]] #> [1] 300 #>"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_offsets_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse dna_seg offset values for plotting from a file â read_offsets_file","title":"Parse dna_seg offset values for plotting from a file â read_offsets_file","text":"function parses file containing offset values plotting plot_gene_map. offset values determine amount space subsegment plotted dna_seg.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_offsets_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse dna_seg offset values for plotting from a file â read_offsets_file","text":"","code":"read_offsets_file(offsets)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_offsets_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse dna_seg offset values for plotting from a file â read_offsets_file","text":"offsets character string containing file path, file connection. See details file format.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_offsets_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse dna_seg offset values for plotting from a file â read_offsets_file","text":"list offset values can passed directly offsets argument plot_gene_map. element list numeric vector corresponds offset values one dna_seg.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_offsets_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse dna_seg offset values for plotting from a file â read_offsets_file","text":"file provided offsets must contain 1 offset values dna_seg. line must contain offset values 1 dna_seg, plotting order, subsegments separated spaces. dna_seg, single value provided, value become offset first subsegment. values provided dna_seg, must many values subsegments dna_seg.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_offsets_file.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parse dna_seg offset values for plotting from a file â read_offsets_file","text":"Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_offsets_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse dna_seg offset values for plotting from a file â read_offsets_file","text":"","code":"## Parse offset values for 2 dna_segs from a file offsets_file <- system.file('extdata/offsets.txt', package = 'genoPlotR')  ## When this file is parsed: ## dna_seg 1: its 2 subsegments will be offset by 150 and 1300, respectively ## dna_seg 2: only its first subsegment  will be offset by 300  ## Example of an offsets file: cat(readLines(offsets_file), sep = \"\\n\") #> 150 1300 #> 300  ## Parse offsets file read_offsets_file(offsets_file) #> [[1]] #> [1]  150 1300 #>  #> [[2]] #> [1] 300 #>   ## This is equivalent to: read_offsets(\"150 1300,300\") #> [[1]] #> [1]  150 1300 #>  #> [[2]] #> [1] 300 #>"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_orthogroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Create comparisons between dna_segs by reading in a file of groupings â read_orthogroup","title":"Create comparisons between dna_segs by reading in a file of groupings â read_orthogroup","text":"Functions create comparisons dna_seg objects parsing (ortho)groups file.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_orthogroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create comparisons between dna_segs by reading in a file of groupings â read_orthogroup","text":"","code":"read_orthogroup_from_file(   file,   dna_segs,   fileType,   seg_labels = NULL,   id_tag = \"locus_id\",   group_name = \"orthogroup\",   alter_dna_segs = TRUE,   verbose = FALSE,   ... )  read_orthogroup_from_orthomcl(file, dna_segs, ...)  read_orthogroup_from_orthofinder(file, dna_segs, ...)  read_orthogroup_from_mmseqs2(file, dna_segs, ...)  read_orthogroup_from_diamond(file, dna_segs, ...)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_orthogroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create comparisons between dna_segs by reading in a file of groupings â read_orthogroup","text":"file character string containing file path. dna_segs list dna_seg objects. fileType character string containing file format parse. Must one : \"orthomcl\", \"orthofinder\", \"mmseqs2\", \"diamond\". seg_labels use \"orthofinder\" format files, character string dna_seg labels. See details. id_tag character string dna_seg column. (gene) names taken (ortho)groups file matched names found dna_seg column. group_name character string containing column name. column contain group names found (ortho)groups file added comparisons, well dna_segs alter_dna_segs set TRUE. alter_dna_segs Logical. TRUE, group column added dna_seg containing groupings found (ortho)groups file. verbose Logical. TRUE, report warning column specified group_name already present dna_segs therefore overwritten. effect unless alter_dna_segs set TRUE. ... Arguments pass fread read_orthogroup_from_file.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_orthogroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create comparisons between dna_segs by reading in a file of groupings â read_orthogroup","text":"alter_dna_segs = TRUE, list 2 named elements: dna_segs comparisons, lists containing dna_seg comparison objects, respectively. alter_dna_segs = FALSE, list comparison objects.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_orthogroup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create comparisons between dna_segs by reading in a file of groupings â read_orthogroup","text":"read_orthogroup_from_orthomcl, read_orthogroup_from_orthofinder, read_orthogroup_from_mmseqs2, read_orthogroup_from_diamond just convenience functions read_orthogroup_from_file. function created create list comparisons list dna_segs file contains orthologous groups genes (orthogroups). However, theoretically used grouping (genetic) elements genomic track. instance, group represent operon, pathway, general function. function creates comparisons linking together columns dna_segs (specified id_tag). \"orthofinder\" format files contain columns representing different genomes input, function attempt query dna_seg whose label matches column. dna_seg labels determined automatically, can also provided using seg_labels argument. labels matched, continue without matching dna_seg names, querying dna_seg column.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_orthogroup.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create comparisons between dna_segs by reading in a file of groupings â read_orthogroup","text":"Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_orthogroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create comparisons between dna_segs by reading in a file of groupings â read_orthogroup","text":"","code":"## Generate data names1 <- c(\"1_FeatA1\", \"1_FeatA2\", \"1_FeatB\") names2 <- c(\"2_FeatA\", \"2_FeatB\") names3 <- c(\"3_FeatA\", \"3_FeatB\") df1 <- data.frame(name = names1, start = c(1, 501, 1501),                   end = c(400, 900, 2200), strand = c(1, 1, 1)) df2 <- data.frame(name = names2, start = c(1, 501),                   end = c(400, 1200), strand = c(1, 1)) df3 <- data.frame(name = names3, start = c(1, 501),                   end = c(400, 1200), strand = c(1, 1))  ## Create list of dna_segs dna_segs <- list(dna_seg(df1), dna_seg(df2), dna_seg(df3))  ## Read feature groups from OrthoFinder (Orthogroups.tsv) format file <- system.file('extdata/OrthoFinder_format.tsv', package = 'genoPlotR') full_data <- read_orthogroup_from_file(file = file, dna_segs = dna_segs,                                        fileType = \"orthofinder\",                                         id_tag = \"name\") #> Error in read_orthogroup_from_file(file = file, dna_segs = dna_segs, fileType = \"orthofinder\",     id_tag = \"name\"): Could not find file at \"\".  ## Plot data plot_gene_map(dna_segs = full_data$dna_segs,               comparisons = full_data$comparisons,               global_color_scheme = \"uniform\",               alpha_comparisons = 0.5) #> Error in eval(expr, envir, enclos): object 'full_data' not found  ## Examples of these groups in the different supported formats: OrthoFinder_file <- system.file('extdata/OrthoFinder_format.tsv',                                 package = 'genoPlotR') OrthoMCL_file <- system.file('extdata/OrthoMCL_format.txt',                              package = 'genoPlotR') MMSeqs2_or_DIAMOND_file <- system.file('extdata/MMseqs2_DIAMOND_format.tsv',                                        package = 'genoPlotR')  cat(readLines(OrthoFinder_file), sep = \"\\n\") #> Warning: file(\"\") only supports open = \"w+\" and open = \"w+b\": using the former #>  cat(readLines(OrthoMCL_file), sep = \"\\n\") #> GroupA: 1_FeatA1 1_FeatA2 2_FeatA 3_FeatA #> GroupB: 1_FeatB 2_FeatB 3_FeatB cat(readLines(MMSeqs2_or_DIAMOND_file), sep = \"\\n\") #> Warning: file(\"\") only supports open = \"w+\" and open = \"w+b\": using the former #>"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_xlims.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse xlims, a set of dna_seg positions for plotting â read_xlims","title":"Parse xlims, a set of dna_seg positions for plotting â read_xlims","text":"function takes character string containing set xlims, positions print dna_segs. Multiple start end positions can provided dna_seg, forming subsegments plot.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_xlims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse xlims, a set of dna_seg positions for plotting â read_xlims","text":"","code":"read_xlims(xlims)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_xlims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse xlims, a set of dna_seg positions for plotting â read_xlims","text":"xlims character string xlims parse. See details.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_xlims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse xlims, a set of dna_seg positions for plotting â read_xlims","text":"list xlims can passed directly xlims argument plot_gene_map. element list numeric vector corresponds xlims one dna_seg.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_xlims.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse xlims, a set of dna_seg positions for plotting â read_xlims","text":"format xlims corresponds output print_xlims argument plot_gene_map. xlims must character string containing set xlims dna_seg. dna_seg, start end positions must provided subsegment, separated spaces. dna_segs separated commas, plotting order. example format provided .","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_xlims.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parse xlims, a set of dna_seg positions for plotting â read_xlims","text":"Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_xlims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse xlims, a set of dna_seg positions for plotting â read_xlims","text":"","code":"## Parse xlims for 2 dna_segs ## For dna_seg 1: 2 subsegments, 1st starts at 1 and ends at 10000 ## while the 2nd subsegment starts at 155000 and ends at 154000 ## For dna_seg 2: 1 subsegment, starting at 500 and ending at 10500 read_xlims(\"1 10000 155000 154000,500 10500\") #> [[1]] #> [1]      1  10000 155000 154000 #>  #> [[2]] #> [1]   500 10500 #>"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_xlims_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse xlims from a file, a set of dna_seg positions for plotting â read_xlims_file","title":"Parse xlims from a file, a set of dna_seg positions for plotting â read_xlims_file","text":"function parses file containing set xlims, positions print dna_segs. Multiple start end positions can provided dna_seg, forming subsegments plot.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_xlims_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse xlims from a file, a set of dna_seg positions for plotting â read_xlims_file","text":"","code":"read_xlims_file(dna_segs, xlims, reorder_dna_segs = FALSE)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_xlims_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse xlims from a file, a set of dna_seg positions for plotting â read_xlims_file","text":"dna_segs Either character vector containing dna_seg labels, list dna_seg objects. xlims character string containing file path, file connection. See details file format. reorder_dna_segs Logical. TRUE, order dna_segs changed match order first appear xlims file. Additionally, dna_seg present xlims file removed. , function return list reordered dna_segs parsed xlims elements, instead just xlims.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_xlims_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse xlims from a file, a set of dna_seg positions for plotting â read_xlims_file","text":"list xlims can passed directly xlims argument plot_gene_map. element list numeric vector contains positions plot one dna_seg. reorder_dna_segs = TRUE, list 2 named elements returned instead (xlims either dna_segs seg_labels, depending dna_segs argument).","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_xlims_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse xlims from a file, a set of dna_seg positions for plotting â read_xlims_file","text":"file format xlims corresponds output outfile_xlims argument plot_gene_map. format question tab-separated file containing xlims dna_seg. row represents one subsegment 3 columns, containing start position, end position, dna_seg label, respectively. example format:","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_xlims_file.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parse xlims from a file, a set of dna_seg positions for plotting â read_xlims_file","text":"Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/read_xlims_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse xlims from a file, a set of dna_seg positions for plotting â read_xlims_file","text":"","code":"## Parse xlims for 3 dna_segs from a file dna_seg_labels <- c(\"Genome_1\", \"Genome_2\", \"Genome_3\") xlims_file <- system.file('extdata/xlims.tab', package = 'genoPlotR')  ## Example of an xlims file: cat(readLines(xlims_file), sep = \"\\n\") #> x0\tx1\tseg_label #> 2000\t12000\tGenome_2 #> 1000\t10000\tGenome_1 #> 6000\t16000\tGenome_3 #> 30000\t40000\tGenome_2  ## Parse xlims file, keep order provided by dna_seg_labels read_xlims_file(dna_seg_labels, xlims_file) #> [[1]] #> [1]  1000 10000 #>  #> [[2]] #> [1]  2000 12000 30000 40000 #>  #> [[3]] #> [1]  6000 16000 #>   ## Parse xlims file, reorder dna_segs based on the xlims file xlims_read <- read_xlims_file(dna_seg_labels, xlims_file,                                reorder_dna_segs = TRUE) xlims_read$xlims #> [[1]] #> [1]  2000 12000 30000 40000 #>  #> [[2]] #> [1]  1000 10000 #>  #> [[3]] #> [1]  6000 16000 #>  xlims_read$seg_labels #> [1] \"Genome_2\" \"Genome_1\" \"Genome_3\""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/reverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse objects â reverse","title":"Reverse objects â reverse","text":"Reverses objects, mainly meant dna_seg comparison objects.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/reverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse objects â reverse","text":"","code":"reverse(x, ...)  # S3 method for default reverse(x, ...)  # S3 method for dna_seg reverse(x, ...)  # S3 method for comparison reverse(x, side = 0, ...)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/reverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse objects â reverse","text":"x object reverse. ... Unused. side Used x comparison object, side reversed. side = 1, first side reversed. side = 2, second side reversed. side < 1, side reversed. side > 2, sides reversed.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/reverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse objects â reverse","text":"object type x.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/reverse.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reverse objects â reverse","text":"Lionel Guy","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/reverse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse objects â reverse","text":"","code":"## load data data(three_genes) dna_segs <- three_genes$dna_segs comparisons <- three_genes$comparisons  ## on dna_seg dna_segs[[1]] #>      name start   end strand   fill gene_type region_plot    col   lty   lwd #>    <char> <num> <num>  <num> <char>    <char>      <char> <char> <num> <num> #> 1:  feat1     2   600     -1   blue    arrows          NA gray20     1     1 #> 2:  feat2  1000   800     -1   grey    arrows          NA gray20     1     1 #> 3:  feat3  1050  1345      1    red    arrows          NA gray20     1     1 #>      pch   cex #>    <num> <num> #> 1:     8     1 #> 2:     8     1 #> 3:     8     1 reverse(dna_segs[[1]]) #>      name start   end strand   fill gene_type region_plot    col   lty   lwd #>    <char> <num> <num>  <num> <char>    <char>      <char> <char> <num> <num> #> 1:  feat1  -600    -2      1   blue    arrows          NA gray20     1     1 #> 2:  feat2  -800 -1000      1   grey    arrows          NA gray20     1     1 #> 3:  feat3 -1345 -1050     -1    red    arrows          NA gray20     1     1 #>      pch   cex #>    <num> <num> #> 1:     8     1 #> 2:     8     1 #> 3:     8     1 ## on comparison reverse(comparisons[[2]], side = 1) #>    start1  end1 start2  end2     col direction #>     <num> <num>  <num> <num>  <char>     <num> #> 1:    -50  -500   1899  2034 #67000D        -1 #> 2:   -800 -1100   2732  2508 #08306B         1 reverse(comparisons[[2]], side = 3) #>    start1  end1 start2  end2     col direction #>     <num> <num>  <num> <num>  <char>     <num> #> 1:    -50  -500  -1899 -2034 #67000D         1 #> 2:   -800 -1100  -2732 -2508 #08306B        -1  ## With mauve backbone data(mauve_bbone) ## Plot plot_gene_map(dna_segs = mauve_bbone$dna_segs,               comparisons = mauve_bbone$comparisons,               alpha_comparisons = 0.4)   ## Reverse B_bacilliformis, and the corresponding comparison (first \"side\") mauve_bbone$dna_segs[[1]] <- reverse(mauve_bbone$dna_segs[[1]]) mauve_bbone$comparisons[[1]] <- reverse(mauve_bbone$comparisons[[1]], 1) plot_gene_map(dna_segs = mauve_bbone$dna_segs,               comparisons = mauve_bbone$comparisons,               alpha_comparisons = 0.4)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/run_sequence_alignment.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform sequence alignments using DIAMOND or BLAST â run_sequence_alignment","title":"Perform sequence alignments using DIAMOND or BLAST â run_sequence_alignment","text":"Executes DIAMOND, blastn, blastp, tblastx algorithm.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/run_sequence_alignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform sequence alignments using DIAMOND or BLAST â run_sequence_alignment","text":"","code":"run_blast(   query,   subject,   out = NULL,   tool_path = NULL,   evalue = \"1E-3\",   max_target_seqs = 10000,   num_threads = 1,   always_make_db = FALSE,   verbose = FALSE,   algorithm = \"blastp\" )  run_diamond(   query,   subject,   out = NULL,   sensitivity = \"default\",   iterate = FALSE,   tool_path = NULL,   evalue = \"1E-3\",   max_target_seqs = 10000,   num_threads = 1,   always_make_db = FALSE,   verbose = FALSE )"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/run_sequence_alignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform sequence alignments using DIAMOND or BLAST â run_sequence_alignment","text":"query Path FASTA file containing sequences query. subject Path FASTA file database. FASTA file given, database created first, folder . File paths databases without file extension. Output file/ folder path. path existing folder, file name generated save hits , based query subject file names. tool_path Path folder containing blast+ executables. necessary $PATH variable. evalue Expectation value (E) threshold hits max_target_seqs maximum amount hits per query num_threads Number threads (CPUs) use BLAST search always_make_db Logical. TRUE, always treats subject FASTA file make database first. FALSE, check presence database first, creates one necessary. verbose Logical. TRUE, reports timings starts making subject database executes actual DIAMOND/ BLAST command. algorithm Choice BLAST algorithm, one : \"blastp\", \"blastp-fast\", \"blastp-short\", \"blastn\", \"blastn-short\", \"megablast\", \"dc-megablast\", \"tblastx\" sensitivity Choice sensitivity option used DIAMOND, one : \"fast\", \"default\", \"mid-sensitive\", \"sensitive\", \"-sensitive\", \"-sensitive\", \"ultra-sensitive\". iterate Logical. TRUE, DIAMOND start looking hits using fast sensitivity setting, increasing sensitivity hits found target sensitivity reached. Also causes stop searching first hit found query.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/run_sequence_alignment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform sequence alignments using DIAMOND or BLAST â run_sequence_alignment","text":"Returns nothing (invisible NULL).","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/run_sequence_alignment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform sequence alignments using DIAMOND or BLAST â run_sequence_alignment","text":"function requires command-line implementation tool choice installed. case BLAST, blast+. Uses every sequence FASTA file provided query queries, aligning reference database provided subject. evalue, max_target_seqs, num_threads directly passed DIAMOND/ BLAST arguments. See respective documentations details. left NULL, current working directory used instead. file name generated based query subject file names.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/run_sequence_alignment.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Perform sequence alignments using DIAMOND or BLAST â run_sequence_alignment","text":"Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/run_sequence_alignment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform sequence alignments using DIAMOND or BLAST â run_sequence_alignment","text":"","code":"if (FALSE) { ## Running BLAST with the blastp algorithm run_blast(query = \"query.fa\",           subject = \"subject.fa\",           out = \"query_subject\",           algorithm = \"blastp\",           tool_path = \"path/to/blast/executable\")  ## Running DIAMOND with the \"very-sensitive\" option run_diamond(query = \"query.fa\",             subject = \"subject.fa\",             out = \"query_subject\",             sensitivity = \"very-sensitive\",             tool_path = \"path/to/diamond/executable\") }"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/seg_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"seg_plot class and methods â seg_plot","title":"seg_plot class and methods â seg_plot","text":"seg_plot object plot data associated dna_seg object. list mandatory optional arguments. main arguments func, function returns grob gList, args, arguments passed function.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/seg_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"seg_plot class and methods â seg_plot","text":"","code":"seg_plot(   func,   args = NULL,   xargs = c(\"x\", \"x0\", \"x1\", \"x2\", \"v\"),   yargs = c(\"y\", \"y0\", \"y1\", \"y2\", \"h\"),   ylim = NULL )  as.seg_plot(seg_plot)  is.seg_plot(seg_plot)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/seg_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"seg_plot class and methods â seg_plot","text":"func function returns grob gList list grobs. User-defined functions can used, ready-made functions grid package can used well. args list, NULL default. arguments passed function. recommended arguments named. xargs character vector containing names arguments args define x-axis. Used, among others, function trim.seg_plot. default, gives common x-defining arguments grid functions (x, x0, x1, x2, v). yargs character vector containing names arguments args define y-axis. Used plotting graphs define sensible ylim defined. default, gives common y-defining arguments grid functions (y, y0, y1, y2, h). ylim numeric vector length 2, defining range plot drawn plot_gene_map. Derived yargs set. seg_plot .seg_plot, list object convert seg_plot. list must consist named elements matching arguments, func args mandatory. See details . .seg_plot, object test.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/seg_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"seg_plot class and methods â seg_plot","text":"seg_plot .seg_plot return seg_plot object. .seg_plot returns logical.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/seg_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"seg_plot class and methods â seg_plot","text":"seg_plot object object describing plot data associated dna_seg. list composed function, arguments pass function, two arguments define define x y, eventual ylim limit plotting certain range. Internally, seg_plot function calls .seg_plot using list arguments seg_plot named elements. words, input .seg_plot list least func args named elements, xargs, yargs, ylim optional named elements. function func return grob object, gList list grobs. predefined functions grid can used, linesGrob, pointsGrob, segmentsGrob, textGrob, polygonGrob. Alternatively, user-defined functions can used instead. arguments args correspond arguments passed func. example, func = pointsGrob, args contain elements x = 10:1, y = 1:10. often also contain gp element, result call gpar function, control graphical aspects plot color, fill, line width style, fonts, etc. .seg_plot returns TRUE object tested seg_plot object.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/seg_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"seg_plot class and methods â seg_plot","text":"Lionel Guy","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/seg_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"seg_plot class and methods â seg_plot","text":"","code":"## Using the existing pointsGrob x <- 1:20 y <- rnorm(20) sp <- seg_plot(func = pointsGrob,                 args = list(x = x, y = y, gp = gpar(col = 1:20, cex = 1:3))) is.seg_plot(sp) #> [1] TRUE ## Function seg_plot(...) is identical to as.seg_plot(list(...)) sp2 <- as.seg_plot(list(func = pointsGrob,                         args = list(x = x, y = y,                                     gp = gpar(col = 1:20, cex = 1:3)))) identical(sp, sp2) #> [1] FALSE ## For the show, plot the obtained result grb <- do.call(sp$func, sp$args) ## Trim the seg_plot sp_trim <- trim(sp, c(3, 10)) ## Changing color and function \"on the fly\" sp_trim$args$gp$col <- \"blue\" sp_trim$func <- linesGrob grb_trim <- do.call(sp_trim$func, sp_trim$args) ## Now plot plot.new() pushViewport(viewport(xscale = c(0, 21), yscale = c(-4, 4))) grid.draw(grb) grid.draw(grb_trim)   ## Using home-made function triangleGrob <- function(start, end, strand, col, ...) {   x <- c(start, (start+end)/2, end)   y1 <- 0.5 + 0.4*strand   y <- c(y1, rep(0.5, length(y1)), y1)   polygonGrob(x, y, gp = gpar(col = col), default.units = \"native\",               id = rep(1:7, 3)) } start <- seq(1, 19, by = 3) + rnorm(7) / 3 end <- start + 1 + rnorm(7) strand <- sign(rnorm(7)) sp_tr <- seg_plot(func = triangleGrob,                   args = list(start = start, end = end, strand = strand,                             col = 1:length(start)),                   xargs = c(\"start\", \"end\")) grb_tr <- do.call(sp_tr$func, sp_tr$args) plot.new() pushViewport(viewport(xscale = c(1, 22), yscale = c(-2, 2))) grid.draw(grb_tr)  ## Trim sp_tr_trim <- trim(sp_tr, xlim = c(5, 15)) str(sp_tr_trim) #> List of 5 #>  $ func :function (start, end, strand, col, ...)   #>   ..- attr(*, \"srcref\")= 'srcref' int [1:8] 27 17 33 1 17 1 27 33 #>   .. ..- attr(*, \"srcfile\")=Classes 'srcfilecopy', 'srcfile' <environment: 0x0000016fb7d02d30>  #>  $ args :List of 5 #>   ..$ start        : num [1:3] 6.57 10.25 13.63 #>   ..$ end          : num [1:3] 6.05 12.18 14.81 #>   ..$ strand       : num [1:3] -1 -1 -1 #>   ..$ col          : int [1:3] 3 4 5 #>   ..$ default.units: chr \"native\" #>  $ xargs: chr [1:2] \"start\" \"end\" #>  $ yargs: chr [1:5] \"y\" \"y0\" \"y1\" \"y2\" ... #>  $ ylim : NULL #>  - attr(*, \"class\")= chr [1:2] \"seg_plot\" \"list\" ## If the correct xargs are not indicated, trimming won't work sp_tr$xargs <- c(\"x\") sp_tr_trim2 <- trim(sp_tr, xlim = c(5, 15)) identical(sp_tr_trim, sp_tr_trim2) #> [1] FALSE  y1 <- convertY(grobY(grb_tr, \"south\"), \"native\") y2 <- convertY(grobY(grb_tr, \"north\"), \"native\") heightDetails(grb) #> [1] 7.50381417763126inches grb #> points[GRID.points.54]   ## Applying it to plot_gene_maps data(three_genes) dna_segs <- three_genes$dna_segs comparisons <- three_genes$comparisons  ## Build data to plot xs <- lapply(dna_segs, range) colors <- c(\"red\", \"blue\", \"green\")  seg_plots <- list() for (i in 1:length(xs)) {   x <- seq(xs[[i]][1], xs[[i]][2], length = 20)   seg_plots[[i]] <- seg_plot(func = pointsGrob,                              args = list(x = x, y = rnorm(20) + 2 * i,                              default.units = \"native\", pch = 3,                              gp = gpar(col = colors[i], cex = 0.5))) } plot_gene_map(dna_segs, comparisons,               seg_plots = seg_plots,               seg_plot_height = 0.5,               seg_plot_height_unit = \"inches\",               dna_seg_scale = TRUE)   ## A more complicated example data(barto) tree <- ade4::newick2phylog(\"(BB:2.5,(BG:1.8,(BH:1,BQ:0.8):1.9):3);\") ## Showing several subsegments per genome xlims2 <- list(c(1445000, 1415000, 1380000, 1412000),                c(  10000,   45000,   50000,   83000, 90000, 120000),                c(  15000,   36000,   90000,  120000, 74000,  98000),                c(   5000,   82000))  ## Adding fake data in 1kb windows seg_plots <- lapply(barto$dna_segs, function(ds) {   x <- seq(1, range(ds)[2], by = 1000)   y <- jitter(seq(100, 300, length = length(x)), amount = 50)   seg_plot(func = linesGrob,            args = list(x = x, y = y, gp = gpar(col = grey(0.3), lty = 2))) }) plot_gene_map(barto$dna_segs, barto$comparisons, tree = tree,               seg_plots = seg_plots,               seg_plot_height = 0.5,               seg_plot_height_unit = \"inches\",               xlims = xlims2,               limit_to_longest_dna_seg = FALSE,               dna_seg_scale = TRUE,               main = \"Random plots for the same segment in 4 Bartonella genomes\")"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/sequential_color_scheme.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a sequential color scheme to dna_segs and comparisons â sequential_color_scheme","title":"Apply a sequential color scheme to dna_segs and comparisons â sequential_color_scheme","text":"Generates applies sequential color scheme list dna_seg comparison objects. taking colors already transferring features connected comparisons. example, feature single dna_seg red fill attribute, comparisons can linked feature become red well. followed updating dna_seg features linked comparisons, .","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/sequential_color_scheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a sequential color scheme to dna_segs and comparisons â sequential_color_scheme","text":"","code":"sequential_color_scheme(   dna_segs,   comparisons,   seg_id = \"locus_id\",   comparison_id = \"auto\",   color_var = \"fill\",   default_color = \"grey80\",   both_directions = TRUE )"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/sequential_color_scheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a sequential color scheme to dna_segs and comparisons â sequential_color_scheme","text":"dna_segs list dna_seg objects. comparisons list comparison objects. seg_id name dna_seg column, whose values used make links comparisons. comparison_id shared name comparison columns, whose values used make links dna_segs. See details. color_var character string denoting color attribute update dna_segs, one : \"fill\", \"col\". default_color character string providing default color, must either NULL valid color. color given argument ignored updating, never overwriting color. both_directions Logical. FALSE, color scheme applied sequentially plotting order, starting first dna_seg. both_directions TRUE, additionally update dna_seg comparison reverse plotting order.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/sequential_color_scheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a sequential color scheme to dna_segs and comparisons â sequential_color_scheme","text":"list 2 named elements: dna_segs comparisons, lists containing dna_seg comparison objects, respectively.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/sequential_color_scheme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a sequential color scheme to dna_segs and comparisons â sequential_color_scheme","text":"existing colors input dna_seg comparison objects transferred next object plotting order, exception default colors, provided default_color. comparison objects single color attribute col, updated using column provided color_var dna_segs, dna_segs updated using col column comparisons regardless color_var. objects linked together shared values. columns shared values determined seg_id comparison_id arguments, dna_segs comparisons, respectively. comparison_id refers 2 columns, defaults \"auto\", attempt determine columns use automatically. example, comparison_id set \"name\", look \"name1\" \"name2\" columns match seg_id dna_segs , , respectively.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/sequential_color_scheme.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Apply a sequential color scheme to dna_segs and comparisons â sequential_color_scheme","text":"Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/sequential_color_scheme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a sequential color scheme to dna_segs and comparisons â sequential_color_scheme","text":"","code":"## Prepare dna_seg names1 <- c(\"1A\", \"1B\", \"1C\") names2 <- c(\"2A\", \"2C\", \"2B\") names3 <- c(\"3B\", \"3A\", \"3C\")  ## Make dna_segs with some alternate colors dna_seg1 <- dna_seg(data.frame(name = names1,                                start = (1:3) * 3,                                end = (1:3) * 3 + 2,                                strand = rep(1, 3),                                fill = c(\"darkred\", \"grey80\", \"darkblue\"))) dna_seg2 <- dna_seg(data.frame(name = names2,                                start = (1:3) * 3,                                end = (1:3) * 3 + 2,                                strand = rep(1, 3),                                fill = c(\"grey80\", \"grey80\", \"darkgreen\"))) dna_seg3 <- dna_seg(data.frame(name = names3,                                start = (1:3) * 3,                                end = (1:3) * 3 + 2,                                strand = rep(1, 3)))  ## Make comparisons comp1 <- comparison(data.frame(start1 = c(3, 6, 9), end1 = c(5, 8, 11),                                start2 = c(3, 9, 6), end2 = c(5, 11, 8),                                name1 = c(\"1A\", \"1B\", \"1C\"),                                 name2 = c(\"2A\", \"2B\", \"2C\"),                                direction = c(1, 1, 1))) comp2 <- comparison(data.frame(start1 = c(3, 9, 6), end1 = c(5, 11, 8),                                start2 = c(6, 3, 9), end2 = c(8, 5, 11),                                name1 = c(\"2A\", \"2B\", \"2C\"),                                 name2 = c(\"3A\", \"3B\", \"3C\"),                                direction = c(1, 1, 1)))  ## Before adding a color scheme plot_gene_map(dna_segs = list(dna_seg1, dna_seg2, dna_seg3),                comparisons = list(comp1, comp2),               alpha_comparisons = 0.6)   ## Sequential color scheme without going both directions full_data <- sequential_color_scheme(list(dna_seg1, dna_seg2, dna_seg3),                                      comparisons = list(comp1, comp2),                                      seg_id = \"name\",                                      both_directions = FALSE) plot_gene_map(dna_segs = full_data$dna_segs,                comparisons = full_data$comparisons,               alpha_comparisons = 0.6)   ## Sequential color scheme with both directions full_data <- sequential_color_scheme(list(dna_seg1, dna_seg2, dna_seg3),                                      comparisons = list(comp1, comp2),                                      seg_id = \"name\") plot_gene_map(dna_segs = full_data$dna_segs,                comparisons = full_data$comparisons,               alpha_comparisons = 0.6)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/sequential_updates.html","id":null,"dir":"Reference","previous_headings":"","what":"Update dna_segs and comparisons sequentially in plotting order â sequential_updates","title":"Update dna_segs and comparisons sequentially in plotting order â sequential_updates","text":"Takes list dna_seg list comparison objects, updates sequentially, plotting order. can used update positions comparisons, well color region_plot attributes dna_segs comparisons. taking values features attributes transferring comparisons directly connected , features connected comparisons. example, feature single dna_seg red fill attribute, comparisons can linked feature become red well. followed updating dna_seg features linked comparisons, .","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/sequential_updates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update dna_segs and comparisons sequentially in plotting order â sequential_updates","text":"","code":"sequential_updates(   dna_segs,   comparisons,   seg_id = \"locus_id\",   comparison_id = \"auto\",   color_var = NULL,   default_color = \"grey80\",   update_region_plot = TRUE,   update_positions = FALSE,   both_directions = TRUE )"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/sequential_updates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update dna_segs and comparisons sequentially in plotting order â sequential_updates","text":"dna_segs list dna_seg objects. comparisons list comparison objects. seg_id name dna_seg column, whose values used make links comparisons. comparison_id shared name comparison columns, whose values used make links dna_segs. See details. color_var character string denoting color attribute update, must one : \"fill\", \"col\", left NULL, means color updated. default_color character string providing default color, must either NULL valid color. color given argument ignored updating, never overwriting color. update_region_plot Logical. TRUE, updates region_plot attribute dna_segs (comparisons pass information dna_segs follow), determines whether neighborhood features plotted regional plot. update_positions Logical. TRUE, updates plotted positions comparisons match dna_segs. start1 end1 updated using dna_seg comparison plotting order, start2 end2 updated using dna_seg comparison plotting order. both_directions Logical. FALSE, updates applied sequentially plotting order, starting first dna_seg. both_directions TRUE, additionally update dna_seg comparison reverse plotting order.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/sequential_updates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update dna_segs and comparisons sequentially in plotting order â sequential_updates","text":"list 2 named elements: dna_segs comparisons, lists containing dna_seg comparison objects, respectively.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/sequential_updates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update dna_segs and comparisons sequentially in plotting order â sequential_updates","text":"updating colors, existing colors input dna_seg comparison objects transferred next object plotting order, exception default colors, provided default_color. comparison objects single color attribute col, updated using column provided color_var dna_segs, dna_segs updated using col column comparisons regardless color_var (unless left NULL avoid updating colors entirely). objects linked together shared values. columns shared values determined seg_id comparison_id arguments, dna_segs comparisons, respectively. comparison_id refers 2 columns, defaults \"auto\", attempt determine columns use automatically. example, comparison_id set \"name\", look \"name1\" \"name2\" columns match seg_id dna_segs , , respectively. circumstances interconnected comparisons might want set both_directions FALSE avoid transferring region_plot attribute many features.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/sequential_updates.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Update dna_segs and comparisons sequentially in plotting order â sequential_updates","text":"Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/sequential_updates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update dna_segs and comparisons sequentially in plotting order â sequential_updates","text":"","code":"## Prepare dna_seg names1 <- c(\"1A\", \"1B\", \"1C\") names2 <- c(\"2A\", \"2C\", \"2B\") names3 <- c(\"3B\", \"3A\", \"3C\")  ## Make dna_segs with some alternate colors dna_seg1 <- dna_seg(data.frame(name=names1, start=(1:3)*3, end=(1:3)*3+2,                                strand=rep(1, 3),                                fill=c(\"darkred\", \"grey80\", \"darkblue\"))) dna_seg2 <- dna_seg(data.frame(name=names2, start=(1:3)*3, end=(1:3)*3+2,                                strand=rep(1, 3),                                fill=c(\"grey80\", \"grey80\", \"darkgreen\"))) dna_seg3 <- dna_seg(data.frame(name=names3, start=(1:3)*3, end=(1:3)*3+2,                                strand=rep(1, 3)))  ## Make comparisons comp1 <- comparison(data.frame(start1=c(3,6,9), end1=c(5,8,11),                                start2=c(3,9,6), end2=c(5,11,8),                                name1=c(\"1A\", \"1B\", \"1C\"),                                 name2=c(\"2A\", \"2B\", \"2C\"),                                direction=c(1,1,1))) comp2 <- comparison(data.frame(start1=c(3,9,6), end1=c(5,11,8),                                start2=c(6,3,9), end2=c(8,5,11),                                name1=c(\"2A\", \"2B\", \"2C\"),                                 name2=c(\"3A\", \"3B\", \"3C\"),                                direction=c(1,1,1)))  ## Before applying sequential_updates plot_gene_map(dna_segs=list(dna_seg1, dna_seg2, dna_seg3),                comparisons=list(comp1, comp2),               alpha_comparisons=0.6)   ## Applying sequential_updates without updating in both directions full_data <- sequential_updates(list(dna_seg1, dna_seg2, dna_seg3),                                 comparisons=list(comp1, comp2),                                 seg_id = \"name\",                                 color_var = \"fill\",                                 both_directions = FALSE) plot_gene_map(dna_segs=full_data$dna_segs,               comparisons=full_data$comparisons,               alpha_comparisons=0.6)   ## Applying sequential_updates using both directions full_data <- sequential_updates(list(dna_seg1, dna_seg2, dna_seg3),                                 comparisons=list(comp1, comp2),                                 seg_id = \"name\",                                 color_var = \"fill\") plot_gene_map(dna_segs=full_data$dna_segs,                comparisons=full_data$comparisons,               alpha_comparisons=0.6)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/three_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Three genes data set â three_genes","title":"Three genes data set â three_genes","text":"set three made-genes, compared three chromosomes.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/three_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Three genes data set â three_genes","text":"","code":"data(three_genes)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/three_genes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Three genes data set â three_genes","text":"three_genes, list two data frame lists, representing three genes three DNA segments: dna_segs list 3 dna_seg objects, containing three genes (rows) . comparisons list 2 comparison objects.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/three_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Three genes data set â three_genes","text":"","code":"data(three_genes) plot_gene_map(three_genes$dna_segs, three_genes$comparisons)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/trim.html","id":null,"dir":"Reference","previous_headings":"","what":"Trimming data frames using a numeric interval â trim","title":"Trimming data frames using a numeric interval â trim","text":"Trims data frames 2 numeric columns using numeric interval. Returns rows numeric values fall within interval.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/trim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trimming data frames using a numeric interval â trim","text":"","code":"trim(x, ...)  # S3 method for default trim(x, xlim = NULL, ...)  # S3 method for dna_seg trim(x, xlim = NULL, ...)  # S3 method for comparison trim(x, xlim1 = c(-Inf, Inf), xlim2 = c(-Inf, Inf), ...)  # S3 method for annotation trim(x, xlim = NULL, ...)  # S3 method for seg_plot trim(x, xlim = NULL, ...)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/trim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trimming data frames using a numeric interval â trim","text":"x object trim, generally data.frame, data.table, seg_plot object ... Unused. xlim numeric length 2. general case, rows whose values included interval returned xlim1 numeric length 2, used comparison objects, interval filter first side. xlim2 numeric length 2, used comparison objects, interval filter second side.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/trim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trimming data frames using a numeric interval â trim","text":"object type x, rows (subset) corresponding given interval","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/trim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trimming data frames using a numeric interval â trim","text":"default uses first 2 numeric columns x. x dna_seg object, uses start end columns. x comparison object, filters using start1 end1 columns xlim1 argument, start2 end2 xlim2 argument. x annotation object, uses x1 x2 columns. x seg_plot object, function uses xargs variable x define vectors determine x position (length). , variables (including inside gp variable) length x vectors trimmed, rows x values inside xlim argument kept.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/trim.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Trimming data frames using a numeric interval â trim","text":"Lionel Guy","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/trim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trimming data frames using a numeric interval â trim","text":"","code":"## Load data(barto) xlim_ref <- c(10000, 45000) ## Seg 2 (ref) barto$dna_segs[[2]] <- trim(barto$dna_segs[[2]], xlim = xlim_ref) ## Seg 1 barto$comparisons[[1]] <- trim(barto$comparisons[[1]], xlim2 = xlim_ref) xlim1 <- range(barto$comparisons[[1]], overall = FALSE)$xlim1 barto$dna_segs[[1]] <- trim(barto$dna_segs[[1]], xlim = xlim1) ## Seg 3 barto$comparisons[[2]] <- trim(barto$comparisons[[2]], xlim1 = xlim_ref) xlim3 <- range(barto$comparisons[[2]], overall = FALSE)$xlim2 barto$dna_segs[[3]] <- trim(barto$dna_segs[[3]], xlim = xlim3) ## Seg 4 barto$comparisons[[3]] <- trim(barto$comparisons[[3]], xlim1 = xlim3) xlim4 <- range(barto$comparisons[[3]], overall = FALSE)$xlim2 barto$dna_segs[[4]] <- trim(barto$dna_segs[[4]], xlim = xlim4) ## Plot plot_gene_map(barto$dna_segs, barto$comparisons)   ## With seg_plot x <- 1:20 y <- rnorm(20) sp <- seg_plot(func = pointsGrob,                args = list(x = x, y = y, gp = gpar(col = 1:20, cex = 1:3))) ## Trim  sp_trim <- trim(sp, c(3, 10)) str(sp_trim) #> List of 5 #>  $ func :function (x = stats::runif(10), y = stats::runif(10), pch = 1, size = unit(1,  #>     \"char\"), default.units = \"native\", name = NULL, gp = gpar(), vp = NULL)   #>  $ args :List of 4 #>   ..$ x            : int [1:8] 3 4 5 6 7 8 9 10 #>   ..$ y            : num [1:8] 0.0442 0.6271 -0.9472 -1.1228 -0.0203 ... #>   ..$ gp           :List of 2 #>   .. ..$ col: int [1:8] 3 4 5 6 7 8 9 10 #>   .. ..$ cex: num [1:3] 1 2 3 #>   .. ..- attr(*, \"class\")= chr \"gpar\" #>   ..$ default.units: chr \"native\" #>  $ xargs: chr [1:5] \"x\" \"x0\" \"x1\" \"x2\" ... #>  $ yargs: chr [1:5] \"y\" \"y0\" \"y1\" \"y2\" ... #>  $ ylim : NULL #>  - attr(*, \"class\")= chr [1:2] \"seg_plot\" \"list\" range(sp_trim$arg$x) #> [1]  3 10"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/trim_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim a tree to remove unused sequences â trim_tree","title":"Trim a tree to remove unused sequences â trim_tree","text":"Takes (phylogenetic) tree removes tree tips found given set names.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/trim_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim a tree to remove unused sequences â trim_tree","text":"","code":"trim_tree(dna_segs, tree, exact_match = FALSE)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/trim_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim a tree to remove unused sequences â trim_tree","text":"dna_segs Either character vector containing dna_seg labels, list dna_seg objects. tree (phylogenetic) tree, form phylo phylog object, character string containing file path Newick tree format file. exact_match Logical. TRUE, dna_seg labels need match labels tree exactly. exact_match = FALSE, tree tip labels need contain dna_seg labels match found (e.g. dna_seg label \"seq_1\" match tree tip label \"E_coli_seq_1.fa\").","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/trim_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim a tree to remove unused sequences â trim_tree","text":"phylog object containing filtered tree.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/trim_tree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trim a tree to remove unused sequences â trim_tree","text":"function takes character vector dna_seg labels, either directly, extracting list dna_segs, dna_segs argument. labels queried find matching tree tip labels, tree tip label without match removed. multiple matches found single dna_seg label, error returned shows offending dna_seg label.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/trim_tree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Trim a tree to remove unused sequences â trim_tree","text":"Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/trim_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trim a tree to remove unused sequences â trim_tree","text":"","code":"## Generate data names <- c(\"seq_1\", \"seq_2\", \"seq_3\") tree_str <- paste0(\"(seq_1_B_bacilliformis:0.5,\",                    \"(seq_2_B_grahamii:0.1,\",                    \"(seq_3_B_henselae:0.1,\",                    \"seq_4_B_quintana:0.2):0.1):0.1);\"                    ) tree <- ade4::newick2phylog(tree_str)  ## Filter tree tree$tre #> [1] \"(seq_1_B_bacilliformis,(seq_2_B_grahamii,(seq_3_B_henselae,seq_4_B_quintana)I1)I2)Root;\" tree <- trim_tree(dna_segs = names, tree = tree) tree$tre #> [1] \"(seq_1_B_bacilliformis,(seq_2_B_grahamii,seq_3_B_henselae)I2)Root;\""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/uniform_color_scheme.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a uniform color scheme to dna_segs and comparisons â uniform_color_scheme","title":"Apply a uniform color scheme to dna_segs and comparisons â uniform_color_scheme","text":"Generates applies uniform color scheme list dna_seg / comparison objects. done generating set colors based set unique values taken given (shared) column.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/uniform_color_scheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a uniform color scheme to dna_segs and comparisons â uniform_color_scheme","text":"","code":"uniform_color_scheme(   dna_segs = NULL,   comparisons = NULL,   id_column,   ids = NULL,   cluster_ids = TRUE,   colors = NULL,   color_var = \"fill\",   alpha_dna_segs = NULL,   alpha_comparisons = NULL )"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/uniform_color_scheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a uniform color scheme to dna_segs and comparisons â uniform_color_scheme","text":"dna_segs list dna_seg objects. comparisons list comparison objects. id_column name column, whose unique values used generate color scheme. Must exist provided data sets. ids character vector values id_column generate colors . values found id_column set ignored. cluster_ids Logical. TRUE, numbered values may clustered together, sharing single color. Specifically, look values end number, values number removed, cluster together. example: \"lac_1\", \"lac-2\", \"lac\" given color. Finally, value \"-\" (usually value gene column hypothetical proteins) also given dedicated color. colors Choice colors use, can palette, vector colors. See details. color_var character string denoting color attribute update dna_segs, one : \"fill\", \"col\". alpha_dna_segs single numeric value 0 1, NULL. Determines transparency applied colors used dna_segs, 0 fully transparent, 1 fully opaque. alpha_comparisons single numeric value 0 1, NULL. Determines transparency applied colors used comparisons, 0 fully transparent, 1 fully opaque.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/uniform_color_scheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a uniform color scheme to dna_segs and comparisons â uniform_color_scheme","text":"dna_segs provided, list dna_seg objects. comparisons provided, list comparison objects. dna_segs comparisons provided, list 2 named elements: dna_segs comparisons, lists containing dna_seg comparison objects, respectively.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/uniform_color_scheme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a uniform color scheme to dna_segs and comparisons â uniform_color_scheme","text":"amount colors generated equal amount unique values present id_column data set(s). colors argument can left NULL, case one 3 different palettes used, based amount colors need generated. NULL, colors must either character string representing known palette (see hcl.pals palette.pals), character vector values can recognized colors (.e. \"red\" \"#88CCEE\"). enough colors vector, duplicated warning given.","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/uniform_color_scheme.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Apply a uniform color scheme to dna_segs and comparisons â uniform_color_scheme","text":"Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/uniform_color_scheme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a uniform color scheme to dna_segs and comparisons â uniform_color_scheme","text":"","code":"## Prepare dna_seg names1 <- c(\"A\", \"B\", \"C\") names2 <- c(\"A\", \"C\", \"B\") names3 <- c(\"B\", \"A\", \"C\")  ## Make dna_segs with some alternate colors dna_seg1 <- dna_seg(data.frame(name = names1,                                start = (1:3) * 3,                                end = (1:3) * 3 + 2,                                strand = rep(1, 3))) dna_seg2 <- dna_seg(data.frame(name = names2,                                start = (1:3) * 3,                                end = (1:3) * 3 + 2,                                strand = rep(1, 3))) dna_seg3 <- dna_seg(data.frame(name = names3,                                start = (1:3) * 3,                                end = (1:3) * 3 + 2,                                strand = rep(1, 3)))  ## Make comparisons comp1 <- comparison(data.frame(start1 = c(3, 6, 9), end1 = c(5, 8, 11),                                start2 = c(3, 9, 6), end2 = c(5, 11, 8),                                name = c(\"A\", \"B\", \"C\"),                                direction = c(1, 1, 1))) comp2 <- comparison(data.frame(start1 = c(3, 9, 6), end1 = c(5, 11, 8),                                start2 = c(6, 3, 9), end2 = c(8, 5, 11),                                name = c(\"A\", \"B\", \"C\"),                                direction = c(1, 1, 1)))  ## Before adding a color scheme plot_gene_map(dna_segs = list(dna_seg1, dna_seg2, dna_seg3),                comparisons = list(comp1, comp2),               alpha_comparisons = 0.6)   ## Apply uniform color scheme full_data <- uniform_color_scheme(list(dna_seg1, dna_seg2, dna_seg3),                                   comparisons = list(comp1, comp2),                                   id_column = \"name\") plot_gene_map(dna_segs = full_data$dna_segs,                comparisons = full_data$comparisons,               alpha_comparisons = 0.6)   ## Use ids and colors to specify the values and colors to use full_data <- uniform_color_scheme(list(dna_seg1, dna_seg2, dna_seg3),                                   comparisons = list(comp1, comp2),                                   id_column = \"name\",                                   ids = c(\"A\", \"C\"),                                   colors = c(\"purple\", \"#F8A19F\")) plot_gene_map(dna_segs = full_data$dna_segs,                comparisons = full_data$comparisons,               alpha_comparisons = 0.6)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/update_comparisons.html","id":null,"dir":"Reference","previous_headings":"","what":"Update comparisons using dna_segs â update_comparisons","title":"Update comparisons using dna_segs â update_comparisons","text":"comparison list comparisons updated using matching list dna_segs. can used update region_plot, col, position columns comparisons, linking dna_seg features.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/update_comparisons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update comparisons using dna_segs â update_comparisons","text":"","code":"update_comparisons(   dna_seg_input,   comparison_input,   seg_id = \"locus_id\",   comparison_id = \"auto\",   update_positions = FALSE,   update_region_plot = TRUE,   color_var = NULL,   default_color = \"grey80\",   update_from_top = TRUE )"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/update_comparisons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update comparisons using dna_segs â update_comparisons","text":"dna_seg_input Either single dna_seg list dna_seg objects. comparison_input Either single comparison list comparison objects. seg_id name dna_seg column, whose values used make links comparisons. comparison_id shared name comparison columns, whose values used make links dna_segs. See details. update_positions Logical. TRUE, updates plotted positions comparisons match dna_segs. start1 end1 updated using dna_seg comparison plotting order, start2 end2 updated using dna_seg comparison plotting order. update_region_plot Logical. TRUE, updates region_plot column comparisons. serves purpose able transfer information dna_segs, region_plot column function comparison objects. color_var color column update comparisons . col fill, column taken dna_segs update col column comparisons. Must either col, fill, left default NULL, result color column updated. default_color character string providing default color dna_segs, must either NULL valid color. color given argument ignored updating, never overwriting color comparisons. update_from_top Logical. TRUE, updates comparisons dna_segs plotting order. Setting FALSE make update comparisons using dna_segs plotting order, also means dna_segs comparisons need provided reverse plotting order. Therefore, recommended used providing single dna_seg comparison.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/update_comparisons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update comparisons using dna_segs â update_comparisons","text":"Either single comparison object list comparison objects, matching input given using comparison_input.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/update_comparisons.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update comparisons using dna_segs â update_comparisons","text":"dna_seg_input single dna_seg, updated using first () comparison comparison_input. objects linked together shared values. columns shared values determined seg_id comparison_id arguments, dna_segs comparisons, respectively. comparison_id refers 2 columns, defaults \"auto\", attempt determine columns use automatically. example, comparison_id set \"name\", look \"name1\" \"name2\" columns match seg_id dna_segs , , respectively. update_from_top TRUE, assumes list dna_segs comparisons plotting order. first dna_seg updated comparison update . instead update_from_top FALSE, dna_segs comparisons supplied reverse plot order, recommended. case last dna_seg plot order updated, comparison update .","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/update_comparisons.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Update comparisons using dna_segs â update_comparisons","text":"Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/update_comparisons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update comparisons using dna_segs â update_comparisons","text":"","code":"## Prepare dna_seg names1 <- c(\"1A\", \"1B\", \"1C\") names2 <- c(\"2A\", \"2C\", \"2B\") names3 <- c(\"3B\", \"3A\", \"3C\")  ## Make dna_segs dna_seg1 <- dna_seg(data.frame(name = names1,                                start = (1:3) * 3,                                end = (1:3) * 3 + 2,                                strand = rep(1, 3))) dna_seg2 <- dna_seg(data.frame(name = names2,                                start = (1:3) * 3,                                end = (1:3) * 3 + 2,                                strand = rep(1, 3))) dna_seg3 <- dna_seg(data.frame(name = names3,                                start = (1:3) * 3,                                end = (1:3) * 3 + 2,                                strand = rep(1, 3))) dna_segs <- list(\"Genome 1\" = dna_seg1,                  \"Genome 2\" = dna_seg2,                  \"Genome 3\" = dna_seg3)  ## Add colors based on the presence of a string in the feature names id_grep <- c(\"A\", \"B\") fill_grep <- c(\"red\", \"blue\") dna_segs <- edit_dna_segs(dna_seg_input = dna_segs,                           ids = data.frame(id = id_grep, fill = fill_grep))  ## Make comparisons comp1 <- comparison(data.frame(start1 = c(3, 6, 8), end1 = c(5, 8, 10),                                start2 = c(3, 9, 7), end2 = c(5, 11, 9),                                name1 = c(\"1A\", \"1B\", \"1C\"),                                name2 = c(\"2A\", \"2B\", \"2C\"),                                direction = c(1, 1, 1))) comp2 <- comparison(data.frame(start1 = c(3, 9, 7), end1 = c(5, 11, 9),                                start2 = c(6, 3, 8), end2 = c(8, 5, 10),                                name1 = c(\"2A\", \"2B\", \"2C\"),                                name2 = c(\"3A\", \"3B\", \"3C\"),                                direction = c(1, 1, 1)))  ## Before using update_comparisons plot_gene_map(dna_segs = dna_segs,                comparisons = list(comp1, comp2),               alpha_comparisons = 0.6)   ## Apply update_comparisons to fix the positions and update the colors comps <- update_comparisons(dna_seg_input = dna_segs,                             comparison_input = list(comp1, comp2),                             seg_id = \"name\",                             color_var = \"fill\",                             update_positions = TRUE)  ## After using update_comparisons plot_gene_map(dna_segs = dna_segs,                comparisons = comps,               alpha_comparisons = 0.6)"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/update_dna_segs.html","id":null,"dir":"Reference","previous_headings":"","what":"Update dna_segs using comparisons â update_dna_segs","title":"Update dna_segs using comparisons â update_dna_segs","text":"dna_seg list dna_segs updated using matching list comparisons. can used update region_plot color attributes dna_seg features, linking comparisons.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/update_dna_segs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update dna_segs using comparisons â update_dna_segs","text":"","code":"update_dna_segs(   dna_seg_input,   comparison_input,   seg_id = \"locus_id\",   comparison_id = \"auto\",   update_region_plot = TRUE,   color_var = NULL,   default_color = \"grey80\",   update_from_top = TRUE )"},{"path":"https://mvpuijk.github.io/genoPlotR/reference/update_dna_segs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update dna_segs using comparisons â update_dna_segs","text":"dna_seg_input Either single dna_seg list dna_seg objects. comparison_input Either single comparison list comparison objects. seg_id name dna_seg column, whose values used make links comparisons. comparison_id shared name comparison columns, whose values used make links dna_segs. See details. update_region_plot Logical. TRUE, updates region_plot attribute dna_segs, determines whether neighborhood features plotted regional plot. color_var color column update dna_segs. Must either col, fill, left default NULL, result color column updated. default_color character string providing default color comparisons, must either NULL valid color. color given argument ignored updating, never overwriting color dna_segs. update_from_top Logical. TRUE, updates dna_segs comparisons plotting order. Setting FALSE make update dna_segs using comparisons plotting order, also means dna_segs comparisons need provided reverse plotting order. Therefore, recommended used providing single dna_seg comparison.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/update_dna_segs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update dna_segs using comparisons â update_dna_segs","text":"Either single dna_seg object list dna_seg objects, matching input given using dna_seg_input.","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/update_dna_segs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update dna_segs using comparisons â update_dna_segs","text":"dna_seg_input single dna_seg, updated using first () comparison comparison_input. updating colors, colors taken col column comparison objects, regardless whether col fill column updated dna_segs, fill column absent comparison objects. objects linked together shared values. columns shared values determined seg_id comparison_id arguments, dna_segs comparisons, respectively. comparison_id refers 2 columns, defaults \"auto\", attempt determine columns use automatically. example, comparison_id set \"name\", look \"name1\" \"name2\" columns match seg_id dna_segs , , respectively. update_from_top TRUE, assumes list dna_segs comparisons plotting order. first dna_seg updated comparison update . instead update_from_top FALSE, dna_segs comparisons supplied reverse plot order, recommended. case last dna_seg plot order updated, comparison update .","code":""},{"path":[]},{"path":"https://mvpuijk.github.io/genoPlotR/reference/update_dna_segs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Update dna_segs using comparisons â update_dna_segs","text":"Mike Puijk","code":""},{"path":"https://mvpuijk.github.io/genoPlotR/reference/update_dna_segs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update dna_segs using comparisons â update_dna_segs","text":"","code":"## Prepare dna_seg names1 <- c(\"1A\", \"1B\", \"1C\") names2 <- c(\"2A\", \"2C\", \"2B\") names3 <- c(\"3B\", \"3A\", \"3C\")  ## Make dna_segs dna_seg1 <- dna_seg(data.frame(name = names1,                                start = (1:3) * 3,                                end = (1:3) * 3 + 2,                                strand = rep(1, 3))) dna_seg2 <- dna_seg(data.frame(name = names2,                                start = (1:3) * 3,                                end = (1:3) * 3 + 2,                                strand = rep(1, 3))) dna_seg3 <- dna_seg(data.frame(name = names3,                                start = (1:3) * 3,                                end = (1:3) * 3 + 2,                                strand = rep(1, 3),                                fill = c(\"grey80\", \"grey80\", \"green\"))) dna_segs <- list(\"Genome 1\" = dna_seg1,                  \"Genome 2\" = dna_seg2,                  \"Genome 3\" = dna_seg3)  ## Make comparisons comp1 <- comparison(data.frame(start1 = c(3, 6, 9), end1 = c(5, 8, 11),                                start2 = c(3, 9, 6), end2 = c(5, 11, 8),                                name1 = c(\"1A\", \"1B\", \"1C\"),                                name2 = c(\"2A\", \"2B\", \"2C\"),                                col = c(\"red\", \"blue\", \"grey80\"),                                direction = c(1, 1, 1))) comp2 <- comparison(data.frame(start1 = c(3, 9, 6), end1 = c(5, 11, 8),                                start2 = c(6, 3, 9), end2 = c(8, 5, 11),                                name1 = c(\"2A\", \"2B\", \"2C\"),                                name2 = c(\"3A\", \"3B\", \"3C\"),                                col = c(\"red\", \"blue\", \"grey80\"),                                direction = c(1, 1, 1)))  ## Before using update_dna_segs plot_gene_map(dna_segs = dna_segs,                comparisons = list(comp1, comp2),               alpha_comparisons = 0.6)   ## Apply update_dna_segs to update the colors dna_segs <- update_dna_segs(dna_seg_input = dna_segs,                             comparison_input = list(comp1, comp2),                             seg_id = \"name\",                             update_region_plot = FALSE,                             color_var = \"fill\",                             default_color = \"grey80\")  ## After using update_dna_segs ## Because default_color was \"grey80\", that color will not overwrite dna_segs plot_gene_map(dna_segs = dna_segs,                comparisons = list(comp1, comp2),               alpha_comparisons = 0.6)"}]
